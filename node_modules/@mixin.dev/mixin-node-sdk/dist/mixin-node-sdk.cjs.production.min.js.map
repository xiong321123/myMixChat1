{"version":3,"file":"mixin-node-sdk.cjs.production.min.js","sources":["../src/client/utils/amount.ts","../src/client/utils/base64.ts","../src/client/utils/encoder.ts","../src/client/utils/uniq.ts","../src/client/utils/ed25519.ts","../src/client/utils/pin.ts","../src/client/error.ts","../src/client/utils/auth.ts","../src/client/http.ts","../src/client/utils/client.ts","../src/client/address.ts","../src/client/app.ts","../src/client/asset.ts","../src/client/attachment.ts","../src/client/utils/address.ts","../src/client/utils/decoder.ts","../src/client/utils/multisigs.ts","../src/client/utils/nfo.ts","../src/client/utils/tip.ts","../src/client/utils/safe.ts","../src/client/utils/ws.ts","../src/client/blaze.ts","../src/client/ws.ts","../src/client/circle.ts","../src/client/code.ts","../src/client/collectible.ts","../src/client/conversation.ts","../src/client/external.ts","../src/client/message.ts","../src/client/multisig.ts","../src/client/network.ts","../src/client/oauth.ts","../src/client/payment.ts","../src/client/pin.ts","../src/client/safe.ts","../src/client/transfer.ts","../src/client/user.ts","../src/client/utxo.ts","../src/client/mixin-client.ts","../src/constant.ts","../src/webview/client.ts","../src/client/utils/sleep.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\nlet zeros = '0';\nwhile (zeros.length < 256) {\n  zeros += zeros;\n}\n\nconst getMultiplier = (n: number) => BigNumber(`1${zeros.substring(0, n)}`);\n\nexport const formatUnits = (amount: string | number, unit: number) => {\n  const m = getMultiplier(unit);\n  return BigNumber(amount).dividedBy(m);\n};\nexport const parseUnits = (amount: string | number, unit: number) => {\n  const m = getMultiplier(unit);\n  return BigNumber(amount).times(m);\n};\n","/**\n * mixin uses raw url encoding as default for base64 process\n * base64RawURLEncode is the standard raw, unpadded base64 encoding\n * base64RawURLDecode is same as encode\n * like Golang version https://pkg.go.dev/encoding/base64#Encoding\n */\nexport const base64RawURLEncode = (raw: Buffer | Uint8Array | string): string => {\n  let buf = raw;\n  if (typeof raw === 'string') {\n    buf = Buffer.from(raw);\n  } else if (raw instanceof Uint8Array) {\n    buf = Buffer.from(raw);\n  }\n  if (buf.length === 0) {\n    return '';\n  }\n  return buf.toString('base64').replaceAll('=', '').replaceAll('+', '-').replaceAll('/', '_');\n};\n\nexport const base64RawURLDecode = (raw: string | Buffer): Buffer => {\n  let data = raw instanceof Buffer ? raw.toString() : raw;\n  data = data.replaceAll('-', '+').replaceAll('_', '/');\n  return Buffer.from(data, 'base64');\n};\n","import { parse } from 'uuid';\nimport BigNumber from 'bignumber.js';\nimport { Aggregated, Input, Output } from '../types';\nimport { parseUnits } from './amount';\n\nconst MaximumEncodingInt = 0xffff;\n\nconst AggregatedSignaturePrefix = 0xff01;\n\nexport const magic = Buffer.from([0x77, 0x77]);\nconst empty = Buffer.from([0x00, 0x00]);\n\nexport const integerToBytes = (x: number) => {\n  const bytes = [];\n  let i = x;\n  do {\n    bytes.unshift(i & 255);\n    i = (i / 2 ** 8) | 0;\n  } while (i !== 0);\n  return bytes;\n};\n\nexport const bigNumberToBytes = (x: BigNumber) => {\n  const bytes = [];\n  let i = x;\n  do {\n    bytes.unshift(i.mod(256).toNumber());\n    i = i.dividedToIntegerBy(256);\n  } while (!i.isZero());\n  return Buffer.from(bytes);\n};\n\nexport const putUvarInt = (x: number) => {\n  const buf = [];\n  let i = 0;\n  while (x >= 0x80) {\n    buf[i] = x | 0x80;\n    x >>= 7;\n    i++;\n  }\n  buf[i] = x;\n  return buf;\n};\n\nexport class Encoder {\n  buf: Buffer;\n\n  constructor(buf: Buffer | undefined) {\n    this.buf = Buffer.from('');\n    if (buf) {\n      this.buf = buf;\n    }\n  }\n\n  hex() {\n    return this.buf.toString('hex');\n  }\n\n  write(buf: Buffer) {\n    this.buf = Buffer.concat([this.buf, buf]);\n  }\n\n  writeBytes(buf: Buffer) {\n    const len = buf.byteLength;\n    this.writeInt(len);\n    this.write(buf);\n  }\n\n  writeSlice(buf: Buffer) {\n    const l = buf.length;\n    if (l > 128) throw new Error(`slice too long, length ${l}, maximum 128`);\n    this.write(Buffer.from([l]));\n    this.write(buf);\n  }\n\n  writeInt(i: number) {\n    if (i > MaximumEncodingInt) {\n      throw new Error(`invalid integer ${i}, maximum ${MaximumEncodingInt}`);\n    }\n    const buf = Buffer.alloc(2);\n    buf.writeUInt16BE(i);\n    this.write(buf);\n  }\n\n  writeUint16(i: number) {\n    const buf = Buffer.alloc(2);\n    buf.writeUInt16BE(i);\n    this.write(buf);\n  }\n\n  writeUint32(i: number) {\n    const buf = Buffer.alloc(4);\n    buf.writeUInt32BE(i);\n    this.write(buf);\n  }\n\n  writeUint64(i: bigint) {\n    const buf = Buffer.alloc(8);\n    buf.writeBigUInt64BE(i);\n    this.write(buf);\n  }\n\n  writeInteger(i: BigNumber) {\n    const b = bigNumberToBytes(i);\n    this.writeInt(b.byteLength);\n    this.write(b);\n  }\n\n  // TODO convert array like to array\n  writeUUID(id: string) {\n    const uuid: any = parse(id);\n    for (let i = 0; i < uuid.length; i += 1) {\n      this.write(Buffer.from([uuid[i]]));\n    }\n  }\n\n  encodeInput(input: Input) {\n    const i = input;\n    this.write(Buffer.from(i.hash, 'hex'));\n    this.writeInt(i.index);\n\n    if (!i.genesis) i.genesis = '';\n    this.writeInt(i.genesis.length);\n    this.write(Buffer.from(i.genesis));\n    const d = i.deposit;\n    if (typeof d === 'undefined') {\n      this.write(empty);\n    } else {\n      // TODO... to test...\n      this.write(magic);\n      this.write(Buffer.from(d.chain, 'hex'));\n\n      const asset = Buffer.from(d.asset);\n      this.writeInt(asset.byteLength);\n      this.write(asset);\n\n      const tx = Buffer.from(d.transaction);\n      this.writeInt(tx.byteLength);\n      this.write(tx);\n\n      this.writeUint64(d.index);\n      this.writeInteger(parseUnits(Number(d.amount).toFixed(8), 8));\n    }\n    const m = i.mint;\n    if (typeof m === 'undefined') {\n      this.write(empty);\n    } else {\n      this.write(magic);\n      if (!m.group) m.group = '';\n      this.writeInt(m.group.length);\n      this.write(Buffer.from(m.group));\n\n      this.writeUint64(m.batch);\n      this.writeInteger(parseUnits(Number(m.amount).toFixed(8), 8));\n    }\n  }\n\n  encodeOutput(output: Output) {\n    const o = output;\n    if (!o.type) o.type = 0;\n    this.write(Buffer.from([0x00, o.type]));\n    this.writeInteger(parseUnits(Number(o.amount).toFixed(8), 8));\n\n    this.writeInt(o.keys.length);\n    o.keys.forEach(k => this.write(Buffer.from(k, 'hex')));\n\n    this.write(o.mask ? Buffer.from(o.mask, 'hex') : Buffer.alloc(32, 0));\n\n    if (!o.script) o.script = '';\n    const s = Buffer.from(o.script, 'hex');\n    this.writeInt(s.byteLength);\n    this.write(s);\n\n    const w = o.withdrawal;\n    if (!w) {\n      this.write(empty);\n    } else {\n      this.write(magic);\n\n      const addr = Buffer.from(w.address);\n      this.writeInt(addr.byteLength);\n      this.write(addr);\n\n      const tag = Buffer.from(w.tag);\n      this.writeInt(tag.byteLength);\n      this.write(tag);\n    }\n  }\n\n  encodeAggregatedSignature(js: Aggregated) {\n    this.writeInt(MaximumEncodingInt);\n    this.writeInt(AggregatedSignaturePrefix);\n    this.write(Buffer.from(js.signature, 'hex'));\n\n    if (js.signers.length === 0) {\n      this.write(Buffer.from([0x00]));\n      this.writeInt(0);\n      return;\n    }\n\n    js.signers.forEach((m, i) => {\n      if (i > 0 && m <= js.signers[i - 1]) {\n        throw new Error('signers not sorted');\n      }\n      if (m > MaximumEncodingInt) {\n        throw new Error('signer overflow');\n      }\n    });\n\n    const max = js.signers[js.signers.length - 1];\n\n    if (((((max / 8) | 0) + 1) | 0) > js.signature.length * 2) {\n      // TODO... not check...\n      this.write(Buffer.from([0x01]));\n      this.writeInt(js.signature.length);\n      js.signers.forEach(m => this.writeInt(m));\n      return;\n    }\n\n    const masks = Buffer.alloc((((max / 8) | 0) + 1) | 0);\n    js.signers.forEach(m => {\n      masks[(m / 8) | 0] ^= 1 << (m % 8 | 0);\n    });\n    this.write(Buffer.from([0x00]));\n    this.writeInt(masks.length);\n    this.write(masks);\n  }\n\n  encodeSignature(sm: { [key: number]: string }) {\n    const ss = Object.entries(sm)\n      .map(([k, v]) => ({ index: k, sig: v }))\n      .sort((a, b) => Number(a.index) - Number(b.index));\n\n    this.writeInt(ss.length);\n    ss.forEach(s => {\n      this.writeUint16(Number(s.index));\n      this.write(Buffer.from(s.sig, 'hex'));\n    });\n  }\n}\n\nexport default Encoder;\n","import forge from 'node-forge';\nimport { blake3 } from '@noble/hashes/blake3';\nimport { sha3_256 } from '@noble/hashes/sha3';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { stringify as uuidStringify, v4 as uuid } from 'uuid';\n\n/** Supporting multisig for tokens & collectibles */\nexport const hashMembers = (ids: string[]): string => {\n  const key = ids.sort().join('');\n  return newHash(Buffer.from(key)).toString('hex');\n};\n\n/** Generate an unique conversation id for contact */\nexport const uniqueConversationID = (userID: string, recipientID: string): string => {\n  const [minId, maxId] = [userID, recipientID].sort();\n  const md5 = forge.md.md5.create();\n  md5.update(minId);\n  md5.update(maxId);\n  const bytes = Buffer.from(md5.digest().bytes(), 'binary');\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x30;\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n  return uuidStringify(bytes);\n};\n\nexport const newHash = (data: Buffer) => Buffer.from(sha3_256.create().update(data).digest());\n\nexport const sha256Hash = (data: Buffer) => Buffer.from(sha256.create().update(data).digest());\n\nexport const sha512Hash = (data: Buffer) => Buffer.from(sha512.create().update(data).digest());\n\nexport const blake3Hash = (data: Buffer) => Buffer.from(blake3.create({}).update(data).digest());\n\nexport const getUuid = () => uuid();\n","import { ed25519, edwardsToMontgomery, edwardsToMontgomeryPriv, x25519 } from '@noble/curves/ed25519';\nimport { Field } from '@noble/curves/abstract/modular';\nimport { numberToBytesLE, bytesToNumberLE } from '@noble/curves/abstract/utils';\nimport { blake3Hash, sha512Hash } from './uniq';\nimport { putUvarInt } from './encoder';\n\nconst scMinusOne = Buffer.from('ecd3f55c1a631258d69cf7a2def9de1400000000000000000000000000000010', 'hex');\nconst base = ed25519.ExtendedPoint.fromHex('5866666666666666666666666666666666666666666666666666666666666666');\nconst fn = Field(ed25519.CURVE.n, undefined, true);\n\nconst isReduced = (x: Buffer) => {\n  for (let i = x.byteLength - 1; i >= 0; i--) {\n    if (x.at(i)! > scMinusOne.at(i)!) return false;\n    if (x.at(i)! < scMinusOne.at(i)!) return true;\n  }\n  return true;\n};\n\nconst setBytesWithClamping = (x: Buffer) => {\n  if (x.byteLength !== 32) throw new Error('edwards25519: invalid SetBytesWithClamping input length');\n  const wideBytes = Buffer.alloc(64);\n  x.copy(wideBytes, 0, 0, 32);\n  wideBytes[0] &= 248;\n  wideBytes[31] &= 63;\n  wideBytes[31] |= 64;\n  const m = fn.create(bytesToNumberLE(wideBytes.subarray(0, 32)));\n  return m;\n};\n\nconst setUniformBytes = (x: Buffer) => {\n  if (x.byteLength !== 64) throw new Error('edwards25519: invalid setUniformBytes input length');\n  const wideBytes = Buffer.alloc(64);\n  x.copy(wideBytes);\n  const m = fn.create(bytesToNumberLE(wideBytes));\n  return m;\n};\n\nconst setCanonicalBytes = (x: Buffer) => {\n  if (x.byteLength !== 32) throw new Error('invalid scalar length');\n  if (!isReduced(x)) throw new Error('invalid scalar encoding');\n  const s = fn.create(bytesToNumberLE(x));\n  return s;\n};\n\nconst scalarBaseMult = (x: bigint) => {\n  const res = base.multiply(x);\n  // @ts-ignore\n  return Buffer.from(res.toRawBytes());\n};\n\nconst scalarBaseMultToPoint = (x: bigint) => base.multiply(x);\n\nconst publicFromPrivate = (priv: Buffer) => {\n  const x = setCanonicalBytes(priv);\n  const v = scalarBaseMult(x);\n  return v;\n};\n\nconst sign = (msg: Buffer, key: Buffer) => {\n  const digest1 = sha512Hash(key.subarray(0, 32));\n  const messageDigest = sha512Hash(Buffer.concat([digest1.subarray(32), msg]));\n\n  const z = setUniformBytes(messageDigest);\n  const r = scalarBaseMult(z);\n\n  const pub = publicFromPrivate(key);\n  const hramDigest = sha512Hash(Buffer.concat([r, pub, msg]));\n\n  const x = setUniformBytes(hramDigest);\n  const y = setCanonicalBytes(key);\n  const s = numberToBytesLE(fn.add(fn.mul(x, y), z), 32);\n  return Buffer.concat([r, s]);\n};\n\nconst newPoint = (x: Buffer) => ed25519.ExtendedPoint.fromHex(x.toString('hex'));\n\nconst keyMultPubPriv = (pub: Buffer, priv: Buffer) => {\n  const q = newPoint(pub);\n  const x = setCanonicalBytes(priv);\n  const res = q.multiply(x);\n  // @ts-ignore\n  return Buffer.from(res.toRawBytes());\n};\n\nconst hashScalar = (k: Buffer, index: number) => {\n  const tmp = Buffer.from(putUvarInt(index));\n  const src = Buffer.alloc(64);\n  let hash = blake3Hash(Buffer.concat([k, tmp]));\n  hash.copy(src, 0, 0, 32);\n  hash = blake3Hash(hash);\n  hash.copy(src, 32, 0, 32);\n  const s = setUniformBytes(src);\n\n  hash = blake3Hash(Buffer.from(numberToBytesLE(s, 32)));\n  hash.copy(src, 0, 0, 32);\n  hash = blake3Hash(hash);\n  hash.copy(src, 32, 0, 32);\n  return setUniformBytes(src);\n};\n\nexport const edwards25519 = {\n  scalar: fn,\n  x25519,\n  edwardsToMontgomery,\n  edwardsToMontgomeryPriv,\n\n  setBytesWithClamping,\n  setCanonicalBytes,\n  setUniformBytes,\n\n  isReduced,\n  publicFromPrivate,\n  scalarBaseMult,\n  scalarBaseMultToPoint,\n  sign,\n\n  newPoint,\n  keyMultPubPriv,\n  hashScalar,\n};\n","// @ts-ignore\nimport nano from 'nano-seconds';\nimport forge from 'node-forge';\nimport { Uint64LE as Uint64 } from 'int64-buffer';\nimport type { Keystore, AppKeystore, NetworkUserKeystore } from '../types/keystore';\nimport { base64RawURLDecode, base64RawURLEncode } from './base64';\nimport { Encoder } from './encoder';\nimport { edwards25519 as ed } from './ed25519';\nimport { sha256Hash } from './uniq';\n\nexport const getNanoTime = () => {\n  const now: number[] = nano.now();\n  return now[0] * 1e9 + now[1];\n};\n\nexport const sharedEd25519Key = (keystore: AppKeystore | NetworkUserKeystore) => {\n  const pub = 'server_public_key' in keystore ? ed.edwardsToMontgomery(Buffer.from(keystore.server_public_key, 'hex')) : base64RawURLDecode(keystore.pin_token_base64);\n  const pri = ed.edwardsToMontgomeryPriv(Buffer.from(keystore.session_private_key, 'hex'));\n  return ed.x25519.getSharedSecret(pri, pub);\n};\n\nexport const getTipPinUpdateMsg = (pub: Buffer, counter: number) => {\n  const enc = new Encoder(pub);\n  enc.writeUint64(BigInt(counter));\n  return enc.buf;\n};\n\nexport const signEd25519PIN = (pin: string, keystore: Keystore | undefined): string => {\n  if (!keystore || !keystore.session_private_key) return '';\n  if (!('server_public_key' in keystore) && !('pin_token_base64' in keystore)) return '';\n  const blockSize = 16;\n\n  const _pin = Buffer.from(pin, 'hex');\n  const iterator = Buffer.from(new Uint64(getNanoTime()).toBuffer());\n  const time = Buffer.from(new Uint64(Date.now() / 1000).toBuffer());\n  const buf = Buffer.concat([_pin, time, iterator]);\n\n  const buffer = forge.util.createBuffer(buf.toString('binary'));\n  const paddingLen = blockSize - (buffer.length() % blockSize);\n  const paddings = [];\n  for (let i = 0; i < paddingLen; i += 1) {\n    paddings.push(paddingLen);\n  }\n  buffer.putBytes(Buffer.from(paddings).toString('binary'));\n\n  const iv = forge.random.getBytesSync(blockSize);\n  const sharedKey = sharedEd25519Key(keystore);\n  const cipher = forge.cipher.createCipher('AES-CBC', forge.util.createBuffer(sharedKey, 'raw'));\n  cipher.start({ iv });\n  cipher.update(buffer);\n  cipher.finish();\n\n  const pinBuff = forge.util.createBuffer();\n  pinBuff.putBytes(iv);\n  pinBuff.putBytes(cipher.output.getBytes());\n\n  const len = pinBuff.length();\n  const encryptedBytes = Buffer.from(pinBuff.getBytes(len - 16), 'binary');\n  return base64RawURLEncode(encryptedBytes);\n};\n\nexport const getCreateAddressTipBody = (asset_id: string, publicKey: string, tag: string, name: string) => {\n  const msg = `TIP:ADDRESS:ADD:${asset_id + publicKey + tag + name}`;\n  return sha256Hash(Buffer.from(msg));\n};\n\nexport const getRemoveAddressTipBody = (address_id: string) => {\n  const msg = `TIP:ADDRESS:REMOVE:${address_id}`;\n  return sha256Hash(Buffer.from(msg));\n};\n\nexport const getVerifyPinTipBody = (timestamp: number) => {\n  const msg = `TIP:VERIFY:${`${timestamp}`.padStart(32, '0')}`;\n  return Buffer.from(msg);\n};\n\nexport const signTipBody = (pin: string, msg: Buffer) => {\n  const privateKey = Buffer.from(pin, 'hex');\n  const signData = forge.pki.ed25519.sign({\n    message: msg,\n    privateKey,\n  });\n  return signData.toString('hex');\n};\n","export class ResponseError extends Error {\n  constructor(public code: number, public description: string, public status: number, public extra: object, public requestId: string | undefined, public originalError: unknown) {\n    super(`code: ${code}, description: ${description}, status: ${status}, extra: ${extra}, requestId: ${requestId} originalError: ${originalError}`);\n  }\n}\n\nexport default ResponseError;\n","import serialize from 'serialize-javascript';\nimport forge from 'node-forge';\nimport { validate } from 'uuid';\nimport type { Keystore, AppKeystore, OAuthKeystore, NetworkUserKeystore } from '../types/keystore';\nimport { base64RawURLEncode } from './base64';\n\nexport const getED25519KeyPair = () => {\n  const seed = Buffer.from(forge.random.getBytesSync(32), 'binary');\n  const keypair = forge.pki.ed25519.generateKeyPair({ seed });\n  return {\n    privateKey: Buffer.from(keypair.privateKey),\n    publicKey: Buffer.from(keypair.publicKey),\n    seed,\n  };\n};\n\nconst signToken = (payload: Object, private_key: string): string => {\n  const header = base64RawURLEncode(serialize({ alg: 'EdDSA', typ: 'JWT' }));\n  const payloadStr = base64RawURLEncode(serialize(payload));\n\n  const privateKey = Buffer.from(private_key, 'hex');\n  const result = [header, payloadStr];\n  const signData = forge.pki.ed25519.sign({\n    message: result.join('.'),\n    encoding: 'utf8',\n    privateKey,\n  });\n\n  const sign = base64RawURLEncode(signData);\n  result.push(sign);\n  return result.join('.');\n};\n\n/**\n * sign an authentication token\n * sig: sha256(method + uri + params)\n */\nexport const signAuthenticationToken = (methodRaw: string | undefined, uri: string, params: Object | string, requestID: string, keystore: AppKeystore | NetworkUserKeystore) => {\n  if (!keystore.session_id || !validate(keystore.session_id)) return '';\n\n  let method = 'GET';\n  if (methodRaw) method = methodRaw.toLocaleUpperCase();\n\n  let data: string = '';\n  if (typeof params === 'object') {\n    data = serialize(params, { unsafe: true });\n  } else if (typeof params === 'string') {\n    data = params;\n  }\n\n  const iat = Math.floor(Date.now() / 1000);\n  const exp = iat + 3600;\n  const md = forge.md.sha256.create();\n  md.update(method + uri + data, 'utf8');\n\n  const payload = {\n    uid: keystore.app_id,\n    sid: keystore.session_id,\n    iat,\n    exp,\n    jti: requestID,\n    sig: md.digest().toHex(),\n    scp: 'FULL',\n  };\n\n  return signToken(payload, keystore.session_private_key);\n};\n\n/**\n * Sign an OAuth access token\n * Notes:\n * requestID should equal the one in header\n * scope should be oauth returned\n */\nexport const signOauthAccessToken = (methodRaw: string | undefined, uri: string, params: Object | string, requestID: string, keystore: OAuthKeystore) => {\n  if (!keystore.scope) return '';\n\n  let method = 'GET';\n  if (methodRaw) method = methodRaw.toLocaleUpperCase();\n\n  let data: string = '';\n  if (typeof params === 'object') {\n    data = serialize(params, { unsafe: true });\n  } else if (typeof params === 'string') {\n    data = params;\n  }\n\n  const iat = Math.floor(Date.now() / 1000);\n  const exp = iat + 3600;\n  const md = forge.md.sha256.create();\n  md.update(method + uri + data, 'utf8');\n\n  const payload = {\n    iss: keystore.app_id,\n    aid: keystore.authorization_id,\n    iat,\n    exp,\n    jti: requestID,\n    sig: md.digest().toHex(),\n    scp: keystore.scope,\n  };\n\n  return signToken(payload, keystore.session_private_key);\n};\n\nexport const signAccessToken = (methodRaw: string | undefined, uri: string, params: Object | string, requestID: string, keystore: Keystore | undefined) => {\n  if (!keystore || !keystore.app_id || !keystore.session_private_key) return '';\n  if (!validate(keystore.app_id)) return '';\n\n  const privateKey = Buffer.from(keystore.session_private_key, 'hex');\n  if (privateKey.byteLength !== 32) return '';\n\n  if ('authorization_id' in keystore) {\n    return signOauthAccessToken(methodRaw, uri, params, requestID, keystore);\n  }\n  return signAuthenticationToken(methodRaw, uri, params, requestID, keystore);\n};\n","import axios, { AxiosInstance, InternalAxiosRequestConfig, AxiosResponse } from 'axios';\nimport axiosRetry, { isIdempotentRequestError } from 'axios-retry';\nimport { v4 as uuid } from 'uuid';\nimport isRetryAllowed from 'is-retry-allowed';\nimport { ResponseError } from './error';\nimport { Keystore } from './types/keystore';\nimport { RequestConfig } from './types/client';\nimport { signAccessToken } from './utils/auth';\n\nconst hostURL = ['https://api.mixin.one', 'https://mixin-api.zeromesh.net'];\n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.patch['Content-Type'] = 'application/json';\nexport function http(keystore?: Keystore, config?: RequestConfig): AxiosInstance {\n  const timeout = config?.timeout || 3000;\n  const retries = config?.retry || 5;\n\n  const ins = axios.create({\n    baseURL: hostURL[0],\n    timeout,\n    ...config,\n  });\n\n  ins.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n    const { method, data } = config;\n    const url = axios.getUri(config).slice(config.baseURL?.length);\n\n    if (config.headers) {\n      const requestID = uuid();\n      config.headers['X-Request-Id'] = requestID;\n      const jwtToken = signAccessToken(method, url, data, requestID, keystore);\n      config.headers.Authorization = `Bearer ${jwtToken}`;\n    }\n\n    return config;\n  });\n\n  ins.interceptors.response.use(async (res: AxiosResponse) => {\n    const { data, error } = res.data;\n    if (error) throw new ResponseError(error.code, error.description, error.status, error.extra, res.headers['x-request-id'], error);\n    return data;\n  });\n\n  ins.interceptors.response.use(undefined, async (e: any) => {\n    await config?.responseCallback?.(e);\n\n    return Promise.reject(e);\n  });\n\n  axiosRetry(ins, {\n    retries,\n    shouldResetTimeout: true,\n    retryDelay: () => 500,\n    retryCondition: error =>\n      (!error.response &&\n        Boolean(error.code) && // Prevents retrying cancelled requests\n        isRetryAllowed(error)) ||\n      isIdempotentRequestError(error),\n    onRetry: (_count, err, requestConfig) => {\n      if (config?.baseURL) return;\n      requestConfig.baseURL = err.config?.baseURL === hostURL[0] ? hostURL[1] : hostURL[0];\n      ins.defaults.baseURL = err.config?.baseURL === hostURL[0] ? hostURL[1] : hostURL[0];\n    },\n  });\n\n  return ins;\n}\n\nexport const mixinRequest = http();\n","import { AxiosInstance } from 'axios';\nimport { BaseClient, BuildClient, HTTPConfig, KeystoreClient, RequestClient, RequestConfig, UnionKeystoreClient } from '../types/client';\nimport type { Keystore } from '../types/keystore';\nimport { http } from '../http';\n\nexport const createAxiosClient = (keystore?: Keystore, requestConfig?: RequestConfig) => http(keystore, requestConfig);\n\nexport const createRequestClient = (axiosInstance: AxiosInstance): RequestClient => ({\n  request: config => axiosInstance.request(config),\n});\n\nexport const buildClient: BuildClient =\n  <KeystoreReturnType extends object>(KeystoreClient: UnionKeystoreClient<KeystoreReturnType>): BaseClient<KeystoreReturnType> =>\n  (config: HTTPConfig = {}): any => {\n    if (!KeystoreClient) throw new Error('keystore client is required');\n\n    const { keystore, requestConfig } = config;\n    const axiosInstance = createAxiosClient(keystore, requestConfig);\n    const requestClient = createRequestClient(axiosInstance);\n    const keystoreClient = (KeystoreClient as KeystoreClient<KeystoreReturnType>)(axiosInstance, keystore);\n\n    return Object.assign(keystoreClient, requestClient);\n  };\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { AddressResponse, AddressRequest } from './types/address';\nimport { getCreateAddressTipBody, getRemoveAddressTipBody, signEd25519PIN, signTipBody } from './utils/pin';\nimport { buildClient } from './utils/client';\n\n/**\n * All tokens withdrawal needs an address\n * Should create an address first, the address can be deleted, can't be updated.\n * If the address belongs to another mixin user, the withdrawal fee will be free.\n * tag or memo can be blank.\n * Detail: https://developers.mixin.one/docs/api/withdrawal/address-add\n */\nexport const AddressKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => ({\n  /** Get an address by addressID */\n  fetch: (addressID: string): Promise<AddressResponse> => axiosInstance.get<unknown, AddressResponse>(`/addresses/${addressID}`),\n\n  /** Get a list of withdrawal addresses for the given asset */\n  fetchList: (assetID: string): Promise<AddressResponse[]> => axiosInstance.get<unknown, AddressResponse[]>(`/assets/${assetID}/addresses`),\n\n  /** Create a new withdrawal address */\n  create: (pin: string, params: AddressRequest): Promise<AddressResponse> => {\n    const msg = getCreateAddressTipBody(params.asset_id, params.destination, params.tag ?? '', params.label);\n    const signedTipPin = signTipBody(pin, msg);\n    const encrypted = signEd25519PIN(signedTipPin, keystore);\n    return axiosInstance.post<unknown, AddressResponse>('/addresses', { ...params, pin: encrypted });\n  },\n\n  /** Delete a specified address by addressID */\n  delete: (pin: string, addressID: string): Promise<any> => {\n    const msg = getRemoveAddressTipBody(addressID);\n    const signedTipPin = signTipBody(pin, msg);\n    const encrypted = signEd25519PIN(signedTipPin, keystore);\n    return axiosInstance.post<unknown, any>(`/addresses/${addressID}/delete`, { pin: encrypted });\n  },\n});\n\nexport const AddressClient = buildClient(AddressKeystoreClient);\n\nexport default AddressClient;\n","import { AxiosInstance } from 'axios';\nimport {\n  AppResponse,\n  AppPropertyResponse,\n  AppRequest,\n  AppSafeSessionRequest,\n  AppSafeRegistrationRequest,\n  AppSessionResponse,\n  AppRegistrationResponse,\n  AppSecretResponse,\n} from './types/app';\nimport { buildClient } from './utils/client';\n\n// TODO add app api for developer document\n/**\n * API for mixin users and official app\n * Notes:\n * * Some api only available for mixin official app\n * * Each Mixin user can only create two free apps\n * https://developers.mixin.one/\n */\nexport const AppKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get information of current user's a specific app */\n  fetch: (appID: string): Promise<AppResponse> => axiosInstance.get<unknown, AppResponse>(`/apps/${appID}`),\n\n  /**\n   * Get app list of current user\n   * Available for mixin official developer app only\n   */\n  fetchList: (): Promise<AppResponse[]> => axiosInstance.get<unknown, AppResponse[]>(`/apps`),\n\n  /**\n   * Get app number of current user and the price to buy new credit\n   * Available for mixin official developer app only\n   */\n  properties: (): Promise<AppPropertyResponse> => axiosInstance.get<unknown, AppPropertyResponse>(`/apps/property`),\n\n  /** Get user's app share list */\n  favorites: (userID: string): Promise<AppResponse[]> => axiosInstance.get<unknown, AppResponse[]>(`/users/${userID}/apps/favorite`),\n\n  /** Developer can create up to 2 free apps, or pay for more unlimited apps */\n  create: (params: AppRequest): Promise<AppResponse> => axiosInstance.post<unknown, AppResponse>(`/apps`, params),\n\n  /** Update app setting */\n  update: (appID: string, params: AppRequest): Promise<AppResponse> => axiosInstance.post<unknown, AppResponse>(`/apps/${appID}`, params),\n\n  /** Get a new app secret */\n  updateSecret: (appID: string): Promise<AppSecretResponse> => axiosInstance.post<unknown, AppSecretResponse>(`/apps/${appID}/secret`),\n\n  /**\n   * Get a new app session\n   * @param session_public_key: public key of ed25519 session keys\n   */\n  updateSafeSession: (appID: string, data: AppSafeSessionRequest): Promise<AppSessionResponse> =>\n    axiosInstance.post<unknown, AppSessionResponse>(`/safe/apps/${appID}/session`, data),\n\n  /**\n   * Register app to safe, the spend private key would be the same as the tip private key\n   * @param spend_public_key: hex public key of ed25519 tip/spend keys\n   * @param signature_base64: signature of the SHA256Hash of the app_id using ed25519 tip/spend private key\n   */\n  registerSafe: (appID: string, data: AppSafeRegistrationRequest): Promise<AppRegistrationResponse> =>\n    axiosInstance.post<unknown, AppRegistrationResponse>(`/safe/apps/${appID}/register`, data),\n\n  /**\n   * Add to your share list\n   * User can have up to 3 favorite apps\n   */\n  favorite: (appID: string): Promise<AppResponse[]> => axiosInstance.post<unknown, AppResponse[]>(`/apps/${appID}/favorite`),\n\n  /** Removing from your share list */\n  unfavorite: (appID: string): Promise<any> => axiosInstance.post<unknown, any>(`/apps/${appID}/unfavorite`),\n});\n\nexport const AppClient = buildClient(AppKeystoreClient);\n\nexport default AppClient;\n","import { AxiosInstance } from 'axios';\nimport { AssetResponse } from './types/asset';\nimport { SnapshotResponse } from './types/snapshot';\nimport { buildClient } from './utils/client';\n\n/**\n * Get personal information about asset.\n * Notes:\n * * Get /assets may not have a deposit address, if you want a deposit address,\n * * should request /assets/:asset_id first.\n * https://developers.mixin.one/docs/api/assets/assets\n */\nexport const AssetKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the specified asset of current user, the ASSETS:READ permission is required */\n  fetch: (assetID: string): Promise<AssetResponse> => axiosInstance.get<unknown, AssetResponse>(`/assets/${assetID}`),\n\n  /** Get the asset list of current user */\n  fetchList: (): Promise<AssetResponse[]> => axiosInstance.get<unknown, AssetResponse[]>('/assets'),\n\n  /** Get specific asset's snapshots of current user */\n  snapshots: (assetID: string): Promise<SnapshotResponse[]> => axiosInstance.get<unknown, SnapshotResponse[]>(`/assets/${assetID}/snapshots`),\n});\n\nexport const AssetClient = buildClient(AssetKeystoreClient);\n\nexport default AssetClient;\n","import axios, { AxiosInstance } from 'axios';\nimport { AttachmentResponse } from './types/attachment';\nimport { buildClient } from './utils/client';\n\nexport const AttachmentKeystoreClient = (axiosInstance: AxiosInstance) => {\n  const createAttachment = (): Promise<AttachmentResponse> => axiosInstance.post<unknown, AttachmentResponse>(`/attachments`);\n\n  const uploadAttachmentTo = (uploadURL: string, file: File): Promise<any> =>\n    axios.create()({\n      url: uploadURL,\n      method: 'PUT',\n      data: file,\n      headers: {\n        'x-amz-acl': 'public-read',\n        'Content-Type': 'application/octet-stream',\n      },\n      maxContentLength: 2147483648,\n    });\n\n  return {\n    /** Get a specific attachment by attachmentID */\n    fetch: (attachmentID: string): Promise<AttachmentResponse> => axiosInstance.get<unknown, AttachmentResponse>(`/attachments/${attachmentID}`),\n\n    /** Create a new attachment before upload it */\n    create: createAttachment,\n\n    /** Upload a attachment */\n    upload: async (file: File) => {\n      const { view_url, upload_url, attachment_id } = await createAttachment();\n      if (!upload_url) throw new Error('No upload URL');\n\n      await uploadAttachmentTo(upload_url, file);\n      return { view_url, attachment_id };\n    },\n  };\n};\n\nexport const AttachmentClient = buildClient(AttachmentKeystoreClient);\n\nexport default AttachmentClient;\n","import bs58 from 'bs58';\nimport { stringify, parse } from 'uuid';\nimport { MixAddress } from '../types';\nimport { newHash } from './uniq';\n\nexport const MainAddressPrefix = 'XIN';\nexport const MixAddressPrefix = 'MIX';\nexport const MixAddressVersion = 2;\n\nexport const getPublicFromMainnetAddress = (address: string) => {\n  try {\n    if (!address.startsWith(MainAddressPrefix)) return undefined;\n\n    const data = bs58.decode(address.slice(3));\n    if (data.length !== 68) return undefined;\n\n    const payload = data.subarray(0, data.length - 4);\n    const msg = Buffer.concat([Buffer.from(MainAddressPrefix), Buffer.from(payload)]);\n    const checksum = newHash(msg);\n    if (!checksum.subarray(0, 4).equals(data.subarray(64))) return undefined;\n    return Buffer.from(payload);\n  } catch {\n    return undefined;\n  }\n};\n\nexport const getMainnetAddressFromPublic = (pubKey: Buffer) => {\n  const msg = Buffer.concat([Buffer.from(MainAddressPrefix), pubKey]);\n  const checksum = newHash(msg);\n  const data = Buffer.concat([pubKey, checksum.subarray(0, 4)]);\n  return `${MainAddressPrefix}${bs58.encode(data)}`;\n};\n\nexport const parseMixAddress = (address: string): MixAddress | undefined => {\n  try {\n    if (!address.startsWith(MixAddressPrefix)) return undefined;\n\n    const data = bs58.decode(address.slice(3));\n    if (data.length < 3 + 16 + 4) {\n      return undefined;\n    }\n\n    const payload = data.subarray(0, data.length - 4);\n    const msg = Buffer.concat([Buffer.from(MixAddressPrefix), Buffer.from(payload)]);\n    const checksum = newHash(msg);\n    if (!checksum.subarray(0, 4).equals(Buffer.from(data.subarray(data.length - 4)))) return undefined;\n\n    const version = data.at(0);\n    const threshold = data.at(1);\n    const total = data.at(2);\n    if (version !== 2) return undefined;\n    if (!threshold || !total || threshold === 0 || threshold > total || total > 64) return undefined;\n\n    const memberData = payload.subarray(3);\n    const members: string[] = [];\n    if (memberData.length === total * 16) {\n      for (let i = 0; i < total; i++) {\n        const id = stringify(memberData, 16 * i);\n        members.push(id);\n      }\n      return {\n        members,\n        threshold,\n      };\n    }\n    if (memberData.length === total * 64) {\n      for (let i = 0; i < total; i++) {\n        const pub = memberData.subarray(64 * i, 64 * (i + 1));\n        const addr = getMainnetAddressFromPublic(Buffer.from(pub));\n        members.push(addr);\n      }\n      return {\n        members,\n        threshold,\n      };\n    }\n\n    return undefined;\n  } catch {\n    return undefined;\n  }\n};\n\nexport const buildMixAddress = (ma: MixAddress): string => {\n  if (ma.members.length > 255) {\n    throw new Error(`invalid members length: ${ma.members.length}`);\n  }\n  if (ma.threshold === 0 || ma.threshold > ma.members.length) {\n    throw new Error(`invalid threshold: ${ma.threshold}`);\n  }\n\n  const prefix = Buffer.concat([Buffer.from([MixAddressVersion]), Buffer.from([ma.threshold]), Buffer.from([ma.members.length])]);\n\n  let type = '';\n  const memberData: Buffer[] = [];\n  ma.members.forEach(addr => {\n    if (addr.startsWith(MainAddressPrefix)) {\n      if (!type) type = 'xin';\n      if (type !== 'xin') throw new Error(`inconsistent address type`);\n      const pub = getPublicFromMainnetAddress(addr);\n      if (!pub) throw new Error(`invalid mainnet address: ${addr}`);\n      memberData.push(pub);\n    } else {\n      if (!type) type = 'uuid';\n      if (type !== 'uuid') throw new Error(`inconsistent address type`);\n      const id = parse(addr);\n      if (!id) throw new Error(`invalid mainnet address: ${addr}`);\n      memberData.push(Buffer.from(Uint8Array.from(id)));\n    }\n  });\n\n  const msg = Buffer.concat([Buffer.from(MixAddressPrefix), prefix, ...memberData]);\n  const checksum = newHash(msg);\n  const data = Buffer.concat([prefix, ...memberData, checksum.subarray(0, 4)]);\n  return `${MixAddressPrefix}${bs58.encode(data)}`;\n};\n","import { Input, Output } from '../types';\nimport { magic } from './encoder';\nimport { formatUnits } from './amount';\n\nexport const bytesToInterger = (b: Buffer) => {\n  let x = 0;\n  for (let i = 0; i < b.byteLength; i++) {\n    const byte = b.at(i);\n    x *= 0x100;\n    if (byte) x += byte;\n  }\n  return x;\n};\n\nexport class Decoder {\n  buf: Buffer;\n\n  constructor(buf: Buffer) {\n    this.buf = buf;\n  }\n\n  subarray(start: number, end?: number) {\n    return this.buf.subarray(start, end);\n  }\n\n  read(offset: number) {\n    this.buf = this.buf.subarray(offset);\n  }\n\n  readByte() {\n    const value = this.buf.readUint8();\n    this.read(1);\n    return value;\n  }\n\n  readBytes() {\n    const len = this.readByte();\n    const value = this.buf.subarray(0, len).toString('hex');\n    this.read(len);\n    return value;\n  }\n\n  readInt() {\n    const value = this.buf.readUInt16BE();\n    this.read(2);\n    return value;\n  }\n\n  readUint32() {\n    const value = this.buf.readUInt32BE();\n    this.read(4);\n    return value;\n  }\n\n  readUInt64() {\n    const value = this.buf.readBigUInt64BE();\n    this.read(8);\n    return value;\n  }\n\n  readUUID() {\n    const value = this.buf.subarray(0, 16);\n    this.read(16);\n    return value;\n  }\n\n  readInteger() {\n    const len = this.readInt();\n    const value = this.buf.subarray(0, len);\n    this.read(len);\n    return bytesToInterger(value);\n  }\n\n  decodeInput() {\n    const hash = this.subarray(0, 32).toString('hex');\n    this.read(32);\n    const index = this.readInt();\n    const input: Input = {\n      hash,\n      index,\n    };\n\n    const lenGenesis = this.readInt();\n    if (lenGenesis > 0) {\n      input.genesis = this.buf.subarray(0, lenGenesis).toString('hex');\n      this.read(lenGenesis);\n    }\n\n    const depositPrefix = this.subarray(0, 2);\n    this.read(2);\n    if (depositPrefix.equals(magic)) {\n      const chain = this.subarray(0, 32).toString('hex');\n      this.read(32);\n      const asset = this.readBytes();\n      const transaction = this.readBytes();\n      const index = this.readUInt64();\n      const amount = this.readInteger();\n\n      input.deposit = {\n        chain,\n        asset,\n        transaction,\n        index,\n        amount,\n      };\n    }\n\n    const mintPrefix = this.subarray(0, 2);\n    this.read(2);\n    if (mintPrefix.equals(magic)) {\n      const group = this.readBytes();\n      const batch = this.readUInt64();\n      const amount = this.readInteger();\n\n      input.mint = {\n        group,\n        batch,\n        amount,\n      };\n    }\n\n    return input;\n  }\n\n  decodeOutput() {\n    const t = this.subarray(0, 2);\n    this.read(2);\n    if (t.at(0) !== 0) throw new Error(`invalid output type ${t.at(0)}`);\n    const type = t.at(1);\n    const amount = this.readInteger();\n\n    const lenKey = this.readInt();\n    const keys = [];\n    for (let i = 0; i < lenKey; i++) {\n      const key = this.subarray(0, 32).toString('hex');\n      this.read(32);\n      keys.push(key);\n    }\n    const mask = this.subarray(0, 32).toString('hex');\n    this.read(32);\n    const lenScript = this.readInt();\n    const script = this.buf.subarray(0, lenScript).toString('hex');\n    this.read(lenScript);\n\n    const output: Output = {\n      type,\n      amount: formatUnits(amount, 8).toString(),\n      keys,\n      mask,\n      script,\n    };\n\n    const prefix = this.subarray(0, 2);\n    this.read(2);\n    if (prefix.equals(magic)) {\n      const address = this.readBytes();\n      const tag = this.readBytes();\n      output.withdrawal = {\n        address,\n        tag,\n      };\n    }\n\n    return output;\n  }\n\n  decodeSignature() {\n    const len = this.readInt();\n    const sigs: Record<number, string> = {};\n    for (let i = 0; i < len; i++) {\n      const index = this.readInt();\n      const sig = this.buf.subarray(0, 64).toString('hex');\n      sigs[index] = sig;\n    }\n    return sigs;\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { MultisigTransaction, UtxoOutput } from '../types';\nimport { Encoder, magic } from './encoder';\n\nexport const TxVersion = 0x02;\n\nexport const getTotalBalanceFromOutputs = (outputs: UtxoOutput[]) => outputs.reduce((prev, cur) => prev.plus(BigNumber(cur.amount)), BigNumber('0'));\n\nexport const encodeScript = (threshold: number) => {\n  let s = threshold.toString(16);\n  if (s.length === 1) s = `0${s}`;\n  if (s.length > 2) throw new Error(`INVALID THRESHOLD ${threshold}`);\n\n  return `fffe${s}`;\n};\n\nexport const encodeTx = (tx: MultisigTransaction) => {\n  const enc = new Encoder(Buffer.from([]));\n\n  enc.write(magic);\n  enc.write(Buffer.from([0x00, tx.version]));\n  enc.write(Buffer.from(tx.asset, 'hex'));\n\n  enc.writeInt(tx.inputs.length);\n  tx.inputs.forEach(input => {\n    enc.encodeInput(input);\n  });\n\n  enc.writeInt(tx.outputs.length);\n  tx.outputs.forEach(output => {\n    enc.encodeOutput(output);\n  });\n\n  const extra = Buffer.from(tx.extra);\n  enc.writeInt(extra.byteLength);\n  enc.write(extra);\n\n  enc.writeInt(0);\n  enc.write(Buffer.from([]));\n\n  return enc.buf.toString('hex');\n};\n\n/**\n * Generate raw for multi-signature transaction.\n * The total amount of input utxos should be equal to the total amount of output utxos.\n * */\nexport const buildMultiSigsTransaction = (transaction: MultisigTransaction) => {\n  if (transaction.version !== TxVersion) throw new Error('Invalid Version!');\n\n  const tx = {\n    ...transaction,\n    outputs: transaction.outputs.filter(output => !!output.mask),\n  };\n  return encodeTx(tx);\n};\n","import forge from 'node-forge';\nimport { parse as UUIDParse, stringify } from 'uuid';\nimport type { CollectibleOutputsResponse, NFOMemo } from '../types';\nimport type { KeystoreClientReturnType } from '../mixin-client';\nimport { buildMultiSigsTransaction, encodeScript } from './multisigs';\nimport { Encoder, integerToBytes } from './encoder';\nimport { Decoder } from './decoder';\n\nconst Prefix = 'NFO';\nconst Version = 0x00;\n\nexport const DefaultChain = '43d61dcd-e413-450d-80b8-101d5e903357';\nexport const DefaultClass = '3c8c161a18ae2c8b14fda1216fff7da88c419b5d';\nexport const DefaultNftAssetId = '1700941284a95f31b25ec8c546008f208f88eee4419ccdcdbe6e3195e60128ca';\n\nexport function buildTokenId(collection_id: string, token: number): string {\n  const tokenStr = Buffer.from(integerToBytes(token)).toString('hex');\n  const msg = DefaultChain.replaceAll('-', '') + DefaultClass + collection_id.replaceAll('-', '') + tokenStr;\n  const md5 = forge.md.md5.create();\n  md5.update(Buffer.from(msg, 'hex').toString('binary'));\n  const bytes = Buffer.from(md5.digest().bytes(), 'binary');\n  bytes[6] = (bytes[6] & 0x0f) | 0x30;\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\n  return stringify(bytes);\n}\n\n/**\n * Content must be hex string without '0x'\n * */\nexport function buildCollectibleMemo(content: string, collection_id?: string, token_id?: number): string {\n  const encoder = new Encoder(Buffer.from(Prefix, 'utf8'));\n  encoder.write(Buffer.from([Version]));\n\n  if (collection_id && token_id) {\n    encoder.write(Buffer.from([1]));\n    encoder.writeUint64(BigInt(1));\n    encoder.writeUUID(DefaultChain);\n\n    encoder.writeSlice(Buffer.from(DefaultClass, 'hex'));\n    encoder.writeSlice(Buffer.from(UUIDParse(collection_id) as Buffer));\n    encoder.writeSlice(Buffer.from(integerToBytes(token_id)));\n  } else {\n    encoder.write(Buffer.from([0]));\n  }\n\n  encoder.writeSlice(Buffer.from(content, 'hex'));\n  return encoder.buf.toString('hex');\n}\n\nexport const decodeNfoMemo = (hexMemo: string) => {\n  const memo = Buffer.from(hexMemo, 'hex');\n  if (memo.byteLength < 4) throw Error(`Invalid NFO memo length: ${memo.byteLength}`);\n  const prefix = memo.subarray(0, 3).toString();\n  if (prefix !== Prefix) throw Error(`Invalid NFO memo prefix: ${prefix}`);\n  const version = memo.readUint8(3);\n  if (version !== Version) throw Error(`Invalid NFO memo version: ${version}`);\n\n  const nm: NFOMemo = {\n    prefix: Prefix,\n    version: Version,\n    extra: '',\n  };\n  const decoder = new Decoder(memo.subarray(4));\n  const hint = decoder.readByte();\n\n  if (hint === 1) {\n    nm.mask = Number(decoder.readUInt64());\n    if (nm.mask !== 1) throw Error(`Invalid NFO memo mask: ${nm.mask}`);\n\n    nm.chain = stringify(decoder.readUUID());\n    if (nm.chain !== DefaultChain) throw Error(`Invalid NFO memo chain: ${nm.chain}`);\n\n    nm.class = decoder.readBytes();\n    if (nm.class !== DefaultClass) throw Error(`Invalid NFO memo chain: ${nm.class}`);\n\n    const collection = Buffer.from(decoder.readBytes(), 'hex');\n    nm.collection = stringify(collection);\n\n    nm.token = parseInt(decoder.readBytes(), 16);\n  }\n\n  nm.extra = Buffer.from(decoder.readBytes(), 'hex').toString();\n  return nm;\n};\n\nexport const buildNfoTransferRequest = async (client: KeystoreClientReturnType, utxo: CollectibleOutputsResponse, receivers: string[], threshold: number, content = '') => {\n  const keys = await client.transfer.outputs([\n    {\n      receivers,\n      index: 0,\n    },\n  ]);\n\n  const raw = buildMultiSigsTransaction({\n    version: 2,\n    asset: DefaultNftAssetId,\n    inputs: [\n      {\n        hash: utxo.transaction_hash,\n        index: utxo.output_index,\n      },\n    ],\n    outputs: [\n      {\n        amount: '1',\n        mask: keys[0].mask,\n        keys: keys[0].keys,\n        script: encodeScript(threshold),\n      },\n    ],\n    extra: buildCollectibleMemo(content),\n  });\n  return client.collection.request('sign', raw);\n};\n","import { sha256Hash } from './uniq';\n\nconst TIPSequencerRegister = 'SEQUENCER:REGISTER:';\n\nexport const TIPBodyForSequencerRegister = (user_id: string, pubKey: string) => tipBody(`${TIPSequencerRegister}${user_id}${pubKey}`);\n\nexport const tipBody = (s: string) => sha256Hash(Buffer.from(s));\n","import forge from 'node-forge';\nimport qs from 'qs';\nimport { validate, v4 } from 'uuid';\nimport BigNumber from 'bignumber.js';\nimport { Input, Output, GhostKey, GhostKeyRequest, PaymentParams, SafeTransaction, SafeTransactionRecipient, SafeUtxoOutput } from '../types';\nimport { Encoder, magic } from './encoder';\nimport { Decoder } from './decoder';\nimport { base64RawURLEncode } from './base64';\nimport { TIPBodyForSequencerRegister } from './tip';\nimport { getPublicFromMainnetAddress, buildMixAddress, parseMixAddress } from './address';\nimport { encodeScript } from './multisigs';\nimport { blake3Hash, newHash, sha512Hash } from './uniq';\nimport { edwards25519 as ed } from './ed25519';\n\nexport const TxVersionHashSignature = 0x05;\nexport const OutputTypeScript = 0x00;\nexport const OutputTypeWithdrawalSubmit = 0xa1;\n\n/**\n * Build Payment Uri on https://mixin.one\n * Destination can be set with\n *   1. uuid: uuid of the Mixin user or bot\n *   2. mainnetAddress: Mixin mainnet address started with \"XIN\"\n *   3. mixAddress: address encoded with members and threshold and started with \"MIX\"\n *   4. members and threshold: multisigs members' uuid or mainnet address, and threshold\n */\nexport const buildMixinOneSafePaymentUri = (params: PaymentParams) => {\n  let address = '';\n  if (params.uuid && validate(params.uuid)) address = params.uuid;\n  else if (params.mainnetAddress && getPublicFromMainnetAddress(params.mainnetAddress)) address = params.mainnetAddress;\n  else if (params.mixAddress && parseMixAddress(params.mixAddress)) address = params.mixAddress;\n  else if (params.members && params.threshold) {\n    address = buildMixAddress({\n      members: params.members,\n      threshold: params.threshold,\n    });\n  } else throw new Error('fail to get payment destination address');\n\n  const baseUrl = `https://mixin.one/pay/${address}`;\n  const p = {\n    asset: params.asset,\n    amount: params.amount,\n    memo: params.memo,\n    trace: params.trace ?? v4(),\n    return_to: params.returnTo && encodeURIComponent(params.returnTo),\n  };\n  const query = qs.stringify(p);\n  return `${baseUrl}?${query}`;\n};\n\nexport const signSafeRegistration = (user_id: string, tipPin: string, privateKey: Buffer) => {\n  const public_key = forge.pki.ed25519.publicKeyFromPrivateKey({ privateKey }).toString('hex');\n\n  const hash = newHash(Buffer.from(user_id));\n  let signData = forge.pki.ed25519.sign({\n    message: hash,\n    privateKey,\n  });\n  const signature = base64RawURLEncode(signData);\n\n  const tipBody = TIPBodyForSequencerRegister(user_id, public_key);\n  signData = forge.pki.ed25519.sign({\n    message: tipBody,\n    privateKey: Buffer.from(tipPin, 'hex'),\n  });\n\n  return {\n    public_key,\n    signature,\n    pin_base64: signData.toString('hex'),\n  };\n};\n\nexport const deriveGhostPublicKey = (r: Buffer, A: Buffer, B: Buffer, index: number) => {\n  const x = ed.hashScalar(ed.keyMultPubPriv(A, r), index);\n  const p1 = ed.newPoint(B);\n  const p2 = ed.scalarBaseMultToPoint(x);\n  const p4 = p1.add(p2);\n  // @ts-ignore\n  return Buffer.from(p4.toRawBytes());\n};\n\nexport const getMainnetAddressGhostKey = (recipient: GhostKeyRequest, hexSeed = '') => {\n  if (recipient.receivers.length === 0) return undefined;\n  if (hexSeed && hexSeed.length !== 128) return undefined;\n\n  const publics = recipient.receivers.map(d => getPublicFromMainnetAddress(d));\n  if (!publics.every(p => !!p)) return undefined;\n\n  const seed = hexSeed ? Buffer.from(hexSeed, 'hex') : Buffer.from(forge.random.getBytesSync(64), 'binary');\n  const r = Buffer.from(ed.scalar.toBytes(ed.setUniformBytes(seed)));\n  const keys = publics.map(addressPubic => {\n    const spendKey = addressPubic!.subarray(0, 32);\n    const viewKey = addressPubic!.subarray(32, 64);\n    const k = deriveGhostPublicKey(r, viewKey, spendKey, recipient.index);\n    return k.toString('hex');\n  });\n  return {\n    mask: ed.publicFromPrivate(r).toString('hex'),\n    keys,\n  };\n};\n\nexport const buildSafeTransactionRecipient = (members: string[], threshold: number, amount: string): SafeTransactionRecipient => ({\n  members,\n  threshold,\n  amount,\n  mixAddress: buildMixAddress({ members, threshold }),\n});\n\nexport const getUnspentOutputsForRecipients = (outputs: SafeUtxoOutput[], rs: SafeTransactionRecipient[]) => {\n  const totalOutput = rs.reduce((prev, cur) => prev.plus(BigNumber(cur.amount)), BigNumber('0'));\n\n  let totalInput = BigNumber('0');\n  for (let i = 0; i < outputs.length; i++) {\n    const o = outputs[i];\n    if (o.state !== 'unspent') continue;\n    totalInput = totalInput.plus(BigNumber(o.amount));\n    if (totalInput.minus(totalOutput).isNegative()) continue;\n\n    return {\n      utxos: outputs.slice(0, i + 1),\n      change: totalInput.minus(totalOutput),\n    };\n  }\n  throw new Error('insufficient total input outputs');\n};\n\nexport const encodeSafeTransaction = (tx: SafeTransaction, sigs: Record<number, string>[] = []) => {\n  const enc = new Encoder(Buffer.from([]));\n\n  enc.write(magic);\n  enc.write(Buffer.from([0x00, tx.version]));\n  enc.write(Buffer.from(tx.asset, 'hex'));\n\n  enc.writeInt(tx.inputs.length);\n  tx.inputs.forEach(input => {\n    enc.encodeInput(input);\n  });\n\n  enc.writeInt(tx.outputs.length);\n  tx.outputs.forEach(output => {\n    enc.encodeOutput(output);\n  });\n\n  enc.writeInt(tx.references.length);\n  tx.references.forEach(r => {\n    enc.write(Buffer.from(r, 'hex'));\n  });\n\n  const extra = Buffer.from(tx.extra);\n  enc.writeUint32(extra.byteLength);\n  enc.write(extra);\n\n  enc.writeInt(sigs.length);\n  sigs.forEach(s => {\n    enc.encodeSignature(s);\n  });\n\n  return enc.buf.toString('hex');\n};\n\nexport const decodeSafeTransaction = (raw: string): SafeTransaction => {\n  const dec = new Decoder(Buffer.from(raw, 'hex'));\n\n  const prefix = dec.subarray(0, 2);\n  if (!prefix.equals(magic)) throw new Error('invalid magic');\n  dec.read(3);\n\n  const version = dec.readByte();\n  if (version !== TxVersionHashSignature) throw new Error('invalid version');\n\n  const asset = dec.subarray(0, 32).toString('hex');\n  dec.read(32);\n\n  const lenInput = dec.readInt();\n  const inputs = [];\n  for (let i = 0; i < lenInput; i++) {\n    inputs.push(dec.decodeInput());\n  }\n\n  const lenOutput = dec.readInt();\n  const outputs = [];\n  for (let i = 0; i < lenOutput; i++) {\n    outputs.push(dec.decodeOutput());\n  }\n\n  const lenRefs = dec.readInt();\n  const references = [];\n  for (let i = 0; i < lenRefs; i++) {\n    const hash = dec.subarray(0, 32).toString('hex');\n    dec.read(32);\n    references.push(hash);\n  }\n\n  const lenExtra = dec.readUint32();\n  const extra = dec.subarray(0, lenExtra).toString();\n  dec.read(lenExtra);\n\n  const lenSigs = dec.readInt();\n  const signatureMap = [];\n  for (let i = 0; i < lenSigs; i++) {\n    signatureMap.push(dec.decodeSignature());\n  }\n\n  return {\n    version,\n    asset,\n    extra,\n    inputs,\n    outputs,\n    references,\n    signatureMap,\n  };\n};\n\nexport const buildSafeTransaction = (utxos: SafeUtxoOutput[], rs: SafeTransactionRecipient[], gs: GhostKey[], extra: string, references: string[] = []) => {\n  if (utxos.length === 0) throw new Error('empty inputs');\n  if (Buffer.from(extra).byteLength > 512) throw new Error('extra data is too long');\n\n  let asset = '';\n  const inputs: Input[] = [];\n  utxos.forEach(o => {\n    if (!asset) asset = o.asset;\n    if (o.asset !== asset) throw new Error('inconsistent asset in outputs');\n    inputs.push({ hash: o.transaction_hash, index: o.output_index });\n  });\n\n  const outputs: Output[] = [];\n  for (let i = 0; i < rs.length; i++) {\n    const r = rs[i];\n    if ('destination' in r) {\n      outputs.push({\n        type: OutputTypeWithdrawalSubmit,\n        amount: r.amount,\n        withdrawal: {\n          address: r.destination,\n          tag: r.tag ?? '',\n        },\n        keys: [],\n      });\n      continue;\n    }\n\n    outputs.push({\n      type: OutputTypeScript,\n      amount: r.amount,\n      keys: gs[i].keys,\n      mask: gs[i].mask,\n      script: encodeScript(r.threshold),\n    });\n  }\n\n  return {\n    version: TxVersionHashSignature,\n    asset,\n    extra,\n    inputs,\n    outputs,\n    references,\n  };\n};\n\nexport const signSafeTransaction = (tx: SafeTransaction, views: string[], privateKey: string, index = 0) => {\n  const raw = encodeSafeTransaction(tx);\n  const msg = blake3Hash(Buffer.from(raw, 'hex'));\n\n  const spenty = sha512Hash(Buffer.from(privateKey.slice(0, 64), 'hex'));\n  const y = ed.setBytesWithClamping(spenty.subarray(0, 32));\n\n  const signaturesMap = [];\n  for (let i = 0; i < tx.inputs.length; i++) {\n    const viewBuffer = Buffer.from(views[i], 'hex');\n    const x = ed.setCanonicalBytes(viewBuffer);\n    const t = ed.scalar.add(x, y);\n    const key = Buffer.from(ed.scalar.toBytes(t));\n    const sig = ed.sign(msg, key);\n    const sigs: Record<number, string> = {};\n    sigs[index] = sig.toString('hex');\n    signaturesMap.push(sigs);\n  }\n\n  return encodeSafeTransaction(tx, signaturesMap);\n};\n","import WebSocket from 'ws';\nimport { gzip, ungzip } from 'pako';\nimport { MessageView, BlazeMessage, BlazeOptions } from '../types';\n\nexport const decodeMessage = (data: Uint8Array, options: BlazeOptions): MessageView => {\n  const t = ungzip(data, { to: 'string' });\n  const msgObj = JSON.parse(t);\n\n  if (options.parse && msgObj.data && msgObj.data.data) {\n    msgObj.data.data = Buffer.from(msgObj.data.data, 'base64').toString();\n\n    try {\n      msgObj.data.data = JSON.parse(msgObj.data.data);\n    } catch (e) {\n      // ignore error\n    }\n  }\n\n  return msgObj.data;\n};\n\nexport const sendRaw = (ws: WebSocket, message: BlazeMessage): Promise<boolean> =>\n  new Promise(resolve => {\n    const buffer = Buffer.from(JSON.stringify(message), 'utf-8');\n    const zipped = gzip(buffer);\n    if (ws.readyState === WebSocket.OPEN) {\n      const timer = setTimeout(() => {\n        resolve(false);\n      }, 5000);\n      const cb = () => {\n        clearTimeout(timer);\n        resolve(true);\n      };\n      ws.send(zipped, cb);\n      return;\n    }\n    resolve(false);\n  });\n","import WebSocket from 'ws';\nimport { v4 as uuid } from 'uuid';\nimport Keystore from './types/keystore';\nimport { BlazeOptions, BlazeHandler } from './types';\nimport { websocket } from './ws';\nimport { sendRaw } from './utils';\n\nconst wsHostURL = ['wss://mixin-blaze.zeromesh.net', 'wss://blaze.mixin.one/'];\n\nexport const BlazeKeystoreClient = (keystore: Keystore | undefined, wsOptions: BlazeOptions | undefined) => {\n  let url = wsHostURL[0];\n  let ws: WebSocket | undefined;\n  let pingTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  const terminate = () => {\n    clearTimeout(Number(pingTimeout));\n    if (!ws) return;\n    ws.terminate();\n    ws = undefined;\n  };\n\n  const heartbeat = () => {\n    clearTimeout(Number(pingTimeout));\n    pingTimeout = setTimeout(terminate, 1000 * 30);\n  };\n\n  const loopBlaze = (h: BlazeHandler) => {\n    if (ws) return;\n    ws = websocket(keystore, url, h, wsOptions);\n    heartbeat();\n\n    ws.on('ping', heartbeat);\n\n    ws.onopen = () => {\n      heartbeat();\n      if (ws) sendRaw(ws, { id: uuid(), action: 'LIST_PENDING_MESSAGES' });\n    };\n\n    ws.onclose = () => {\n      terminate();\n      loopBlaze(h);\n    };\n\n    ws.onerror = e => {\n      if (e.message !== 'Opening handshake has timed out') return;\n      url = url === wsHostURL[0] ? wsHostURL[1] : wsHostURL[0];\n      terminate();\n    };\n  };\n\n  return {\n    loop: (h: BlazeHandler) => {\n      if (ws) throw new Error('Blaze is already running');\n      if (!h.onMessage) throw new Error('OnMessage not set');\n      loopBlaze(h);\n    },\n    stopLoop: () => {\n      terminate();\n    },\n    getWebSocket: () => ws,\n  };\n};\n\nexport const BlazeClient = (keystore: Keystore, wsOptions?: BlazeOptions) => ({ blaze: BlazeKeystoreClient(keystore, wsOptions) });\n\nexport default BlazeClient;\n","import WebSocket from 'ws';\nimport { v4 as uuid } from 'uuid';\nimport Keystore from './types/keystore';\nimport { BlazeHandler, BlazeOptions } from './types';\nimport { signAccessToken, decodeMessage, sendRaw } from './utils';\n\nexport function websocket(\n  keystore: Keystore | undefined,\n  url: string,\n  handler: BlazeHandler,\n  option: BlazeOptions = {\n    parse: false,\n    syncAck: false,\n  },\n): WebSocket {\n  const jwtToken = signAccessToken('GET', '/', '', uuid(), keystore) || '';\n  const headers = {\n    Authorization: `Bearer ${jwtToken}`,\n  };\n  const ws = new WebSocket(url, 'Mixin-Blaze-1', {\n    headers,\n    handshakeTimeout: 3000,\n  });\n\n  ws.onmessage = async event => {\n    const msg = decodeMessage(event.data as Uint8Array, option);\n    if (!msg) return;\n\n    if (msg.source === 'ACKNOWLEDGE_MESSAGE_RECEIPT' && handler.onAckReceipt) await handler.onAckReceipt(msg);\n    else if (msg.category === 'SYSTEM_CONVERSATION' && handler.onConversation) await handler.onConversation(msg);\n    else if (msg.category === 'SYSTEM_ACCOUNT_SNAPSHOT' && handler.onTransfer) await handler.onTransfer(msg);\n    else await handler.onMessage(msg);\n\n    if (option.syncAck) {\n      const message = {\n        id: uuid(),\n        action: 'ACKNOWLEDGE_MESSAGE_RECEIPT',\n        params: { message_id: msg.message_id, status: 'READ' },\n      };\n      await sendRaw(ws, message);\n    }\n  };\n\n  return ws;\n}\n","import { AxiosInstance } from 'axios';\nimport { CircleResponse, CircleRequest, CircleConversationResponse } from './types/circle';\nimport { buildClient } from './utils/client';\n\n/**\n * Circle is used to classify conversations\n * User can have no more than 64 circles\n * Docs: https://developers.mixin.one/docs/api/circles/list\n */\nexport const CircleKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the details of a certain circle */\n  fetch: (circleID: string): Promise<CircleResponse> => axiosInstance.get<unknown, CircleResponse>(`/circles/${circleID}`),\n\n  /** Get all circles of a user */\n  fetchList: (): Promise<CircleResponse[]> => axiosInstance.get<unknown, CircleResponse[]>('/circles'),\n\n  /** Get all the conversations in a circle of a user */\n  conversations: (circleID: string, params: CircleRequest): Promise<CircleConversationResponse[]> =>\n    axiosInstance.get<unknown, CircleConversationResponse[]>(`/circles/${circleID}/conversations`, { params }),\n\n  /** Create a circle */\n  create: (name: string): Promise<CircleResponse> => axiosInstance.post<unknown, CircleResponse>('/circles', { name }),\n\n  /** Modify the circle name */\n  update: (circleID: string, name: string): Promise<CircleResponse> => axiosInstance.post<unknown, CircleResponse>(`/circles/${circleID}`, { name }),\n\n  /** Delete a circle */\n  delete: (circleID: string): Promise<any> => axiosInstance.post<unknown, any>(`/circles/${circleID}/delete`),\n\n  /** Add the user to  a circle */\n  addUser: (userID: string, circleID: string): Promise<CircleResponse[]> => axiosInstance.post<unknown, CircleResponse[]>(`/users/${userID}/circles`, { circleID, action: 'ADD' }),\n\n  /** Remove the user from a circle */\n  removeUser: (userID: string, circleID: string): Promise<CircleResponse[]> =>\n    axiosInstance.post<unknown, CircleResponse[]>(`/users/${userID}/circles`, { circleID, action: 'REMOVE' }),\n\n  /** Add the group from a certain circle */\n  addConversation: (conversationID: string, circleID: string): Promise<CircleResponse[]> =>\n    axiosInstance.post<unknown, CircleResponse[]>(`/conversations/${conversationID}/circles`, { circleID, action: 'ADD' }),\n\n  /** Remove the group from a certain circle */\n  removeConversation: (conversation_id: string, circleID: string): Promise<CircleResponse[]> =>\n    axiosInstance.post<unknown, CircleResponse[]>(`/conversations/${conversation_id}/circles`, { circleID, action: 'REMOVE' }),\n});\n\nexport const CircleClient = buildClient(CircleKeystoreClient);\n\nexport default CircleClient;\n","import { AxiosInstance } from 'axios';\nimport { CodeResponse } from './types/code';\nimport { buildClient } from './utils/client';\n\n/**\n * Some information in Mixin is non-public, through codes/:id you can share it.\n * It also facilitates privacy protection\n */\nexport const CodeKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  fetch: (codeID: string): Promise<CodeResponse> => axiosInstance.get<unknown, CodeResponse>(`/codes/${codeID}`),\n});\n\nexport const CodeClient = buildClient(CodeKeystoreClient);\n\nexport default CodeClient;\n","import type { AxiosInstance } from 'axios';\nimport type Keystore from './types/keystore';\nimport type { MultisigInitAction } from './types/multisig';\nimport type {\n  CollectibleRequestAction,\n  CollectibleResponse,\n  CollectionResponse,\n  CollectibleOutputsRequest,\n  CollectibleOutputsResponse,\n  CollectibleTransactionResponse,\n} from './types/collectible';\nimport { hashMembers, signEd25519PIN, buildClient } from './utils';\n\nexport const MintMinimumCost = '0.001';\n\nexport const GroupMembers = [\n  '4b188942-9fb0-4b99-b4be-e741a06d1ebf',\n  'dd655520-c919-4349-822f-af92fabdbdf4',\n  '047061e6-496d-4c35-b06b-b0424a8a400d',\n  'acf65344-c778-41ee-bacb-eb546bacfb9f',\n  'a51006d0-146b-4b32-a2ce-7defbf0d7735',\n  'cf4abd9c-2cfa-4b5a-b1bd-e2b61a83fabd',\n  '50115496-7247-4e2c-857b-ec8680756bee',\n];\n\nexport const GroupThreshold = 5;\n\n/**\n * Users can use those APIs to manage their NFTs\n * Note:\n * * Before transferring a collectible, user should create a request first.\n * * only unsigned request can be canceled.\n * * only uncompleted sign transaction can be unlocked.\n * Docs: https://developers.mixin.one/docs/api/collectibles/request\n */\nexport const CollectibleKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const manageRequest = (pin: string, requestID: string, action: CollectibleRequestAction): Promise<CollectibleTransactionResponse> => {\n    const encrypted = signEd25519PIN(pin, keystore);\n    return axiosInstance.post<unknown, CollectibleTransactionResponse>(`/collectibles/requests/${requestID}/${action}`, { pin: encrypted });\n  };\n\n  const transfer = (action: MultisigInitAction, raw: string): Promise<CollectibleTransactionResponse> =>\n    axiosInstance.post<unknown, CollectibleTransactionResponse>('/collectibles/requests', { action, raw });\n\n  return {\n    /** Get the information of the collectible */\n    fetch: (tokenID: string): Promise<CollectibleResponse> => axiosInstance.get<unknown, CollectibleResponse>(`/collectibles/tokens/${tokenID}`),\n\n    /** Get the information of the collectible collection */\n    fetchCollection: (collectionID: string): Promise<CollectionResponse> => axiosInstance.get<unknown, CollectionResponse>(`/collectibles/collections/${collectionID}`),\n\n    /** Get collectibles outputs */\n    outputs: (params: CollectibleOutputsRequest): Promise<CollectibleOutputsResponse[]> => {\n      const hashedParams = {\n        ...params,\n        members: hashMembers(params.members),\n      };\n      return axiosInstance.get<unknown, CollectibleOutputsResponse[]>('/collectibles/outputs', { params: hashedParams });\n    },\n\n    /** @deprecated Use transfer() instead */\n    request: transfer,\n\n    /** Create a collectibles transfer request */\n    transfer,\n\n    /** Initiate or participate in signing */\n    sign: (pin: string, requestID: string) => manageRequest(pin, requestID, 'sign'),\n\n    /** Cancel my signature */\n    cancel: (pin: string, requestID: string) => manageRequest(pin, requestID, 'cancel'),\n\n    /** Cancel collectibles */\n    unlock: (pin: string, requestID: string) => manageRequest(pin, requestID, 'unlock'),\n  };\n};\n\nexport const CollectibleClient = buildClient(CollectibleKeystoreClient);\n\nexport default CollectibleClient;\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { ConversationRequest, ConversationResponse, ConversationAction, ParticipantRequest } from './types/conversation';\nimport { uniqueConversationID } from './utils/uniq';\nimport { buildClient } from './utils/client';\n\n/**\n * Create and manage a conversation\n * Notes:\n * * only owner and admin can add or remove participants, and rotate conversation code\n * * only owner can change the role of participants\n * * only owner and admin can setup disappear\n * * for group conversation, creator will be the owner and can't be changed.\n * Docs: https://developers.mixin.one/docs/api/conversations/read\n */\nexport const ConversationKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const createConversation = (params: ConversationRequest): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>('/conversations', params);\n\n  const managerConversation = (conversationID: string, action: ConversationAction, participant: ParticipantRequest[]): Promise<ConversationResponse> =>\n    axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/participants/${action}`, participant);\n\n  const createContactConversation = (userID: string): Promise<ConversationResponse> => {\n    if (!keystore) throw new Error('No Keystore Provided');\n    return createConversation({\n      category: 'CONTACT',\n      conversation_id: uniqueConversationID(keystore.app_id, userID),\n      participants: [{ user_id: userID }],\n    });\n  };\n\n  const muteConversation = (conversationID: string, duration: number): Promise<ConversationResponse> =>\n    axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/mute`, { duration });\n\n  return {\n    /** Get specific conversation information by conversationID */\n    fetch: (conversationID: string): Promise<ConversationResponse> => axiosInstance.get<unknown, ConversationResponse>(`/conversations/${conversationID}`),\n\n    /**\n     * Ensure the conversation is created\n     * when creating a new group or having a conversation with a user\n     * for the first time.\n     */\n    create: createConversation,\n\n    /** Create a conversation with a user for the first time */\n    createContact: createContactConversation,\n\n    /** Create a new group for the first time */\n    createGroup: (conversationID: string, name: string, participant: ParticipantRequest[]) =>\n      createConversation({\n        category: 'GROUP',\n        conversation_id: conversationID,\n        name,\n        participants: participant,\n      }),\n\n    /** Join a group by codeID */\n    joinGroup: (codeID: string): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${codeID}/join`),\n\n    /** Exit a group */\n    exitGroup: (conversationID: string): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/exit`),\n\n    /** Add/remove other participants or add/remove admin in a group */\n    updateParticipants: managerConversation,\n\n    /** Add users, if you are the owner or admin of this group conversation */\n    addParticipants: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'ADD',\n        userIDs.map(userID => ({ user_id: userID })),\n      ),\n\n    /** Remove users, if you are the owner or admin of this group conversation */\n    removeParticipants: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'REMOVE',\n        userIDs.map(userID => ({ user_id: userID })),\n      ),\n\n    /** Set admin privileges for a user, group owners Only */\n    setAdmin: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'ROLE',\n        userIDs.map(userID => ({ user_id: userID, role: 'ADMIN' })),\n      ),\n\n    /** Remove admin privileges for a user, group owners Only */\n    revokeAdmin: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'ROLE',\n        userIDs.map(userID => ({ user_id: userID, role: '' })),\n      ),\n\n    /** Reset invitation link and codeId */\n    resetGroupCode: (conversationID: string): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/rotate`),\n\n    /** Update a group's title and announcement by conversationID */\n    updateGroupInfo: (conversationID: string, params: Pick<ConversationRequest, 'name' | 'announcement'>): Promise<ConversationResponse> =>\n      axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}`, params),\n\n    /** Mute contact for <duration> seconds */\n    mute: (conversationID: string, duration: number) => muteConversation(conversationID, duration),\n\n    /** Unmute contact */\n    unmute: (conversationID: string) => muteConversation(conversationID, 0),\n\n    /** Set the disappearing message expiration duration for group */\n    disappearDuration: (conversationID: string, duration: number) => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/disappear`, { duration }),\n  };\n};\n\nexport const ConversationClient = buildClient(ConversationKeystoreClient);\n\nexport default ConversationClient;\n","import { AxiosInstance } from 'axios';\nimport { DepositRequest, ProxyRequest } from './types/external';\nimport { CheckAddressRequest, CheckAddressResponse, ExchangeRateResponse, ExternalTransactionResponse } from './types/network';\nimport { buildClient } from './utils/client';\n\nexport const ExternalKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /**\n   * Get the pending deposits\n   * Which confirmations is less then threshold\n   */\n  deposits: (params: DepositRequest): Promise<ExternalTransactionResponse[]> => axiosInstance.get<unknown, ExternalTransactionResponse[]>('/external/transactions', { params }),\n\n  /**\n   * Check if an address belongs to Mixin\n   */\n  checkAddress: (params: CheckAddressRequest): Promise<CheckAddressResponse> => axiosInstance.get<unknown, CheckAddressResponse>(`/external/addresses/check`, { params }),\n\n  /**\n   * GET the list of all fiat exchange rates based on US Dollar\n   */\n  exchangeRates: (): Promise<ExchangeRateResponse[]> => axiosInstance.get<unknown, ExchangeRateResponse[]>('/external/fiats'),\n\n  /**\n   * Submit a raw transaction to a random mainnet node\n   *   {\n   *     method: 'sendrawtransaction',\n   *     params: array of transaction hash\n   *   }\n   * */\n  proxy: (params: ProxyRequest): Promise<any> => axiosInstance.post<unknown, any>('/external/proxy', params),\n});\n\nexport const ExternalClient = buildClient(ExternalKeystoreClient);\n\nexport default ExternalClient;\n","import { AxiosInstance } from 'axios';\nimport { v4 as uuid } from 'uuid';\nimport Keystore from './types/keystore';\nimport {\n  AcknowledgementRequest,\n  AcknowledgementResponse,\n  MessageCategory,\n  MessageRequest,\n  StickerMessageRequest,\n  ImageMessageRequest,\n  AudioMessageRequest,\n  VideoMessageRequest,\n  ContactMessageRequest,\n  AppCardMessageRequest,\n  FileMessageRequest,\n  LiveMessageRequest,\n  LocationMessageRequest,\n  AppButtonMessageRequest,\n  TransferMessageRequest,\n  RecallMessageRequest,\n} from './types/message';\nimport { uniqueConversationID, base64RawURLEncode, buildClient } from './utils';\n\n/**\n * Methods to send messages\n * Note:\n * * To receive a list of messages from Mixin message service, you need to setup a websocket connection.\n *   After receiving the message via WebSocket, you need to acknowledge the message to Mixin message service,\n *   otherwise it will keep pushing the message.\n */\nexport const MessageKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const send = (message: MessageRequest) => axiosInstance.post<unknown, any>('/messages', [message]);\n\n  const sendMsg = async (recipientID: string, category: MessageCategory, data: any): Promise<MessageRequest> => {\n    if (!keystore) throw new Error('No Keystore Provided');\n    if (typeof data === 'object') data = JSON.stringify(data);\n\n    const messageRequest = {\n      category,\n      recipient_id: recipientID,\n      conversation_id: uniqueConversationID(keystore.app_id, recipientID),\n      message_id: uuid(),\n      data: base64RawURLEncode(Buffer.from(data)),\n    };\n    await send(messageRequest);\n    return messageRequest;\n  };\n\n  return {\n    /** Send the status of single message in bulk to Mixin Server */\n    sendAcknowledgement: (message: AcknowledgementRequest): Promise<AcknowledgementResponse[]> =>\n      axiosInstance.post<unknown, AcknowledgementResponse[]>('/acknowledgements', [message]),\n\n    /** Send the status of messages in bulk to Mixin Server */\n    sendAcknowledges: (messages: AcknowledgementRequest[]): Promise<AcknowledgementResponse[]> =>\n      axiosInstance.post<unknown, AcknowledgementResponse[]>('/acknowledgements', messages),\n\n    /** Send one message */\n    sendOne: send,\n\n    /**\n     * Send messages in bulk\n     * A maximum of 100 messages can be sent in batch each time, and the message body cannot exceed 128Kb\n     */\n    sendBatch: (messages: MessageRequest[]) => axiosInstance.post<unknown, any>('/messages', messages),\n\n    /** send one kind of message */\n    sendMsg,\n\n    sendText: (userID: string, text: string): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_TEXT', text),\n\n    sendSticker: (userID: string, sticker: StickerMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_STICKER', sticker),\n\n    sendImage: (userID: string, image: ImageMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_IMAGE', image),\n\n    sendAudio: (userID: string, audio: AudioMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_AUDIO', audio),\n\n    sendVideo: (userID: string, video: VideoMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_VIDEO', video),\n\n    sendContact: (userID: string, contact: ContactMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_CONTACT', contact),\n\n    sendAppCard: (userID: string, appCard: AppCardMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'APP_CARD', appCard),\n\n    sendFile: (userID: string, file: FileMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_DATA', file),\n\n    sendLive: (userID: string, live: LiveMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_LIVE', live),\n\n    sendLocation: (userID: string, location: LocationMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_LOCATION', location),\n\n    sendPost: (userID: string, text: string): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_POST', text),\n\n    sendAppButton: (userID: string, appButton: AppButtonMessageRequest[]): Promise<MessageRequest> => sendMsg(userID, 'APP_BUTTON_GROUP', appButton),\n\n    sendTransfer: (userID: string, transfer: TransferMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'SYSTEM_ACCOUNT_SNAPSHOT', transfer),\n\n    sendRecall: (userID: string, message: RecallMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'MESSAGE_RECALL', message),\n  };\n};\n\nexport const MessageClient = buildClient(MessageKeystoreClient);\n\nexport default MessageClient;\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { MultisigAction, MultisigInitAction, MultisigRequest, MultisigUtxoResponse, MultisigRequestResponse, SafeMultisigsResponse, TransactionRequest } from './types';\nimport { signEd25519PIN } from './utils/pin';\nimport { hashMembers } from './utils/uniq';\nimport { buildClient } from './utils/client';\n\n/**\n * Users can use those APIs to manage their multisig outputs\n * Note:\n * * Before transferring tokens, user should create a request first.\n * * only unsigned request can be canceled.\n * * only uncompleted sign transaction can be unlocked.\n * Docs: https://developers.mixin.one/docs/api/multisigs/request\n */\nexport const MultisigKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const initMultisig = (pin: string, requestID: string, action: MultisigAction): Promise<MultisigRequestResponse> => {\n    const encrypted = signEd25519PIN(pin, keystore);\n    return axiosInstance.post<unknown, MultisigRequestResponse>(`/multisigs/requests/${requestID}/${action}`, { pin: encrypted });\n  };\n\n  return {\n    /** Get signature outputs, if an account participates in it */\n    outputs: (params: MultisigRequest): Promise<MultisigUtxoResponse[]> => {\n      const { members, threshold } = params;\n      if (members.length === 0 || threshold < 1 || threshold > members.length) return Promise.reject(new Error('Invalid threshold or members'));\n\n      const hashedParams = {\n        ...params,\n        members: hashMembers(members),\n      };\n      return axiosInstance.get<unknown, MultisigUtxoResponse[]>(`/multisigs/outputs`, { params: hashedParams });\n    },\n\n    /** Generate a multi-signature request to obtain request_id */\n    create: (action: MultisigInitAction, raw: string): Promise<MultisigRequestResponse> =>\n      axiosInstance.post<unknown, MultisigRequestResponse>(`/multisigs/requests`, { action, raw }),\n\n    /** Initiate or participate in signing */\n    sign: (pin: string, requestID: string): Promise<MultisigRequestResponse> => initMultisig(pin, requestID, 'sign'),\n\n    /** Cancel my signature before the multisig finish */\n    unlock: (pin: string, requestID: string): Promise<MultisigRequestResponse> => initMultisig(pin, requestID, 'unlock'),\n\n    /** Cancel my multisig request */\n    cancel: (pin: string, requestID: string): Promise<MultisigRequestResponse> => initMultisig(pin, requestID, 'cancel'),\n\n    createSafeMultisigs: (params: TransactionRequest[]): Promise<SafeMultisigsResponse[]> => axiosInstance.post<unknown, SafeMultisigsResponse[]>('/safe/multisigs', params),\n\n    fetchSafeMultisigs: (id: string): Promise<SafeMultisigsResponse> => axiosInstance.get<unknown, SafeMultisigsResponse>(`/safe/multisigs/${id}`),\n\n    signSafeMultisigs: (id: string, raw: string): Promise<SafeMultisigsResponse> => axiosInstance.post<unknown, SafeMultisigsResponse>(`/safe/multisigs/${id}/sign`, { raw }),\n\n    unlockSafeMultisigs: (id: string): Promise<SafeMultisigsResponse> => axiosInstance.post<unknown, SafeMultisigsResponse>(`/safe/multisigs/${id}/unlock`),\n  };\n};\n\nexport const MultisigClient = buildClient(MultisigKeystoreClient);\n\nexport default MultisigClient;\n","import { AxiosInstance } from 'axios';\nimport { AssetResponse } from './types/asset';\nimport { NetworkSnapshotRequest, NetworkInfoResponse, NetworkChainResponse, NetworkAssetResponse, NetworkPriceResponse, NetworkSnapshotResponse } from './types/network';\nimport { buildClient } from './utils/client';\n\n/**\n * Public methods that need no permission\n * Docs: https://developers.mixin.one/docs/api/transfer/snapshots\n */\nexport const NetworkBaseClient = (axiosInstance: AxiosInstance) => ({\n  /** Get network info */\n  info: (): Promise<NetworkInfoResponse> => axiosInstance.get<unknown, NetworkInfoResponse>('/network'),\n\n  /** Get the list of all public chains supported by Mixin */\n  chains: (): Promise<NetworkChainResponse[]> => axiosInstance.get<unknown, NetworkChainResponse[]>('/network/chains'),\n\n  /** Get information of a chain */\n  fetchChain: (chainID: string): Promise<NetworkChainResponse> => axiosInstance.get<unknown, NetworkChainResponse>(`/network/chains/${chainID}`),\n\n  /** Get public information of an asset */\n  fetchAsset: (assetID: string): Promise<NetworkAssetResponse> => axiosInstance.get<unknown, NetworkAssetResponse>(`/network/assets/${assetID}`),\n\n  /**\n   * Get the list of the top 100 assets on the entire network\n   * kind parameter is used to specify the top assets, for NORMAL value will not swap lp tokens\n   */\n  topAssets: (kind = 'ALL'): Promise<AssetResponse[]> => {\n    const params = { kind };\n    return axiosInstance.get<unknown, AssetResponse[]>('/network/assets/top', { params });\n  },\n\n  /**\n   * Search for popular assets by symbol or name\n   * This API only returns assets with icons or prices.\n   */\n  searchAssets: (keyword: string, kind = 'ALL'): Promise<AssetResponse[]> => {\n    const params = { kind };\n    return axiosInstance.get<unknown, AssetResponse[]>(`/network/assets/search/${keyword}`, { params });\n  },\n\n  /**\n   * Get the historical price of a given asset\n   * If no ticker found, price_usd and price_usd will return 0\n   */\n  historicalPrice: (assetID: string, offset?: string): Promise<NetworkPriceResponse> => {\n    const params = {\n      asset: assetID,\n      offset,\n    };\n    return axiosInstance.get<unknown, NetworkPriceResponse>(`/network/ticker`, { params });\n  },\n\n  /** Get public information of specific snapshot by snapshot_id */\n  snapshot: (snapshotID: string): Promise<NetworkSnapshotResponse> => axiosInstance.get<unknown, NetworkSnapshotResponse>(`/network/snapshots/${snapshotID}`),\n\n  /** Get public information of snapshot records, which including transfers, deposits, withdrawals, etc */\n  snapshots: (inputParams: NetworkSnapshotRequest): Promise<NetworkSnapshotResponse[]> => {\n    const params = {\n      ...inputParams,\n      order: inputParams.order || 'DESC',\n    };\n    return axiosInstance.get<unknown, NetworkSnapshotResponse[]>(`/network/snapshots`, { params });\n  },\n});\n\nexport const NetworkClient = buildClient(NetworkBaseClient);\n\nexport default NetworkClient;\n","import { AxiosInstance } from 'axios';\nimport { AccessTokenRequest, AccessTokenResponse, AuthorizationResponse, AuthorizeRequest } from './types/oauth';\nimport { buildClient } from './utils/client';\n\n/**\n * Method to get user access code\n * To access some information of Mixin Messenger users, the developer needs to apply for authorization from the user\n * After that, the page will automatically jump to the application's OAuth URL, accompanied by the authorization code\n * Detail: https://developers.mixin.one/docs/api/oauth/oauth\n */\nexport const OAuthBaseClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the access code based on authorization code */\n  getToken: (data: AccessTokenRequest) => axiosInstance.post<unknown, AccessTokenResponse>('/oauth/token', data),\n\n  authorize: (data: AuthorizeRequest) => axiosInstance.post<unknown, AuthorizationResponse>('/oauth/authorize', data),\n\n  authorizations: (appId?: string) => axiosInstance.get<unknown, AuthorizationResponse[]>('/authorizations', { params: { app: appId } }),\n\n  revokeAuthorize: (clientId: string) => axiosInstance.post<unknown, void>('/oauth/cancel', { client_id: clientId }),\n});\n\nexport const OAuthClient = buildClient(OAuthBaseClient);\n\nexport default OAuthClient;\n","import { AxiosInstance } from 'axios';\nimport { buildClient } from './utils/client';\nimport { PaymentRequestResponse, RawTransactionRequest, TransferRequest } from './types';\n\nexport const PaymentBaseClient = (axiosInstance: AxiosInstance) => {\n  const payment = (params: TransferRequest | RawTransactionRequest) => axiosInstance.post<unknown, PaymentRequestResponse>('/payments', params);\n  return {\n    /** @deprecated Use payment() instead */\n    request: payment,\n\n    // Generate code id for transaction/transfer or verify payments by trace id\n    payment,\n  };\n};\n\nexport const PaymentClient = buildClient(PaymentBaseClient);\n\nexport default PaymentClient;\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { AuthenticationUserResponse } from './types/user';\nimport { buildClient } from './utils/client';\nimport { signTipBody, getNanoTime, getTipPinUpdateMsg, getVerifyPinTipBody, signEd25519PIN } from './utils/pin';\n\n/**\n * Methods to verify or update pin with keystore\n * Note:\n * * If you forget your PIN, there is no way to retrieve or restore it\n * Docs: https://developers.mixin.one/docs/api/pin/pin-update\n */\nexport const PinKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  function updatePin(firstPin: string, secondPin = ''): Promise<AuthenticationUserResponse> {\n    const oldEncrypted = firstPin ? signEd25519PIN(firstPin, keystore) : '';\n    const newEncrypted = signEd25519PIN(secondPin, keystore);\n    return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/update', { old_pin_base64: oldEncrypted, pin_base64: newEncrypted });\n  }\n\n  function updateTipPin(firstPin: string, secondPin: string, counter: number): Promise<AuthenticationUserResponse> {\n    const pubTipBuf = Buffer.from(secondPin, 'hex');\n    if (pubTipBuf.byteLength !== 32) throw new Error('invalid public key');\n    const pubTipHex = getTipPinUpdateMsg(pubTipBuf, counter).toString('hex');\n\n    const oldEncrypted = firstPin ? signEd25519PIN(firstPin, keystore) : '';\n    const newEncrypted = signEd25519PIN(pubTipHex, keystore);\n    return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/update', { old_pin_base64: oldEncrypted, pin_base64: newEncrypted });\n  }\n\n  return {\n    /** Verify a user's PIN, the iterator of the pin will increment also */\n    verify: (pin: string) => {\n      const encrypted = signEd25519PIN(pin, keystore);\n      return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/verify', { pin: encrypted });\n    },\n\n    verifyTipPin: (pin: string) => {\n      const timestamp = getNanoTime();\n      const msg = getVerifyPinTipBody(timestamp);\n      const signedTipPin = signTipBody(pin, msg);\n      return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/verify', {\n        pin_base64: signEd25519PIN(signedTipPin, keystore),\n        timestamp,\n      });\n    },\n\n    /** Change the PIN of the user, or setup a new PIN if it is not set yet */\n    update: updatePin,\n\n    updateTipPin,\n  };\n};\n\nexport const PinClient = buildClient(PinKeystoreClient);\n\nexport default PinClient;\n","import { AxiosInstance } from 'axios';\nimport {\n  Keystore,\n  AuthenticationUserResponse,\n  SafeAsset,\n  SafeDepositEntriesRequest,\n  SafeDepositEntryResponse,\n  SafePendingDepositRequest,\n  SafePendingDepositResponse,\n  SafeSnapshot,\n  SafeSnapshotsRequest,\n  SafeWithdrawalFee,\n} from './types';\nimport { buildClient, signEd25519PIN, signSafeRegistration } from './utils';\n\nexport const SafeKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => ({\n  /** If you want to register safe user, you need to upgrade TIP PIN first. */\n  register: (user_id: string, tipPin: string, priv: Buffer): Promise<AuthenticationUserResponse> => {\n    const data = signSafeRegistration(user_id, tipPin, priv);\n    data.pin_base64 = signEd25519PIN(data.pin_base64, keystore);\n    return axiosInstance.post<unknown, AuthenticationUserResponse>('/safe/users', data);\n  },\n\n  checkRegisteration: () => axiosInstance.get<unknown, AuthenticationUserResponse>(`/safe/me`),\n\n  assets: (): Promise<SafeAsset[]> => axiosInstance.get<unknown, SafeAsset[]>('/safe/assets'),\n\n  fetchAsset: (id: string): Promise<SafeAsset> => axiosInstance.get<unknown, SafeAsset>(`/safe/assets/${id}`),\n\n  fetchAssets: (assetIds: string[]): Promise<SafeAsset[]> => axiosInstance.post<unknown, SafeAsset[]>(`/safe/assets/fetch`, assetIds),\n\n  fetchFee: (asset: string, destination: string) => axiosInstance.get<unknown, SafeWithdrawalFee[]>(`/safe/assets/${asset}/fees`, { params: { destination } }),\n\n  depositEntries: (data: SafeDepositEntriesRequest) => axiosInstance.post<unknown, SafeDepositEntryResponse[]>(`/safe/deposit/entries`, data),\n\n  createDeposit: (chain_id: string) => axiosInstance.post<unknown, SafeDepositEntryResponse[]>('/safe/deposit/entries', { chain_id }),\n\n  pendingDeposits: (params: SafePendingDepositRequest): Promise<SafePendingDepositResponse[]> =>\n    axiosInstance.get<unknown, SafePendingDepositResponse[]>(`/safe/deposits`, { params }),\n\n  /**\n   * Get snapshots for single user\n   * Or Get snapshots for all network users with app uuid passed\n   */\n  fetchSafeSnapshots: (data: SafeSnapshotsRequest): Promise<SafeSnapshot[]> =>\n    axiosInstance.get<unknown, SafeSnapshot[]>(`/safe/snapshots`, {\n      params: data,\n    }),\n\n  fetchSafeSnapshot: (id: string): Promise<SafeSnapshot> => axiosInstance.get<unknown, SafeSnapshot>(`/safe/snapshots/${id}`),\n});\nexport const SafeClient = buildClient(SafeKeystoreClient);\n\nexport default SafeClient;\n","import { AxiosInstance } from 'axios';\nimport { Keystore } from './types/keystore';\nimport { SnapshotRequest, SnapshotResponse } from './types/snapshot';\nimport { TransferRequest } from './types/transfer';\nimport { GhostInputRequest, RawTransactionRequest, GhostKeysResponse } from './types/transaction';\nimport { signEd25519PIN } from './utils/pin';\nimport { buildClient } from './utils/client';\n\n/**\n * Methods to transfer asset, withdraw and obtain transfer information\n * Note:\n * * Once /transfers API is successfully called, it means data has been confirmed by all nodes, and it is irreversible\n * Docs: https://developers.mixin.one/docs/api/transfer/transfer\n */\nexport const TransferKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => ({\n  /** Get transfer information by traceID */\n  fetch: (traceID: string): Promise<SnapshotResponse> => axiosInstance.get<unknown, SnapshotResponse>(`/transfers/trace/${traceID}`),\n\n  /** Get specific snapshot of current user */\n  snapshot: (snapshotID: string): Promise<SnapshotResponse> => axiosInstance.get<unknown, SnapshotResponse>(`/snapshots/${snapshotID}`),\n\n  /** Get the snapshots of current user */\n  snapshots: (params: SnapshotRequest): Promise<SnapshotResponse[]> => axiosInstance.get<unknown, SnapshotResponse[]>(`/snapshots`, { params }),\n\n  /**\n   * Transfer to specific user\n   * If you encounter 500 error, do it over again\n   * If you see the error 20119 password is wrong, do not try again. It is recommended to call the PIN Verification API to confirm\n   */\n  toUser: (pin: string, params: TransferRequest): Promise<SnapshotResponse> => {\n    const request: TransferRequest = {\n      ...params,\n      pin: signEd25519PIN(pin, keystore),\n    };\n    return axiosInstance.post<unknown, SnapshotResponse>('/transfers', request);\n  },\n\n  /** Send raw transactions to the mainnet or multisig address */\n  toAddress: (pin: string, params: RawTransactionRequest): Promise<SnapshotResponse> => {\n    const request: RawTransactionRequest = {\n      ...params,\n      pin: signEd25519PIN(pin, keystore),\n    };\n    return axiosInstance.post<unknown, SnapshotResponse>('/transactions', request);\n  },\n\n  /** Get one-time user keys for mainnet */\n  outputs: (input: GhostInputRequest[]): Promise<GhostKeysResponse[]> => axiosInstance.post<unknown, GhostKeysResponse[]>(`/outputs`, input),\n});\n\nexport const TransferClient = buildClient(TransferKeystoreClient);\n\nexport default TransferClient;\n","import { AxiosInstance } from 'axios';\nimport { AuthenticationUserResponse, UserResponse, PreferenceRequest, RelationshipRequest, RelationshipAddRequest, LogRequest, LogResponse } from './types/user';\nimport { buildClient } from './utils/client';\nimport { AtLeastOne } from '../types';\n\n/** Methods to obtain or edit users' profile and relationships */\nexport const UserKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the current user's personal information */\n  profile: () => axiosInstance.get<unknown, AuthenticationUserResponse>(`/me`),\n\n  /** Get the contact list of the users, containing users and bots */\n  friends: () => axiosInstance.get<unknown, UserResponse[]>(`/friends`),\n\n  /** Get users' block list */\n  blockings: () => axiosInstance.get<unknown, UserResponse[]>(`/blocking_users`),\n\n  /** Rotate user's code */\n  rotateCode: () => axiosInstance.get<unknown, AuthenticationUserResponse>('/me/code'),\n\n  /** Search users by keyword */\n  search: (identityNumberOrPhone: string) => axiosInstance.get<unknown, UserResponse>(`/search/${identityNumberOrPhone}`),\n\n  /** Get user information by userID */\n  fetch: (id: string) => axiosInstance.get<unknown, UserResponse>(`/users/${id}`),\n\n  /**\n   * Get users' information by userIDs in bulk\n   * This API will only return the list of existing users\n   */\n  fetchList: (userIDs: string[]) => axiosInstance.post<unknown, UserResponse[]>(`/users/fetch`, userIDs),\n\n  /** Create a network user, can be created by bot only with no permission */\n  createBareUser: (fullName: string, sessionSecret: string) => axiosInstance.post<unknown, UserResponse>('/users', { full_name: fullName, session_secret: sessionSecret }),\n\n  /** Modify current user's personal name and avatar */\n  update: (fullName: string, avatarBase64: string) => axiosInstance.post<unknown, UserResponse>(`/me`, { full_name: fullName, avatar_base64: avatarBase64 }),\n\n  /** update user's preferences */\n  updatePreferences: (params: AtLeastOne<PreferenceRequest>) => axiosInstance.post<unknown, AuthenticationUserResponse>(`/me/preferences`, params),\n\n  /** Manage the relationship between two users, one can 'ADD' | 'REMOVE' | 'BLOCK' | 'UNBLOCK' a user */\n  updateRelationships: (relationship: RelationshipRequest | RelationshipAddRequest) => axiosInstance.post<unknown, UserResponse>(`/relationships`, relationship),\n\n  /** Get pin logs of user */\n  logs: (params: LogRequest) => axiosInstance.get<unknown, LogResponse[]>(`/logs`, { params }),\n});\n\nexport const UserClient = buildClient(UserKeystoreClient);\n\nexport default UserClient;\n","import { AxiosInstance } from 'axios';\nimport {\n  GhostKey,\n  GhostKeyRequest,\n  OutputFetchRequest,\n  OutputsRequest,\n  SafeOutputsRequest,\n  SafeBalanceRequest,\n  SafeUtxoOutput,\n  TransactionRequest,\n  SequencerTransactionRequest,\n  UtxoOutput,\n} from './types';\nimport { buildClient, getTotalBalanceFromOutputs, hashMembers } from './utils';\n\nexport const UtxoKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  outputs: (params: OutputsRequest): Promise<UtxoOutput[]> =>\n    axiosInstance.get<unknown, UtxoOutput[]>(`/outputs`, {\n      params: {\n        ...params,\n        members: hashMembers(params.members),\n      },\n    }),\n\n  /**\n   * Utxos of current user will be returned, if members and threshold are not provided.\n   */\n  safeOutputs: (params: SafeOutputsRequest): Promise<SafeUtxoOutput[]> =>\n    axiosInstance.get<unknown, SafeUtxoOutput[]>(`/safe/outputs`, {\n      params: {\n        ...params,\n        members: params.members ? hashMembers(params.members) : undefined,\n      },\n    }),\n\n  safeAssetBalance: async (params: SafeBalanceRequest) => {\n    const outputs = await axiosInstance.get<unknown, SafeUtxoOutput[]>(`/safe/outputs`, {\n      params: {\n        ...params,\n        members: params.members ? hashMembers(params.members) : undefined,\n        state: 'unspent',\n      },\n    });\n    return getTotalBalanceFromOutputs(outputs).toString();\n  },\n\n  fetchSafeOutputs: (params: OutputFetchRequest): Promise<UtxoOutput[]> => axiosInstance.post<unknown, UtxoOutput[]>('/safe/outputs/fetch', params),\n\n  fetchTransaction: (transactionId: string): Promise<SequencerTransactionRequest> => axiosInstance.get<unknown, SequencerTransactionRequest>(`/safe/transactions/${transactionId}`),\n\n  verifyTransaction: (params: TransactionRequest[]): Promise<SequencerTransactionRequest[]> =>\n    axiosInstance.post<unknown, SequencerTransactionRequest[]>('/safe/transaction/requests', params),\n\n  sendTransactions: (params: TransactionRequest[]): Promise<SequencerTransactionRequest[]> =>\n    axiosInstance.post<unknown, SequencerTransactionRequest[]>('/safe/transactions', params),\n\n  /**\n   * Get one-time information to transfer assets to single user or multisigs group, not required for Mixin Kernel Address\n   * index in GhostKeyRequest MUST be the same with the index of corresponding output\n   * receivers will be sorted in the function\n   */\n  ghostKey: (params: GhostKeyRequest[]): Promise<GhostKey[]> => {\n    params = params.map(p => ({\n      ...p,\n      receivers: p.receivers.sort(),\n    }));\n    return axiosInstance.post<unknown, GhostKey[]>('/safe/keys', params);\n  },\n});\n\nexport const UtxoClient = buildClient(UtxoKeystoreClient);\n\nexport default UtxoClient;\n","import merge from 'lodash.merge';\nimport type { AxiosInstance } from 'axios';\nimport type Keystore from './types/keystore';\nimport type { HTTPConfig, RequestClient } from './types';\nimport { createAxiosClient, createRequestClient } from './utils';\nimport { AddressKeystoreClient } from './address';\nimport { AppKeystoreClient } from './app';\nimport { AssetKeystoreClient } from './asset';\nimport { AttachmentKeystoreClient } from './attachment';\nimport { CircleKeystoreClient } from './circle';\nimport { CodeKeystoreClient } from './code';\nimport { CollectibleKeystoreClient } from './collectible';\nimport { ConversationKeystoreClient } from './conversation';\nimport { ExternalKeystoreClient } from './external';\nimport { MessageKeystoreClient } from './message';\nimport { MultisigKeystoreClient } from './multisig';\nimport { NetworkBaseClient } from './network';\nimport { OAuthBaseClient } from './oauth';\nimport { PaymentBaseClient } from './payment';\nimport { PinKeystoreClient } from './pin';\nimport { TransferKeystoreClient } from './transfer';\nimport { UserKeystoreClient } from './user';\nimport { BlazeKeystoreClient } from './blaze';\nimport { UtxoKeystoreClient } from './utxo';\nimport { SafeKeystoreClient } from './safe';\n\nconst KeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined, config: HTTPConfig) => ({\n  address: AddressKeystoreClient(axiosInstance, keystore),\n  app: AppKeystoreClient(axiosInstance),\n  asset: AssetKeystoreClient(axiosInstance),\n  blaze: BlazeKeystoreClient(keystore, config.blazeOptions),\n  attachment: AttachmentKeystoreClient(axiosInstance),\n  circle: CircleKeystoreClient(axiosInstance),\n  code: CodeKeystoreClient(axiosInstance),\n  collection: CollectibleKeystoreClient(axiosInstance, keystore),\n  conversation: ConversationKeystoreClient(axiosInstance, keystore),\n  external: ExternalKeystoreClient(axiosInstance),\n  message: MessageKeystoreClient(axiosInstance, keystore),\n  multisig: MultisigKeystoreClient(axiosInstance, keystore),\n  network: NetworkBaseClient(axiosInstance),\n  oauth: OAuthBaseClient(axiosInstance),\n  payment: PaymentBaseClient(axiosInstance),\n  pin: PinKeystoreClient(axiosInstance, keystore),\n  safe: SafeKeystoreClient(axiosInstance, keystore),\n  transfer: TransferKeystoreClient(axiosInstance, keystore),\n  user: UserKeystoreClient(axiosInstance),\n  utxo: UtxoKeystoreClient(axiosInstance),\n});\n\nexport type KeystoreClientReturnType = ReturnType<typeof KeystoreClient>;\n\nexport function MixinApi(config: HTTPConfig = {}): KeystoreClientReturnType & RequestClient {\n  const { keystore, requestConfig } = config;\n\n  const axiosInstance = createAxiosClient(keystore, requestConfig);\n  const requestClient = createRequestClient(axiosInstance);\n\n  const keystoreClient = KeystoreClient(axiosInstance, keystore, config);\n\n  return merge(keystoreClient, requestClient);\n}\n","export const MixinAssetID = '43d61dcd-e413-450d-80b8-101d5e903357';\nexport const MixinCashier = '674d6776-d600-4346-af46-58e77d8df185';\n","import { Context, WebviewAsset } from './type';\n\nexport const WebViewApi = () => {\n  const getMixinContext = () => {\n    let ctx: Context = {};\n    if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.MixinContext) {\n      const contextString = prompt('MixinContext.getContext()'); // eslint-disable-line no-alert\n      if (contextString) {\n        ctx = JSON.parse(contextString);\n        ctx.platform = ctx.platform || 'iOS';\n      }\n    } else if (window.MixinContext && typeof window.MixinContext.getContext === 'function') {\n      ctx = JSON.parse(window.MixinContext.getContext());\n      ctx.platform = ctx.platform || 'Android';\n    }\n\n    return ctx;\n  };\n\n  return {\n    getMixinContext,\n\n    reloadTheme: () => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.reloadTheme) window.webkit.messageHandlers.reloadTheme.postMessage('');\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.reloadTheme === 'function') window.MixinContext.reloadTheme();\n          break;\n        default:\n          break;\n      }\n    },\n\n    playlist: (audios: string[]) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.playlist) window.webkit.messageHandlers.playlist.postMessage(audios);\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.playlist === 'function') window.MixinContext.playlist(audios);\n          break;\n        default:\n          break;\n      }\n    },\n\n    close: () => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.close) window.webkit.messageHandlers.close.postMessage('');\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.close === 'function') window.MixinContext.close();\n          break;\n        default:\n          break;\n      }\n    },\n\n    getAssets: async (assets: string[], cb: (assets: WebviewAsset[]) => void) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getAssets) {\n            window.assetsCallbackFunction = cb;\n            await window.webkit.messageHandlers.getAssets.postMessage([assets, 'assetsCallbackFunction']);\n          }\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.getAssets === 'function') {\n            window.assetsCallbackFunction = cb;\n            await window.MixinContext.getAssets(assets, 'assetsCallbackFunction');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n\n    getTipAddress: async (chainId: string, cb: (address: string) => void) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getTipAddress) {\n            window.tipAddressCallbackFunction = cb;\n            await window.webkit.messageHandlers.getTipAddress.postMessage([chainId, 'tipAddressCallbackFunction']);\n          }\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.getTipAddress === 'function') {\n            window.tipAddressCallbackFunction = cb;\n            await window.MixinContext.getTipAddress(chainId, 'tipAddressCallbackFunction');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n\n    tipSign: async (chainId: string, msg: string, cb: (signature: string) => void) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.tipSign) {\n            window.tipSignCallbackFunction = cb;\n            await window.webkit.messageHandlers.tipSign.postMessage([chainId, msg, 'tipSignCallbackFunction']);\n          }\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.tipSign === 'function') {\n            window.tipSignCallbackFunction = cb;\n            await window.MixinContext.tipSign(chainId, msg, 'tipSignCallbackFunction');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n  };\n};\n","export const sleep = (n = 500) =>\n  new Promise<void>(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, n);\n  });\n"],"names":["base64RawURLEncode","raw","buf","Uint8Array","Buffer","from","length","toString","replaceAll","base64RawURLDecode","data","zeros","getMultiplier","n","BigNumber","substring","formatUnits","amount","unit","m","dividedBy","parseUnits","times","magic","empty","integerToBytes","x","bytes","i","unshift","Math","pow","bigNumberToBytes","mod","toNumber","dividedToIntegerBy","isZero","putUvarInt","Encoder","this","_proto","prototype","hex","write","concat","writeBytes","writeInt","byteLength","writeSlice","l","Error","alloc","writeUInt16BE","writeUint16","writeUint32","writeUInt32BE","writeUint64","writeBigUInt64BE","writeInteger","b","writeUUID","id","uuid","parse","encodeInput","input","hash","index","genesis","d","deposit","chain","asset","tx","transaction","Number","toFixed","mint","group","batch","encodeOutput","output","o","type","keys","forEach","k","_this","mask","script","s","w","withdrawal","addr","address","tag","encodeAggregatedSignature","js","signature","signers","max","_this2","masks","encodeSignature","sm","ss","Object","entries","map","_ref","sig","sort","a","_this3","hashMembers","ids","key","join","newHash","uniqueConversationID","userID","recipientID","_sort","minId","maxId","md5","forge","md","create","update","digest","uuidStringify","sha3_256","sha256Hash","sha256","sha512Hash","sha512","blake3Hash","blake3","scMinusOne","base","ed25519","ExtendedPoint","fromHex","fn","Field","CURVE","undefined","isReduced","at","setUniformBytes","wideBytes","copy","bytesToNumberLE","setCanonicalBytes","scalarBaseMult","res","multiply","toRawBytes","publicFromPrivate","priv","newPoint","edwards25519","scalar","x25519","edwardsToMontgomery","edwardsToMontgomeryPriv","setBytesWithClamping","subarray","scalarBaseMultToPoint","sign","msg","digest1","messageDigest","z","r","pub","hramDigest","y","numberToBytesLE","add","mul","keyMultPubPriv","q","hashScalar","tmp","src","getNanoTime","now","nano","sharedEd25519Key","keystore","ed","server_public_key","pin_token_base64","pri","session_private_key","getSharedSecret","getTipPinUpdateMsg","counter","enc","BigInt","signEd25519PIN","pin","_pin","iterator","Uint64","toBuffer","time","Date","buffer","util","createBuffer","paddingLen","paddings","push","putBytes","iv","random","getBytesSync","sharedKey","cipher","createCipher","start","finish","pinBuff","getBytes","len","encryptedBytes","getCreateAddressTipBody","asset_id","publicKey","name","getRemoveAddressTipBody","address_id","getVerifyPinTipBody","timestamp","padStart","signTipBody","privateKey","pki","message","ResponseError","_Error","code","description","status","extra","requestId","originalError","call","_wrapNativeSuper","signToken","payload","private_key","header","serialize","alg","typ","payloadStr","result","signData","encoding","signAuthenticationToken","methodRaw","uri","params","requestID","session_id","validate","method","toLocaleUpperCase","unsafe","iat","floor","exp","uid","app_id","sid","jti","toHex","scp","signOauthAccessToken","scope","iss","aid","authorization_id","signAccessToken","hostURL","http","config","retries","retry","ins","axios","_extends","baseURL","timeout","interceptors","request","use","url","getUri","slice","_config$baseURL","headers","jwtToken","Authorization","response","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_res$data","error","wrap","_context","prev","next","abrupt","stop","_x","apply","arguments","_ref2","_callee2","e","_context2","responseCallback","Promise","reject","_x2","axiosRetry","shouldResetTimeout","retryDelay","retryCondition","Boolean","isRetryAllowed","isIdempotentRequestError","onRetry","_count","err","requestConfig","_err$config","defaults","_err$config2","post","put","patch","mixinRequest","createAxiosClient","createRequestClient","axiosInstance","buildClient","KeystoreClient","requestClient","keystoreClient","assign","AddressKeystoreClient","fetch","addressID","get","fetchList","assetID","destination","_params$tag","label","signedTipPin","encrypted","delete","AddressClient","AppKeystoreClient","appID","properties","favorites","updateSecret","updateSafeSession","registerSafe","favorite","unfavorite","AppClient","AssetKeystoreClient","snapshots","AssetClient","AttachmentKeystoreClient","_upload","createAttachment","uploadAttachmentTo","uploadURL","file","x-amz-acl","Content-Type","maxContentLength","attachmentID","upload","_yield$createAttachme","view_url","upload_url","attachment_id","sent","AttachmentClient","getPublicFromMainnetAddress","startsWith","bs58","decode","equals","_unused","getMainnetAddressFromPublic","pubKey","checksum","encode","parseMixAddress","version","threshold","total","memberData","members","stringify","_unused2","buildMixAddress","ma","prefix","bytesToInterger","byte","Decoder","end","read","offset","readByte","value","readUint8","readBytes","readInt","readUInt16BE","readUint32","readUInt32BE","readUInt64","readBigUInt64BE","readUUID","readInteger","decodeInput","lenGenesis","depositPrefix","mintPrefix","decodeOutput","t","lenKey","lenScript","decodeSignature","sigs","getTotalBalanceFromOutputs","outputs","reduce","cur","plus","encodeScript","encodeTx","inputs","buildMultiSigsTransaction","filter","DefaultChain","DefaultClass","DefaultNftAssetId","buildCollectibleMemo","content","collection_id","token_id","encoder","UUIDParse","buildNfoTransferRequest","client","utxo","receivers","transfer","transaction_hash","output_index","collection","_x3","_x4","_x5","TIPBodyForSequencerRegister","user_id","tipBody","signSafeRegistration","tipPin","public_key","publicKeyFromPrivateKey","pin_base64","deriveGhostPublicKey","A","B","p1","p2","p4","encodeSafeTransaction","references","decodeMessage","options","ungzip","to","msgObj","JSON","sendRaw","ws","resolve","zipped","gzip","readyState","WebSocket","OPEN","timer","setTimeout","send","clearTimeout","wsHostURL","BlazeKeystoreClient","wsOptions","pingTimeout","terminate","heartbeat","loop","h","onMessage","loopBlaze","handler","option","syncAck","handshakeTimeout","onmessage","event","source","onAckReceipt","category","onConversation","onTransfer","action","message_id","websocket","on","onopen","onclose","onerror","stopLoop","getWebSocket","CircleKeystoreClient","circleID","conversations","addUser","removeUser","addConversation","conversationID","removeConversation","conversation_id","CircleClient","CodeKeystoreClient","codeID","CodeClient","CollectibleKeystoreClient","manageRequest","tokenID","fetchCollection","collectionID","hashedParams","cancel","unlock","CollectibleClient","ConversationKeystoreClient","createConversation","managerConversation","participant","muteConversation","duration","createContact","participants","createGroup","joinGroup","exitGroup","updateParticipants","addParticipants","userIDs","removeParticipants","setAdmin","role","revokeAdmin","resetGroupCode","updateGroupInfo","mute","unmute","disappearDuration","ConversationClient","ExternalKeystoreClient","deposits","checkAddress","exchangeRates","proxy","ExternalClient","MessageKeystoreClient","sendMsg","messageRequest","recipient_id","sendAcknowledgement","sendAcknowledges","messages","sendOne","sendBatch","sendText","text","sendSticker","sticker","sendImage","image","sendAudio","audio","sendVideo","video","sendContact","contact","sendAppCard","appCard","sendFile","sendLive","live","sendLocation","location","sendPost","sendAppButton","appButton","sendTransfer","sendRecall","MessageClient","MultisigKeystoreClient","initMultisig","createSafeMultisigs","fetchSafeMultisigs","signSafeMultisigs","unlockSafeMultisigs","MultisigClient","NetworkBaseClient","info","chains","fetchChain","chainID","fetchAsset","topAssets","kind","searchAssets","keyword","historicalPrice","snapshot","snapshotID","inputParams","order","NetworkClient","OAuthBaseClient","getToken","authorize","authorizations","appId","app","revokeAuthorize","clientId","client_id","OAuthClient","PaymentBaseClient","payment","PaymentClient","PinKeystoreClient","verify","verifyTipPin","firstPin","secondPin","oldEncrypted","newEncrypted","old_pin_base64","updateTipPin","pubTipBuf","pubTipHex","PinClient","SafeKeystoreClient","register","checkRegisteration","assets","fetchAssets","assetIds","fetchFee","depositEntries","createDeposit","chain_id","pendingDeposits","fetchSafeSnapshots","fetchSafeSnapshot","SafeClient","TransferKeystoreClient","traceID","toUser","toAddress","TransferClient","UserKeystoreClient","profile","friends","blockings","rotateCode","search","identityNumberOrPhone","createBareUser","fullName","sessionSecret","full_name","session_secret","avatarBase64","avatar_base64","updatePreferences","updateRelationships","relationship","logs","UserClient","UtxoKeystoreClient","safeOutputs","safeAssetBalance","_safeAssetBalance","state","fetchSafeOutputs","fetchTransaction","transactionId","verifyTransaction","sendTransactions","ghostKey","p","UtxoClient","blaze","blazeOptions","attachment","circle","conversation","external","multisig","network","oauth","safe","user","merge","_tipSign","_getTipAddress","_getAssets","getMixinContext","ctx","window","webkit","messageHandlers","MixinContext","contextString","prompt","platform","getContext","reloadTheme","postMessage","playlist","audios","close","getAssets","cb","t0","assetsCallbackFunction","getTipAddress","chainId","tipAddressCallbackFunction","tipSign","_callee3","_context3","tipSignCallbackFunction","_x6","_x7","mainnetAddress","mixAddress","baseUrl","memo","trace","_params$trace","v4","return_to","returnTo","encodeURIComponent","qs","utxos","rs","gs","_r$tag","token","tokenStr","hexMemo","nm","decoder","parseInt","dec","lenInput","lenOutput","lenRefs","lenExtra","lenSigs","signatureMap","seed","keypair","generateKeyPair","recipient","hexSeed","publics","every","toBytes","addressPubic","spendKey","viewKey","totalOutput","totalInput","minus","isNegative","change","views","spenty","signaturesMap","viewBuffer"],"mappings":"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"}