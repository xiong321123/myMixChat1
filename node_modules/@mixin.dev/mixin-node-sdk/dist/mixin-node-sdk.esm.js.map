{"version":3,"file":"mixin-node-sdk.esm.js","sources":["../src/client/utils/base64.ts","../src/client/utils/amount.ts","../src/client/utils/encoder.ts","../src/client/utils/uniq.ts","../src/client/utils/ed25519.ts","../src/client/utils/pin.ts","../src/client/error.ts","../src/client/utils/auth.ts","../src/client/http.ts","../src/client/utils/client.ts","../src/client/address.ts","../src/client/app.ts","../src/client/asset.ts","../src/client/attachment.ts","../src/client/utils/address.ts","../src/client/utils/decoder.ts","../src/client/utils/multisigs.ts","../src/client/utils/nfo.ts","../src/client/utils/tip.ts","../src/client/utils/safe.ts","../src/client/utils/sleep.ts","../src/client/utils/ws.ts","../src/client/ws.ts","../src/client/blaze.ts","../src/client/circle.ts","../src/client/code.ts","../src/client/collectible.ts","../src/client/conversation.ts","../src/client/external.ts","../src/client/message.ts","../src/client/multisig.ts","../src/client/network.ts","../src/client/oauth.ts","../src/client/payment.ts","../src/client/pin.ts","../src/client/safe.ts","../src/client/transfer.ts","../src/client/user.ts","../src/client/utxo.ts","../src/client/mixin-client.ts","../src/webview/client.ts","../src/constant.ts"],"sourcesContent":["/**\n * mixin uses raw url encoding as default for base64 process\n * base64RawURLEncode is the standard raw, unpadded base64 encoding\n * base64RawURLDecode is same as encode\n * like Golang version https://pkg.go.dev/encoding/base64#Encoding\n */\nexport const base64RawURLEncode = (raw: Buffer | Uint8Array | string): string => {\n  let buf = raw;\n  if (typeof raw === 'string') {\n    buf = Buffer.from(raw);\n  } else if (raw instanceof Uint8Array) {\n    buf = Buffer.from(raw);\n  }\n  if (buf.length === 0) {\n    return '';\n  }\n  return buf.toString('base64').replaceAll('=', '').replaceAll('+', '-').replaceAll('/', '_');\n};\n\nexport const base64RawURLDecode = (raw: string | Buffer): Buffer => {\n  let data = raw instanceof Buffer ? raw.toString() : raw;\n  data = data.replaceAll('-', '+').replaceAll('_', '/');\n  return Buffer.from(data, 'base64');\n};\n","import BigNumber from 'bignumber.js';\n\nlet zeros = '0';\nwhile (zeros.length < 256) {\n  zeros += zeros;\n}\n\nconst getMultiplier = (n: number) => BigNumber(`1${zeros.substring(0, n)}`);\n\nexport const formatUnits = (amount: string | number, unit: number) => {\n  const m = getMultiplier(unit);\n  return BigNumber(amount).dividedBy(m);\n};\nexport const parseUnits = (amount: string | number, unit: number) => {\n  const m = getMultiplier(unit);\n  return BigNumber(amount).times(m);\n};\n","import { parse } from 'uuid';\nimport BigNumber from 'bignumber.js';\nimport { Aggregated, Input, Output } from '../types';\nimport { parseUnits } from './amount';\n\nconst MaximumEncodingInt = 0xffff;\n\nconst AggregatedSignaturePrefix = 0xff01;\n\nexport const magic = Buffer.from([0x77, 0x77]);\nconst empty = Buffer.from([0x00, 0x00]);\n\nexport const integerToBytes = (x: number) => {\n  const bytes = [];\n  let i = x;\n  do {\n    bytes.unshift(i & 255);\n    i = (i / 2 ** 8) | 0;\n  } while (i !== 0);\n  return bytes;\n};\n\nexport const bigNumberToBytes = (x: BigNumber) => {\n  const bytes = [];\n  let i = x;\n  do {\n    bytes.unshift(i.mod(256).toNumber());\n    i = i.dividedToIntegerBy(256);\n  } while (!i.isZero());\n  return Buffer.from(bytes);\n};\n\nexport const putUvarInt = (x: number) => {\n  const buf = [];\n  let i = 0;\n  while (x >= 0x80) {\n    buf[i] = x | 0x80;\n    x >>= 7;\n    i++;\n  }\n  buf[i] = x;\n  return buf;\n};\n\nexport class Encoder {\n  buf: Buffer;\n\n  constructor(buf: Buffer | undefined) {\n    this.buf = Buffer.from('');\n    if (buf) {\n      this.buf = buf;\n    }\n  }\n\n  hex() {\n    return this.buf.toString('hex');\n  }\n\n  write(buf: Buffer) {\n    this.buf = Buffer.concat([this.buf, buf]);\n  }\n\n  writeBytes(buf: Buffer) {\n    const len = buf.byteLength;\n    this.writeInt(len);\n    this.write(buf);\n  }\n\n  writeSlice(buf: Buffer) {\n    const l = buf.length;\n    if (l > 128) throw new Error(`slice too long, length ${l}, maximum 128`);\n    this.write(Buffer.from([l]));\n    this.write(buf);\n  }\n\n  writeInt(i: number) {\n    if (i > MaximumEncodingInt) {\n      throw new Error(`invalid integer ${i}, maximum ${MaximumEncodingInt}`);\n    }\n    const buf = Buffer.alloc(2);\n    buf.writeUInt16BE(i);\n    this.write(buf);\n  }\n\n  writeUint16(i: number) {\n    const buf = Buffer.alloc(2);\n    buf.writeUInt16BE(i);\n    this.write(buf);\n  }\n\n  writeUint32(i: number) {\n    const buf = Buffer.alloc(4);\n    buf.writeUInt32BE(i);\n    this.write(buf);\n  }\n\n  writeUint64(i: bigint) {\n    const buf = Buffer.alloc(8);\n    buf.writeBigUInt64BE(i);\n    this.write(buf);\n  }\n\n  writeInteger(i: BigNumber) {\n    const b = bigNumberToBytes(i);\n    this.writeInt(b.byteLength);\n    this.write(b);\n  }\n\n  // TODO convert array like to array\n  writeUUID(id: string) {\n    const uuid: any = parse(id);\n    for (let i = 0; i < uuid.length; i += 1) {\n      this.write(Buffer.from([uuid[i]]));\n    }\n  }\n\n  encodeInput(input: Input) {\n    const i = input;\n    this.write(Buffer.from(i.hash, 'hex'));\n    this.writeInt(i.index);\n\n    if (!i.genesis) i.genesis = '';\n    this.writeInt(i.genesis.length);\n    this.write(Buffer.from(i.genesis));\n    const d = i.deposit;\n    if (typeof d === 'undefined') {\n      this.write(empty);\n    } else {\n      // TODO... to test...\n      this.write(magic);\n      this.write(Buffer.from(d.chain, 'hex'));\n\n      const asset = Buffer.from(d.asset);\n      this.writeInt(asset.byteLength);\n      this.write(asset);\n\n      const tx = Buffer.from(d.transaction);\n      this.writeInt(tx.byteLength);\n      this.write(tx);\n\n      this.writeUint64(d.index);\n      this.writeInteger(parseUnits(Number(d.amount).toFixed(8), 8));\n    }\n    const m = i.mint;\n    if (typeof m === 'undefined') {\n      this.write(empty);\n    } else {\n      this.write(magic);\n      if (!m.group) m.group = '';\n      this.writeInt(m.group.length);\n      this.write(Buffer.from(m.group));\n\n      this.writeUint64(m.batch);\n      this.writeInteger(parseUnits(Number(m.amount).toFixed(8), 8));\n    }\n  }\n\n  encodeOutput(output: Output) {\n    const o = output;\n    if (!o.type) o.type = 0;\n    this.write(Buffer.from([0x00, o.type]));\n    this.writeInteger(parseUnits(Number(o.amount).toFixed(8), 8));\n\n    this.writeInt(o.keys.length);\n    o.keys.forEach(k => this.write(Buffer.from(k, 'hex')));\n\n    this.write(o.mask ? Buffer.from(o.mask, 'hex') : Buffer.alloc(32, 0));\n\n    if (!o.script) o.script = '';\n    const s = Buffer.from(o.script, 'hex');\n    this.writeInt(s.byteLength);\n    this.write(s);\n\n    const w = o.withdrawal;\n    if (!w) {\n      this.write(empty);\n    } else {\n      this.write(magic);\n\n      const addr = Buffer.from(w.address);\n      this.writeInt(addr.byteLength);\n      this.write(addr);\n\n      const tag = Buffer.from(w.tag);\n      this.writeInt(tag.byteLength);\n      this.write(tag);\n    }\n  }\n\n  encodeAggregatedSignature(js: Aggregated) {\n    this.writeInt(MaximumEncodingInt);\n    this.writeInt(AggregatedSignaturePrefix);\n    this.write(Buffer.from(js.signature, 'hex'));\n\n    if (js.signers.length === 0) {\n      this.write(Buffer.from([0x00]));\n      this.writeInt(0);\n      return;\n    }\n\n    js.signers.forEach((m, i) => {\n      if (i > 0 && m <= js.signers[i - 1]) {\n        throw new Error('signers not sorted');\n      }\n      if (m > MaximumEncodingInt) {\n        throw new Error('signer overflow');\n      }\n    });\n\n    const max = js.signers[js.signers.length - 1];\n\n    if (((((max / 8) | 0) + 1) | 0) > js.signature.length * 2) {\n      // TODO... not check...\n      this.write(Buffer.from([0x01]));\n      this.writeInt(js.signature.length);\n      js.signers.forEach(m => this.writeInt(m));\n      return;\n    }\n\n    const masks = Buffer.alloc((((max / 8) | 0) + 1) | 0);\n    js.signers.forEach(m => {\n      masks[(m / 8) | 0] ^= 1 << (m % 8 | 0);\n    });\n    this.write(Buffer.from([0x00]));\n    this.writeInt(masks.length);\n    this.write(masks);\n  }\n\n  encodeSignature(sm: { [key: number]: string }) {\n    const ss = Object.entries(sm)\n      .map(([k, v]) => ({ index: k, sig: v }))\n      .sort((a, b) => Number(a.index) - Number(b.index));\n\n    this.writeInt(ss.length);\n    ss.forEach(s => {\n      this.writeUint16(Number(s.index));\n      this.write(Buffer.from(s.sig, 'hex'));\n    });\n  }\n}\n\nexport default Encoder;\n","import forge from 'node-forge';\nimport { blake3 } from '@noble/hashes/blake3';\nimport { sha3_256 } from '@noble/hashes/sha3';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { stringify as uuidStringify, v4 as uuid } from 'uuid';\n\n/** Supporting multisig for tokens & collectibles */\nexport const hashMembers = (ids: string[]): string => {\n  const key = ids.sort().join('');\n  return newHash(Buffer.from(key)).toString('hex');\n};\n\n/** Generate an unique conversation id for contact */\nexport const uniqueConversationID = (userID: string, recipientID: string): string => {\n  const [minId, maxId] = [userID, recipientID].sort();\n  const md5 = forge.md.md5.create();\n  md5.update(minId);\n  md5.update(maxId);\n  const bytes = Buffer.from(md5.digest().bytes(), 'binary');\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x30;\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n  return uuidStringify(bytes);\n};\n\nexport const newHash = (data: Buffer) => Buffer.from(sha3_256.create().update(data).digest());\n\nexport const sha256Hash = (data: Buffer) => Buffer.from(sha256.create().update(data).digest());\n\nexport const sha512Hash = (data: Buffer) => Buffer.from(sha512.create().update(data).digest());\n\nexport const blake3Hash = (data: Buffer) => Buffer.from(blake3.create({}).update(data).digest());\n\nexport const getUuid = () => uuid();\n","import { ed25519, edwardsToMontgomery, edwardsToMontgomeryPriv, x25519 } from '@noble/curves/ed25519';\nimport { Field } from '@noble/curves/abstract/modular';\nimport { numberToBytesLE, bytesToNumberLE } from '@noble/curves/abstract/utils';\nimport { blake3Hash, sha512Hash } from './uniq';\nimport { putUvarInt } from './encoder';\n\nconst scMinusOne = Buffer.from('ecd3f55c1a631258d69cf7a2def9de1400000000000000000000000000000010', 'hex');\nconst base = ed25519.ExtendedPoint.fromHex('5866666666666666666666666666666666666666666666666666666666666666');\nconst fn = Field(ed25519.CURVE.n, undefined, true);\n\nconst isReduced = (x: Buffer) => {\n  for (let i = x.byteLength - 1; i >= 0; i--) {\n    if (x.at(i)! > scMinusOne.at(i)!) return false;\n    if (x.at(i)! < scMinusOne.at(i)!) return true;\n  }\n  return true;\n};\n\nconst setBytesWithClamping = (x: Buffer) => {\n  if (x.byteLength !== 32) throw new Error('edwards25519: invalid SetBytesWithClamping input length');\n  const wideBytes = Buffer.alloc(64);\n  x.copy(wideBytes, 0, 0, 32);\n  wideBytes[0] &= 248;\n  wideBytes[31] &= 63;\n  wideBytes[31] |= 64;\n  const m = fn.create(bytesToNumberLE(wideBytes.subarray(0, 32)));\n  return m;\n};\n\nconst setUniformBytes = (x: Buffer) => {\n  if (x.byteLength !== 64) throw new Error('edwards25519: invalid setUniformBytes input length');\n  const wideBytes = Buffer.alloc(64);\n  x.copy(wideBytes);\n  const m = fn.create(bytesToNumberLE(wideBytes));\n  return m;\n};\n\nconst setCanonicalBytes = (x: Buffer) => {\n  if (x.byteLength !== 32) throw new Error('invalid scalar length');\n  if (!isReduced(x)) throw new Error('invalid scalar encoding');\n  const s = fn.create(bytesToNumberLE(x));\n  return s;\n};\n\nconst scalarBaseMult = (x: bigint) => {\n  const res = base.multiply(x);\n  // @ts-ignore\n  return Buffer.from(res.toRawBytes());\n};\n\nconst scalarBaseMultToPoint = (x: bigint) => base.multiply(x);\n\nconst publicFromPrivate = (priv: Buffer) => {\n  const x = setCanonicalBytes(priv);\n  const v = scalarBaseMult(x);\n  return v;\n};\n\nconst sign = (msg: Buffer, key: Buffer) => {\n  const digest1 = sha512Hash(key.subarray(0, 32));\n  const messageDigest = sha512Hash(Buffer.concat([digest1.subarray(32), msg]));\n\n  const z = setUniformBytes(messageDigest);\n  const r = scalarBaseMult(z);\n\n  const pub = publicFromPrivate(key);\n  const hramDigest = sha512Hash(Buffer.concat([r, pub, msg]));\n\n  const x = setUniformBytes(hramDigest);\n  const y = setCanonicalBytes(key);\n  const s = numberToBytesLE(fn.add(fn.mul(x, y), z), 32);\n  return Buffer.concat([r, s]);\n};\n\nconst newPoint = (x: Buffer) => ed25519.ExtendedPoint.fromHex(x.toString('hex'));\n\nconst keyMultPubPriv = (pub: Buffer, priv: Buffer) => {\n  const q = newPoint(pub);\n  const x = setCanonicalBytes(priv);\n  const res = q.multiply(x);\n  // @ts-ignore\n  return Buffer.from(res.toRawBytes());\n};\n\nconst hashScalar = (k: Buffer, index: number) => {\n  const tmp = Buffer.from(putUvarInt(index));\n  const src = Buffer.alloc(64);\n  let hash = blake3Hash(Buffer.concat([k, tmp]));\n  hash.copy(src, 0, 0, 32);\n  hash = blake3Hash(hash);\n  hash.copy(src, 32, 0, 32);\n  const s = setUniformBytes(src);\n\n  hash = blake3Hash(Buffer.from(numberToBytesLE(s, 32)));\n  hash.copy(src, 0, 0, 32);\n  hash = blake3Hash(hash);\n  hash.copy(src, 32, 0, 32);\n  return setUniformBytes(src);\n};\n\nexport const edwards25519 = {\n  scalar: fn,\n  x25519,\n  edwardsToMontgomery,\n  edwardsToMontgomeryPriv,\n\n  setBytesWithClamping,\n  setCanonicalBytes,\n  setUniformBytes,\n\n  isReduced,\n  publicFromPrivate,\n  scalarBaseMult,\n  scalarBaseMultToPoint,\n  sign,\n\n  newPoint,\n  keyMultPubPriv,\n  hashScalar,\n};\n","// @ts-ignore\nimport nano from 'nano-seconds';\nimport forge from 'node-forge';\nimport { Uint64LE as Uint64 } from 'int64-buffer';\nimport type { Keystore, AppKeystore, NetworkUserKeystore } from '../types/keystore';\nimport { base64RawURLDecode, base64RawURLEncode } from './base64';\nimport { Encoder } from './encoder';\nimport { edwards25519 as ed } from './ed25519';\nimport { sha256Hash } from './uniq';\n\nexport const getNanoTime = () => {\n  const now: number[] = nano.now();\n  return now[0] * 1e9 + now[1];\n};\n\nexport const sharedEd25519Key = (keystore: AppKeystore | NetworkUserKeystore) => {\n  const pub = 'server_public_key' in keystore ? ed.edwardsToMontgomery(Buffer.from(keystore.server_public_key, 'hex')) : base64RawURLDecode(keystore.pin_token_base64);\n  const pri = ed.edwardsToMontgomeryPriv(Buffer.from(keystore.session_private_key, 'hex'));\n  return ed.x25519.getSharedSecret(pri, pub);\n};\n\nexport const getTipPinUpdateMsg = (pub: Buffer, counter: number) => {\n  const enc = new Encoder(pub);\n  enc.writeUint64(BigInt(counter));\n  return enc.buf;\n};\n\nexport const signEd25519PIN = (pin: string, keystore: Keystore | undefined): string => {\n  if (!keystore || !keystore.session_private_key) return '';\n  if (!('server_public_key' in keystore) && !('pin_token_base64' in keystore)) return '';\n  const blockSize = 16;\n\n  const _pin = Buffer.from(pin, 'hex');\n  const iterator = Buffer.from(new Uint64(getNanoTime()).toBuffer());\n  const time = Buffer.from(new Uint64(Date.now() / 1000).toBuffer());\n  const buf = Buffer.concat([_pin, time, iterator]);\n\n  const buffer = forge.util.createBuffer(buf.toString('binary'));\n  const paddingLen = blockSize - (buffer.length() % blockSize);\n  const paddings = [];\n  for (let i = 0; i < paddingLen; i += 1) {\n    paddings.push(paddingLen);\n  }\n  buffer.putBytes(Buffer.from(paddings).toString('binary'));\n\n  const iv = forge.random.getBytesSync(blockSize);\n  const sharedKey = sharedEd25519Key(keystore);\n  const cipher = forge.cipher.createCipher('AES-CBC', forge.util.createBuffer(sharedKey, 'raw'));\n  cipher.start({ iv });\n  cipher.update(buffer);\n  cipher.finish();\n\n  const pinBuff = forge.util.createBuffer();\n  pinBuff.putBytes(iv);\n  pinBuff.putBytes(cipher.output.getBytes());\n\n  const len = pinBuff.length();\n  const encryptedBytes = Buffer.from(pinBuff.getBytes(len - 16), 'binary');\n  return base64RawURLEncode(encryptedBytes);\n};\n\nexport const getCreateAddressTipBody = (asset_id: string, publicKey: string, tag: string, name: string) => {\n  const msg = `TIP:ADDRESS:ADD:${asset_id + publicKey + tag + name}`;\n  return sha256Hash(Buffer.from(msg));\n};\n\nexport const getRemoveAddressTipBody = (address_id: string) => {\n  const msg = `TIP:ADDRESS:REMOVE:${address_id}`;\n  return sha256Hash(Buffer.from(msg));\n};\n\nexport const getVerifyPinTipBody = (timestamp: number) => {\n  const msg = `TIP:VERIFY:${`${timestamp}`.padStart(32, '0')}`;\n  return Buffer.from(msg);\n};\n\nexport const signTipBody = (pin: string, msg: Buffer) => {\n  const privateKey = Buffer.from(pin, 'hex');\n  const signData = forge.pki.ed25519.sign({\n    message: msg,\n    privateKey,\n  });\n  return signData.toString('hex');\n};\n","export class ResponseError extends Error {\n  constructor(public code: number, public description: string, public status: number, public extra: object, public requestId: string | undefined, public originalError: unknown) {\n    super(`code: ${code}, description: ${description}, status: ${status}, extra: ${extra}, requestId: ${requestId} originalError: ${originalError}`);\n  }\n}\n\nexport default ResponseError;\n","import serialize from 'serialize-javascript';\nimport forge from 'node-forge';\nimport { validate } from 'uuid';\nimport type { Keystore, AppKeystore, OAuthKeystore, NetworkUserKeystore } from '../types/keystore';\nimport { base64RawURLEncode } from './base64';\n\nexport const getED25519KeyPair = () => {\n  const seed = Buffer.from(forge.random.getBytesSync(32), 'binary');\n  const keypair = forge.pki.ed25519.generateKeyPair({ seed });\n  return {\n    privateKey: Buffer.from(keypair.privateKey),\n    publicKey: Buffer.from(keypair.publicKey),\n    seed,\n  };\n};\n\nconst signToken = (payload: Object, private_key: string): string => {\n  const header = base64RawURLEncode(serialize({ alg: 'EdDSA', typ: 'JWT' }));\n  const payloadStr = base64RawURLEncode(serialize(payload));\n\n  const privateKey = Buffer.from(private_key, 'hex');\n  const result = [header, payloadStr];\n  const signData = forge.pki.ed25519.sign({\n    message: result.join('.'),\n    encoding: 'utf8',\n    privateKey,\n  });\n\n  const sign = base64RawURLEncode(signData);\n  result.push(sign);\n  return result.join('.');\n};\n\n/**\n * sign an authentication token\n * sig: sha256(method + uri + params)\n */\nexport const signAuthenticationToken = (methodRaw: string | undefined, uri: string, params: Object | string, requestID: string, keystore: AppKeystore | NetworkUserKeystore) => {\n  if (!keystore.session_id || !validate(keystore.session_id)) return '';\n\n  let method = 'GET';\n  if (methodRaw) method = methodRaw.toLocaleUpperCase();\n\n  let data: string = '';\n  if (typeof params === 'object') {\n    data = serialize(params, { unsafe: true });\n  } else if (typeof params === 'string') {\n    data = params;\n  }\n\n  const iat = Math.floor(Date.now() / 1000);\n  const exp = iat + 3600;\n  const md = forge.md.sha256.create();\n  md.update(method + uri + data, 'utf8');\n\n  const payload = {\n    uid: keystore.app_id,\n    sid: keystore.session_id,\n    iat,\n    exp,\n    jti: requestID,\n    sig: md.digest().toHex(),\n    scp: 'FULL',\n  };\n\n  return signToken(payload, keystore.session_private_key);\n};\n\n/**\n * Sign an OAuth access token\n * Notes:\n * requestID should equal the one in header\n * scope should be oauth returned\n */\nexport const signOauthAccessToken = (methodRaw: string | undefined, uri: string, params: Object | string, requestID: string, keystore: OAuthKeystore) => {\n  if (!keystore.scope) return '';\n\n  let method = 'GET';\n  if (methodRaw) method = methodRaw.toLocaleUpperCase();\n\n  let data: string = '';\n  if (typeof params === 'object') {\n    data = serialize(params, { unsafe: true });\n  } else if (typeof params === 'string') {\n    data = params;\n  }\n\n  const iat = Math.floor(Date.now() / 1000);\n  const exp = iat + 3600;\n  const md = forge.md.sha256.create();\n  md.update(method + uri + data, 'utf8');\n\n  const payload = {\n    iss: keystore.app_id,\n    aid: keystore.authorization_id,\n    iat,\n    exp,\n    jti: requestID,\n    sig: md.digest().toHex(),\n    scp: keystore.scope,\n  };\n\n  return signToken(payload, keystore.session_private_key);\n};\n\nexport const signAccessToken = (methodRaw: string | undefined, uri: string, params: Object | string, requestID: string, keystore: Keystore | undefined) => {\n  if (!keystore || !keystore.app_id || !keystore.session_private_key) return '';\n  if (!validate(keystore.app_id)) return '';\n\n  const privateKey = Buffer.from(keystore.session_private_key, 'hex');\n  if (privateKey.byteLength !== 32) return '';\n\n  if ('authorization_id' in keystore) {\n    return signOauthAccessToken(methodRaw, uri, params, requestID, keystore);\n  }\n  return signAuthenticationToken(methodRaw, uri, params, requestID, keystore);\n};\n","import axios, { AxiosInstance, InternalAxiosRequestConfig, AxiosResponse } from 'axios';\nimport axiosRetry, { isIdempotentRequestError } from 'axios-retry';\nimport { v4 as uuid } from 'uuid';\nimport isRetryAllowed from 'is-retry-allowed';\nimport { ResponseError } from './error';\nimport { Keystore } from './types/keystore';\nimport { RequestConfig } from './types/client';\nimport { signAccessToken } from './utils/auth';\n\nconst hostURL = ['https://api.mixin.one', 'https://mixin-api.zeromesh.net'];\n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.patch['Content-Type'] = 'application/json';\nexport function http(keystore?: Keystore, config?: RequestConfig): AxiosInstance {\n  const timeout = config?.timeout || 3000;\n  const retries = config?.retry || 5;\n\n  const ins = axios.create({\n    baseURL: hostURL[0],\n    timeout,\n    ...config,\n  });\n\n  ins.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n    const { method, data } = config;\n    const url = axios.getUri(config).slice(config.baseURL?.length);\n\n    if (config.headers) {\n      const requestID = uuid();\n      config.headers['X-Request-Id'] = requestID;\n      const jwtToken = signAccessToken(method, url, data, requestID, keystore);\n      config.headers.Authorization = `Bearer ${jwtToken}`;\n    }\n\n    return config;\n  });\n\n  ins.interceptors.response.use(async (res: AxiosResponse) => {\n    const { data, error } = res.data;\n    if (error) throw new ResponseError(error.code, error.description, error.status, error.extra, res.headers['x-request-id'], error);\n    return data;\n  });\n\n  ins.interceptors.response.use(undefined, async (e: any) => {\n    await config?.responseCallback?.(e);\n\n    return Promise.reject(e);\n  });\n\n  axiosRetry(ins, {\n    retries,\n    shouldResetTimeout: true,\n    retryDelay: () => 500,\n    retryCondition: error =>\n      (!error.response &&\n        Boolean(error.code) && // Prevents retrying cancelled requests\n        isRetryAllowed(error)) ||\n      isIdempotentRequestError(error),\n    onRetry: (_count, err, requestConfig) => {\n      if (config?.baseURL) return;\n      requestConfig.baseURL = err.config?.baseURL === hostURL[0] ? hostURL[1] : hostURL[0];\n      ins.defaults.baseURL = err.config?.baseURL === hostURL[0] ? hostURL[1] : hostURL[0];\n    },\n  });\n\n  return ins;\n}\n\nexport const mixinRequest = http();\n","import { AxiosInstance } from 'axios';\nimport { BaseClient, BuildClient, HTTPConfig, KeystoreClient, RequestClient, RequestConfig, UnionKeystoreClient } from '../types/client';\nimport type { Keystore } from '../types/keystore';\nimport { http } from '../http';\n\nexport const createAxiosClient = (keystore?: Keystore, requestConfig?: RequestConfig) => http(keystore, requestConfig);\n\nexport const createRequestClient = (axiosInstance: AxiosInstance): RequestClient => ({\n  request: config => axiosInstance.request(config),\n});\n\nexport const buildClient: BuildClient =\n  <KeystoreReturnType extends object>(KeystoreClient: UnionKeystoreClient<KeystoreReturnType>): BaseClient<KeystoreReturnType> =>\n  (config: HTTPConfig = {}): any => {\n    if (!KeystoreClient) throw new Error('keystore client is required');\n\n    const { keystore, requestConfig } = config;\n    const axiosInstance = createAxiosClient(keystore, requestConfig);\n    const requestClient = createRequestClient(axiosInstance);\n    const keystoreClient = (KeystoreClient as KeystoreClient<KeystoreReturnType>)(axiosInstance, keystore);\n\n    return Object.assign(keystoreClient, requestClient);\n  };\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { AddressResponse, AddressRequest } from './types/address';\nimport { getCreateAddressTipBody, getRemoveAddressTipBody, signEd25519PIN, signTipBody } from './utils/pin';\nimport { buildClient } from './utils/client';\n\n/**\n * All tokens withdrawal needs an address\n * Should create an address first, the address can be deleted, can't be updated.\n * If the address belongs to another mixin user, the withdrawal fee will be free.\n * tag or memo can be blank.\n * Detail: https://developers.mixin.one/docs/api/withdrawal/address-add\n */\nexport const AddressKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => ({\n  /** Get an address by addressID */\n  fetch: (addressID: string): Promise<AddressResponse> => axiosInstance.get<unknown, AddressResponse>(`/addresses/${addressID}`),\n\n  /** Get a list of withdrawal addresses for the given asset */\n  fetchList: (assetID: string): Promise<AddressResponse[]> => axiosInstance.get<unknown, AddressResponse[]>(`/assets/${assetID}/addresses`),\n\n  /** Create a new withdrawal address */\n  create: (pin: string, params: AddressRequest): Promise<AddressResponse> => {\n    const msg = getCreateAddressTipBody(params.asset_id, params.destination, params.tag ?? '', params.label);\n    const signedTipPin = signTipBody(pin, msg);\n    const encrypted = signEd25519PIN(signedTipPin, keystore);\n    return axiosInstance.post<unknown, AddressResponse>('/addresses', { ...params, pin: encrypted });\n  },\n\n  /** Delete a specified address by addressID */\n  delete: (pin: string, addressID: string): Promise<any> => {\n    const msg = getRemoveAddressTipBody(addressID);\n    const signedTipPin = signTipBody(pin, msg);\n    const encrypted = signEd25519PIN(signedTipPin, keystore);\n    return axiosInstance.post<unknown, any>(`/addresses/${addressID}/delete`, { pin: encrypted });\n  },\n});\n\nexport const AddressClient = buildClient(AddressKeystoreClient);\n\nexport default AddressClient;\n","import { AxiosInstance } from 'axios';\nimport {\n  AppResponse,\n  AppPropertyResponse,\n  AppRequest,\n  AppSafeSessionRequest,\n  AppSafeRegistrationRequest,\n  AppSessionResponse,\n  AppRegistrationResponse,\n  AppSecretResponse,\n} from './types/app';\nimport { buildClient } from './utils/client';\n\n// TODO add app api for developer document\n/**\n * API for mixin users and official app\n * Notes:\n * * Some api only available for mixin official app\n * * Each Mixin user can only create two free apps\n * https://developers.mixin.one/\n */\nexport const AppKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get information of current user's a specific app */\n  fetch: (appID: string): Promise<AppResponse> => axiosInstance.get<unknown, AppResponse>(`/apps/${appID}`),\n\n  /**\n   * Get app list of current user\n   * Available for mixin official developer app only\n   */\n  fetchList: (): Promise<AppResponse[]> => axiosInstance.get<unknown, AppResponse[]>(`/apps`),\n\n  /**\n   * Get app number of current user and the price to buy new credit\n   * Available for mixin official developer app only\n   */\n  properties: (): Promise<AppPropertyResponse> => axiosInstance.get<unknown, AppPropertyResponse>(`/apps/property`),\n\n  /** Get user's app share list */\n  favorites: (userID: string): Promise<AppResponse[]> => axiosInstance.get<unknown, AppResponse[]>(`/users/${userID}/apps/favorite`),\n\n  /** Developer can create up to 2 free apps, or pay for more unlimited apps */\n  create: (params: AppRequest): Promise<AppResponse> => axiosInstance.post<unknown, AppResponse>(`/apps`, params),\n\n  /** Update app setting */\n  update: (appID: string, params: AppRequest): Promise<AppResponse> => axiosInstance.post<unknown, AppResponse>(`/apps/${appID}`, params),\n\n  /** Get a new app secret */\n  updateSecret: (appID: string): Promise<AppSecretResponse> => axiosInstance.post<unknown, AppSecretResponse>(`/apps/${appID}/secret`),\n\n  /**\n   * Get a new app session\n   * @param session_public_key: public key of ed25519 session keys\n   */\n  updateSafeSession: (appID: string, data: AppSafeSessionRequest): Promise<AppSessionResponse> =>\n    axiosInstance.post<unknown, AppSessionResponse>(`/safe/apps/${appID}/session`, data),\n\n  /**\n   * Register app to safe, the spend private key would be the same as the tip private key\n   * @param spend_public_key: hex public key of ed25519 tip/spend keys\n   * @param signature_base64: signature of the SHA256Hash of the app_id using ed25519 tip/spend private key\n   */\n  registerSafe: (appID: string, data: AppSafeRegistrationRequest): Promise<AppRegistrationResponse> =>\n    axiosInstance.post<unknown, AppRegistrationResponse>(`/safe/apps/${appID}/register`, data),\n\n  /**\n   * Add to your share list\n   * User can have up to 3 favorite apps\n   */\n  favorite: (appID: string): Promise<AppResponse[]> => axiosInstance.post<unknown, AppResponse[]>(`/apps/${appID}/favorite`),\n\n  /** Removing from your share list */\n  unfavorite: (appID: string): Promise<any> => axiosInstance.post<unknown, any>(`/apps/${appID}/unfavorite`),\n});\n\nexport const AppClient = buildClient(AppKeystoreClient);\n\nexport default AppClient;\n","import { AxiosInstance } from 'axios';\nimport { AssetResponse } from './types/asset';\nimport { SnapshotResponse } from './types/snapshot';\nimport { buildClient } from './utils/client';\n\n/**\n * Get personal information about asset.\n * Notes:\n * * Get /assets may not have a deposit address, if you want a deposit address,\n * * should request /assets/:asset_id first.\n * https://developers.mixin.one/docs/api/assets/assets\n */\nexport const AssetKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the specified asset of current user, the ASSETS:READ permission is required */\n  fetch: (assetID: string): Promise<AssetResponse> => axiosInstance.get<unknown, AssetResponse>(`/assets/${assetID}`),\n\n  /** Get the asset list of current user */\n  fetchList: (): Promise<AssetResponse[]> => axiosInstance.get<unknown, AssetResponse[]>('/assets'),\n\n  /** Get specific asset's snapshots of current user */\n  snapshots: (assetID: string): Promise<SnapshotResponse[]> => axiosInstance.get<unknown, SnapshotResponse[]>(`/assets/${assetID}/snapshots`),\n});\n\nexport const AssetClient = buildClient(AssetKeystoreClient);\n\nexport default AssetClient;\n","import axios, { AxiosInstance } from 'axios';\nimport { AttachmentResponse } from './types/attachment';\nimport { buildClient } from './utils/client';\n\nexport const AttachmentKeystoreClient = (axiosInstance: AxiosInstance) => {\n  const createAttachment = (): Promise<AttachmentResponse> => axiosInstance.post<unknown, AttachmentResponse>(`/attachments`);\n\n  const uploadAttachmentTo = (uploadURL: string, file: File): Promise<any> =>\n    axios.create()({\n      url: uploadURL,\n      method: 'PUT',\n      data: file,\n      headers: {\n        'x-amz-acl': 'public-read',\n        'Content-Type': 'application/octet-stream',\n      },\n      maxContentLength: 2147483648,\n    });\n\n  return {\n    /** Get a specific attachment by attachmentID */\n    fetch: (attachmentID: string): Promise<AttachmentResponse> => axiosInstance.get<unknown, AttachmentResponse>(`/attachments/${attachmentID}`),\n\n    /** Create a new attachment before upload it */\n    create: createAttachment,\n\n    /** Upload a attachment */\n    upload: async (file: File) => {\n      const { view_url, upload_url, attachment_id } = await createAttachment();\n      if (!upload_url) throw new Error('No upload URL');\n\n      await uploadAttachmentTo(upload_url, file);\n      return { view_url, attachment_id };\n    },\n  };\n};\n\nexport const AttachmentClient = buildClient(AttachmentKeystoreClient);\n\nexport default AttachmentClient;\n","import bs58 from 'bs58';\nimport { stringify, parse } from 'uuid';\nimport { MixAddress } from '../types';\nimport { newHash } from './uniq';\n\nexport const MainAddressPrefix = 'XIN';\nexport const MixAddressPrefix = 'MIX';\nexport const MixAddressVersion = 2;\n\nexport const getPublicFromMainnetAddress = (address: string) => {\n  try {\n    if (!address.startsWith(MainAddressPrefix)) return undefined;\n\n    const data = bs58.decode(address.slice(3));\n    if (data.length !== 68) return undefined;\n\n    const payload = data.subarray(0, data.length - 4);\n    const msg = Buffer.concat([Buffer.from(MainAddressPrefix), Buffer.from(payload)]);\n    const checksum = newHash(msg);\n    if (!checksum.subarray(0, 4).equals(data.subarray(64))) return undefined;\n    return Buffer.from(payload);\n  } catch {\n    return undefined;\n  }\n};\n\nexport const getMainnetAddressFromPublic = (pubKey: Buffer) => {\n  const msg = Buffer.concat([Buffer.from(MainAddressPrefix), pubKey]);\n  const checksum = newHash(msg);\n  const data = Buffer.concat([pubKey, checksum.subarray(0, 4)]);\n  return `${MainAddressPrefix}${bs58.encode(data)}`;\n};\n\nexport const parseMixAddress = (address: string): MixAddress | undefined => {\n  try {\n    if (!address.startsWith(MixAddressPrefix)) return undefined;\n\n    const data = bs58.decode(address.slice(3));\n    if (data.length < 3 + 16 + 4) {\n      return undefined;\n    }\n\n    const payload = data.subarray(0, data.length - 4);\n    const msg = Buffer.concat([Buffer.from(MixAddressPrefix), Buffer.from(payload)]);\n    const checksum = newHash(msg);\n    if (!checksum.subarray(0, 4).equals(Buffer.from(data.subarray(data.length - 4)))) return undefined;\n\n    const version = data.at(0);\n    const threshold = data.at(1);\n    const total = data.at(2);\n    if (version !== 2) return undefined;\n    if (!threshold || !total || threshold === 0 || threshold > total || total > 64) return undefined;\n\n    const memberData = payload.subarray(3);\n    const members: string[] = [];\n    if (memberData.length === total * 16) {\n      for (let i = 0; i < total; i++) {\n        const id = stringify(memberData, 16 * i);\n        members.push(id);\n      }\n      return {\n        members,\n        threshold,\n      };\n    }\n    if (memberData.length === total * 64) {\n      for (let i = 0; i < total; i++) {\n        const pub = memberData.subarray(64 * i, 64 * (i + 1));\n        const addr = getMainnetAddressFromPublic(Buffer.from(pub));\n        members.push(addr);\n      }\n      return {\n        members,\n        threshold,\n      };\n    }\n\n    return undefined;\n  } catch {\n    return undefined;\n  }\n};\n\nexport const buildMixAddress = (ma: MixAddress): string => {\n  if (ma.members.length > 255) {\n    throw new Error(`invalid members length: ${ma.members.length}`);\n  }\n  if (ma.threshold === 0 || ma.threshold > ma.members.length) {\n    throw new Error(`invalid threshold: ${ma.threshold}`);\n  }\n\n  const prefix = Buffer.concat([Buffer.from([MixAddressVersion]), Buffer.from([ma.threshold]), Buffer.from([ma.members.length])]);\n\n  let type = '';\n  const memberData: Buffer[] = [];\n  ma.members.forEach(addr => {\n    if (addr.startsWith(MainAddressPrefix)) {\n      if (!type) type = 'xin';\n      if (type !== 'xin') throw new Error(`inconsistent address type`);\n      const pub = getPublicFromMainnetAddress(addr);\n      if (!pub) throw new Error(`invalid mainnet address: ${addr}`);\n      memberData.push(pub);\n    } else {\n      if (!type) type = 'uuid';\n      if (type !== 'uuid') throw new Error(`inconsistent address type`);\n      const id = parse(addr);\n      if (!id) throw new Error(`invalid mainnet address: ${addr}`);\n      memberData.push(Buffer.from(Uint8Array.from(id)));\n    }\n  });\n\n  const msg = Buffer.concat([Buffer.from(MixAddressPrefix), prefix, ...memberData]);\n  const checksum = newHash(msg);\n  const data = Buffer.concat([prefix, ...memberData, checksum.subarray(0, 4)]);\n  return `${MixAddressPrefix}${bs58.encode(data)}`;\n};\n","import { Input, Output } from '../types';\nimport { magic } from './encoder';\nimport { formatUnits } from './amount';\n\nexport const bytesToInterger = (b: Buffer) => {\n  let x = 0;\n  for (let i = 0; i < b.byteLength; i++) {\n    const byte = b.at(i);\n    x *= 0x100;\n    if (byte) x += byte;\n  }\n  return x;\n};\n\nexport class Decoder {\n  buf: Buffer;\n\n  constructor(buf: Buffer) {\n    this.buf = buf;\n  }\n\n  subarray(start: number, end?: number) {\n    return this.buf.subarray(start, end);\n  }\n\n  read(offset: number) {\n    this.buf = this.buf.subarray(offset);\n  }\n\n  readByte() {\n    const value = this.buf.readUint8();\n    this.read(1);\n    return value;\n  }\n\n  readBytes() {\n    const len = this.readByte();\n    const value = this.buf.subarray(0, len).toString('hex');\n    this.read(len);\n    return value;\n  }\n\n  readInt() {\n    const value = this.buf.readUInt16BE();\n    this.read(2);\n    return value;\n  }\n\n  readUint32() {\n    const value = this.buf.readUInt32BE();\n    this.read(4);\n    return value;\n  }\n\n  readUInt64() {\n    const value = this.buf.readBigUInt64BE();\n    this.read(8);\n    return value;\n  }\n\n  readUUID() {\n    const value = this.buf.subarray(0, 16);\n    this.read(16);\n    return value;\n  }\n\n  readInteger() {\n    const len = this.readInt();\n    const value = this.buf.subarray(0, len);\n    this.read(len);\n    return bytesToInterger(value);\n  }\n\n  decodeInput() {\n    const hash = this.subarray(0, 32).toString('hex');\n    this.read(32);\n    const index = this.readInt();\n    const input: Input = {\n      hash,\n      index,\n    };\n\n    const lenGenesis = this.readInt();\n    if (lenGenesis > 0) {\n      input.genesis = this.buf.subarray(0, lenGenesis).toString('hex');\n      this.read(lenGenesis);\n    }\n\n    const depositPrefix = this.subarray(0, 2);\n    this.read(2);\n    if (depositPrefix.equals(magic)) {\n      const chain = this.subarray(0, 32).toString('hex');\n      this.read(32);\n      const asset = this.readBytes();\n      const transaction = this.readBytes();\n      const index = this.readUInt64();\n      const amount = this.readInteger();\n\n      input.deposit = {\n        chain,\n        asset,\n        transaction,\n        index,\n        amount,\n      };\n    }\n\n    const mintPrefix = this.subarray(0, 2);\n    this.read(2);\n    if (mintPrefix.equals(magic)) {\n      const group = this.readBytes();\n      const batch = this.readUInt64();\n      const amount = this.readInteger();\n\n      input.mint = {\n        group,\n        batch,\n        amount,\n      };\n    }\n\n    return input;\n  }\n\n  decodeOutput() {\n    const t = this.subarray(0, 2);\n    this.read(2);\n    if (t.at(0) !== 0) throw new Error(`invalid output type ${t.at(0)}`);\n    const type = t.at(1);\n    const amount = this.readInteger();\n\n    const lenKey = this.readInt();\n    const keys = [];\n    for (let i = 0; i < lenKey; i++) {\n      const key = this.subarray(0, 32).toString('hex');\n      this.read(32);\n      keys.push(key);\n    }\n    const mask = this.subarray(0, 32).toString('hex');\n    this.read(32);\n    const lenScript = this.readInt();\n    const script = this.buf.subarray(0, lenScript).toString('hex');\n    this.read(lenScript);\n\n    const output: Output = {\n      type,\n      amount: formatUnits(amount, 8).toString(),\n      keys,\n      mask,\n      script,\n    };\n\n    const prefix = this.subarray(0, 2);\n    this.read(2);\n    if (prefix.equals(magic)) {\n      const address = this.readBytes();\n      const tag = this.readBytes();\n      output.withdrawal = {\n        address,\n        tag,\n      };\n    }\n\n    return output;\n  }\n\n  decodeSignature() {\n    const len = this.readInt();\n    const sigs: Record<number, string> = {};\n    for (let i = 0; i < len; i++) {\n      const index = this.readInt();\n      const sig = this.buf.subarray(0, 64).toString('hex');\n      sigs[index] = sig;\n    }\n    return sigs;\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { MultisigTransaction, UtxoOutput } from '../types';\nimport { Encoder, magic } from './encoder';\n\nexport const TxVersion = 0x02;\n\nexport const getTotalBalanceFromOutputs = (outputs: UtxoOutput[]) => outputs.reduce((prev, cur) => prev.plus(BigNumber(cur.amount)), BigNumber('0'));\n\nexport const encodeScript = (threshold: number) => {\n  let s = threshold.toString(16);\n  if (s.length === 1) s = `0${s}`;\n  if (s.length > 2) throw new Error(`INVALID THRESHOLD ${threshold}`);\n\n  return `fffe${s}`;\n};\n\nexport const encodeTx = (tx: MultisigTransaction) => {\n  const enc = new Encoder(Buffer.from([]));\n\n  enc.write(magic);\n  enc.write(Buffer.from([0x00, tx.version]));\n  enc.write(Buffer.from(tx.asset, 'hex'));\n\n  enc.writeInt(tx.inputs.length);\n  tx.inputs.forEach(input => {\n    enc.encodeInput(input);\n  });\n\n  enc.writeInt(tx.outputs.length);\n  tx.outputs.forEach(output => {\n    enc.encodeOutput(output);\n  });\n\n  const extra = Buffer.from(tx.extra);\n  enc.writeInt(extra.byteLength);\n  enc.write(extra);\n\n  enc.writeInt(0);\n  enc.write(Buffer.from([]));\n\n  return enc.buf.toString('hex');\n};\n\n/**\n * Generate raw for multi-signature transaction.\n * The total amount of input utxos should be equal to the total amount of output utxos.\n * */\nexport const buildMultiSigsTransaction = (transaction: MultisigTransaction) => {\n  if (transaction.version !== TxVersion) throw new Error('Invalid Version!');\n\n  const tx = {\n    ...transaction,\n    outputs: transaction.outputs.filter(output => !!output.mask),\n  };\n  return encodeTx(tx);\n};\n","import forge from 'node-forge';\nimport { parse as UUIDParse, stringify } from 'uuid';\nimport type { CollectibleOutputsResponse, NFOMemo } from '../types';\nimport type { KeystoreClientReturnType } from '../mixin-client';\nimport { buildMultiSigsTransaction, encodeScript } from './multisigs';\nimport { Encoder, integerToBytes } from './encoder';\nimport { Decoder } from './decoder';\n\nconst Prefix = 'NFO';\nconst Version = 0x00;\n\nexport const DefaultChain = '43d61dcd-e413-450d-80b8-101d5e903357';\nexport const DefaultClass = '3c8c161a18ae2c8b14fda1216fff7da88c419b5d';\nexport const DefaultNftAssetId = '1700941284a95f31b25ec8c546008f208f88eee4419ccdcdbe6e3195e60128ca';\n\nexport function buildTokenId(collection_id: string, token: number): string {\n  const tokenStr = Buffer.from(integerToBytes(token)).toString('hex');\n  const msg = DefaultChain.replaceAll('-', '') + DefaultClass + collection_id.replaceAll('-', '') + tokenStr;\n  const md5 = forge.md.md5.create();\n  md5.update(Buffer.from(msg, 'hex').toString('binary'));\n  const bytes = Buffer.from(md5.digest().bytes(), 'binary');\n  bytes[6] = (bytes[6] & 0x0f) | 0x30;\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\n  return stringify(bytes);\n}\n\n/**\n * Content must be hex string without '0x'\n * */\nexport function buildCollectibleMemo(content: string, collection_id?: string, token_id?: number): string {\n  const encoder = new Encoder(Buffer.from(Prefix, 'utf8'));\n  encoder.write(Buffer.from([Version]));\n\n  if (collection_id && token_id) {\n    encoder.write(Buffer.from([1]));\n    encoder.writeUint64(BigInt(1));\n    encoder.writeUUID(DefaultChain);\n\n    encoder.writeSlice(Buffer.from(DefaultClass, 'hex'));\n    encoder.writeSlice(Buffer.from(UUIDParse(collection_id) as Buffer));\n    encoder.writeSlice(Buffer.from(integerToBytes(token_id)));\n  } else {\n    encoder.write(Buffer.from([0]));\n  }\n\n  encoder.writeSlice(Buffer.from(content, 'hex'));\n  return encoder.buf.toString('hex');\n}\n\nexport const decodeNfoMemo = (hexMemo: string) => {\n  const memo = Buffer.from(hexMemo, 'hex');\n  if (memo.byteLength < 4) throw Error(`Invalid NFO memo length: ${memo.byteLength}`);\n  const prefix = memo.subarray(0, 3).toString();\n  if (prefix !== Prefix) throw Error(`Invalid NFO memo prefix: ${prefix}`);\n  const version = memo.readUint8(3);\n  if (version !== Version) throw Error(`Invalid NFO memo version: ${version}`);\n\n  const nm: NFOMemo = {\n    prefix: Prefix,\n    version: Version,\n    extra: '',\n  };\n  const decoder = new Decoder(memo.subarray(4));\n  const hint = decoder.readByte();\n\n  if (hint === 1) {\n    nm.mask = Number(decoder.readUInt64());\n    if (nm.mask !== 1) throw Error(`Invalid NFO memo mask: ${nm.mask}`);\n\n    nm.chain = stringify(decoder.readUUID());\n    if (nm.chain !== DefaultChain) throw Error(`Invalid NFO memo chain: ${nm.chain}`);\n\n    nm.class = decoder.readBytes();\n    if (nm.class !== DefaultClass) throw Error(`Invalid NFO memo chain: ${nm.class}`);\n\n    const collection = Buffer.from(decoder.readBytes(), 'hex');\n    nm.collection = stringify(collection);\n\n    nm.token = parseInt(decoder.readBytes(), 16);\n  }\n\n  nm.extra = Buffer.from(decoder.readBytes(), 'hex').toString();\n  return nm;\n};\n\nexport const buildNfoTransferRequest = async (client: KeystoreClientReturnType, utxo: CollectibleOutputsResponse, receivers: string[], threshold: number, content = '') => {\n  const keys = await client.transfer.outputs([\n    {\n      receivers,\n      index: 0,\n    },\n  ]);\n\n  const raw = buildMultiSigsTransaction({\n    version: 2,\n    asset: DefaultNftAssetId,\n    inputs: [\n      {\n        hash: utxo.transaction_hash,\n        index: utxo.output_index,\n      },\n    ],\n    outputs: [\n      {\n        amount: '1',\n        mask: keys[0].mask,\n        keys: keys[0].keys,\n        script: encodeScript(threshold),\n      },\n    ],\n    extra: buildCollectibleMemo(content),\n  });\n  return client.collection.request('sign', raw);\n};\n","import { sha256Hash } from './uniq';\n\nconst TIPSequencerRegister = 'SEQUENCER:REGISTER:';\n\nexport const TIPBodyForSequencerRegister = (user_id: string, pubKey: string) => tipBody(`${TIPSequencerRegister}${user_id}${pubKey}`);\n\nexport const tipBody = (s: string) => sha256Hash(Buffer.from(s));\n","import forge from 'node-forge';\nimport qs from 'qs';\nimport { validate, v4 } from 'uuid';\nimport BigNumber from 'bignumber.js';\nimport { Input, Output, GhostKey, GhostKeyRequest, PaymentParams, SafeTransaction, SafeTransactionRecipient, SafeUtxoOutput } from '../types';\nimport { Encoder, magic } from './encoder';\nimport { Decoder } from './decoder';\nimport { base64RawURLEncode } from './base64';\nimport { TIPBodyForSequencerRegister } from './tip';\nimport { getPublicFromMainnetAddress, buildMixAddress, parseMixAddress } from './address';\nimport { encodeScript } from './multisigs';\nimport { blake3Hash, newHash, sha512Hash } from './uniq';\nimport { edwards25519 as ed } from './ed25519';\n\nexport const TxVersionHashSignature = 0x05;\nexport const OutputTypeScript = 0x00;\nexport const OutputTypeWithdrawalSubmit = 0xa1;\n\n/**\n * Build Payment Uri on https://mixin.one\n * Destination can be set with\n *   1. uuid: uuid of the Mixin user or bot\n *   2. mainnetAddress: Mixin mainnet address started with \"XIN\"\n *   3. mixAddress: address encoded with members and threshold and started with \"MIX\"\n *   4. members and threshold: multisigs members' uuid or mainnet address, and threshold\n */\nexport const buildMixinOneSafePaymentUri = (params: PaymentParams) => {\n  let address = '';\n  if (params.uuid && validate(params.uuid)) address = params.uuid;\n  else if (params.mainnetAddress && getPublicFromMainnetAddress(params.mainnetAddress)) address = params.mainnetAddress;\n  else if (params.mixAddress && parseMixAddress(params.mixAddress)) address = params.mixAddress;\n  else if (params.members && params.threshold) {\n    address = buildMixAddress({\n      members: params.members,\n      threshold: params.threshold,\n    });\n  } else throw new Error('fail to get payment destination address');\n\n  const baseUrl = `https://mixin.one/pay/${address}`;\n  const p = {\n    asset: params.asset,\n    amount: params.amount,\n    memo: params.memo,\n    trace: params.trace ?? v4(),\n    return_to: params.returnTo && encodeURIComponent(params.returnTo),\n  };\n  const query = qs.stringify(p);\n  return `${baseUrl}?${query}`;\n};\n\nexport const signSafeRegistration = (user_id: string, tipPin: string, privateKey: Buffer) => {\n  const public_key = forge.pki.ed25519.publicKeyFromPrivateKey({ privateKey }).toString('hex');\n\n  const hash = newHash(Buffer.from(user_id));\n  let signData = forge.pki.ed25519.sign({\n    message: hash,\n    privateKey,\n  });\n  const signature = base64RawURLEncode(signData);\n\n  const tipBody = TIPBodyForSequencerRegister(user_id, public_key);\n  signData = forge.pki.ed25519.sign({\n    message: tipBody,\n    privateKey: Buffer.from(tipPin, 'hex'),\n  });\n\n  return {\n    public_key,\n    signature,\n    pin_base64: signData.toString('hex'),\n  };\n};\n\nexport const deriveGhostPublicKey = (r: Buffer, A: Buffer, B: Buffer, index: number) => {\n  const x = ed.hashScalar(ed.keyMultPubPriv(A, r), index);\n  const p1 = ed.newPoint(B);\n  const p2 = ed.scalarBaseMultToPoint(x);\n  const p4 = p1.add(p2);\n  // @ts-ignore\n  return Buffer.from(p4.toRawBytes());\n};\n\nexport const getMainnetAddressGhostKey = (recipient: GhostKeyRequest, hexSeed = '') => {\n  if (recipient.receivers.length === 0) return undefined;\n  if (hexSeed && hexSeed.length !== 128) return undefined;\n\n  const publics = recipient.receivers.map(d => getPublicFromMainnetAddress(d));\n  if (!publics.every(p => !!p)) return undefined;\n\n  const seed = hexSeed ? Buffer.from(hexSeed, 'hex') : Buffer.from(forge.random.getBytesSync(64), 'binary');\n  const r = Buffer.from(ed.scalar.toBytes(ed.setUniformBytes(seed)));\n  const keys = publics.map(addressPubic => {\n    const spendKey = addressPubic!.subarray(0, 32);\n    const viewKey = addressPubic!.subarray(32, 64);\n    const k = deriveGhostPublicKey(r, viewKey, spendKey, recipient.index);\n    return k.toString('hex');\n  });\n  return {\n    mask: ed.publicFromPrivate(r).toString('hex'),\n    keys,\n  };\n};\n\nexport const buildSafeTransactionRecipient = (members: string[], threshold: number, amount: string): SafeTransactionRecipient => ({\n  members,\n  threshold,\n  amount,\n  mixAddress: buildMixAddress({ members, threshold }),\n});\n\nexport const getUnspentOutputsForRecipients = (outputs: SafeUtxoOutput[], rs: SafeTransactionRecipient[]) => {\n  const totalOutput = rs.reduce((prev, cur) => prev.plus(BigNumber(cur.amount)), BigNumber('0'));\n\n  let totalInput = BigNumber('0');\n  for (let i = 0; i < outputs.length; i++) {\n    const o = outputs[i];\n    if (o.state !== 'unspent') continue;\n    totalInput = totalInput.plus(BigNumber(o.amount));\n    if (totalInput.minus(totalOutput).isNegative()) continue;\n\n    return {\n      utxos: outputs.slice(0, i + 1),\n      change: totalInput.minus(totalOutput),\n    };\n  }\n  throw new Error('insufficient total input outputs');\n};\n\nexport const encodeSafeTransaction = (tx: SafeTransaction, sigs: Record<number, string>[] = []) => {\n  const enc = new Encoder(Buffer.from([]));\n\n  enc.write(magic);\n  enc.write(Buffer.from([0x00, tx.version]));\n  enc.write(Buffer.from(tx.asset, 'hex'));\n\n  enc.writeInt(tx.inputs.length);\n  tx.inputs.forEach(input => {\n    enc.encodeInput(input);\n  });\n\n  enc.writeInt(tx.outputs.length);\n  tx.outputs.forEach(output => {\n    enc.encodeOutput(output);\n  });\n\n  enc.writeInt(tx.references.length);\n  tx.references.forEach(r => {\n    enc.write(Buffer.from(r, 'hex'));\n  });\n\n  const extra = Buffer.from(tx.extra);\n  enc.writeUint32(extra.byteLength);\n  enc.write(extra);\n\n  enc.writeInt(sigs.length);\n  sigs.forEach(s => {\n    enc.encodeSignature(s);\n  });\n\n  return enc.buf.toString('hex');\n};\n\nexport const decodeSafeTransaction = (raw: string): SafeTransaction => {\n  const dec = new Decoder(Buffer.from(raw, 'hex'));\n\n  const prefix = dec.subarray(0, 2);\n  if (!prefix.equals(magic)) throw new Error('invalid magic');\n  dec.read(3);\n\n  const version = dec.readByte();\n  if (version !== TxVersionHashSignature) throw new Error('invalid version');\n\n  const asset = dec.subarray(0, 32).toString('hex');\n  dec.read(32);\n\n  const lenInput = dec.readInt();\n  const inputs = [];\n  for (let i = 0; i < lenInput; i++) {\n    inputs.push(dec.decodeInput());\n  }\n\n  const lenOutput = dec.readInt();\n  const outputs = [];\n  for (let i = 0; i < lenOutput; i++) {\n    outputs.push(dec.decodeOutput());\n  }\n\n  const lenRefs = dec.readInt();\n  const references = [];\n  for (let i = 0; i < lenRefs; i++) {\n    const hash = dec.subarray(0, 32).toString('hex');\n    dec.read(32);\n    references.push(hash);\n  }\n\n  const lenExtra = dec.readUint32();\n  const extra = dec.subarray(0, lenExtra).toString();\n  dec.read(lenExtra);\n\n  const lenSigs = dec.readInt();\n  const signatureMap = [];\n  for (let i = 0; i < lenSigs; i++) {\n    signatureMap.push(dec.decodeSignature());\n  }\n\n  return {\n    version,\n    asset,\n    extra,\n    inputs,\n    outputs,\n    references,\n    signatureMap,\n  };\n};\n\nexport const buildSafeTransaction = (utxos: SafeUtxoOutput[], rs: SafeTransactionRecipient[], gs: GhostKey[], extra: string, references: string[] = []) => {\n  if (utxos.length === 0) throw new Error('empty inputs');\n  if (Buffer.from(extra).byteLength > 512) throw new Error('extra data is too long');\n\n  let asset = '';\n  const inputs: Input[] = [];\n  utxos.forEach(o => {\n    if (!asset) asset = o.asset;\n    if (o.asset !== asset) throw new Error('inconsistent asset in outputs');\n    inputs.push({ hash: o.transaction_hash, index: o.output_index });\n  });\n\n  const outputs: Output[] = [];\n  for (let i = 0; i < rs.length; i++) {\n    const r = rs[i];\n    if ('destination' in r) {\n      outputs.push({\n        type: OutputTypeWithdrawalSubmit,\n        amount: r.amount,\n        withdrawal: {\n          address: r.destination,\n          tag: r.tag ?? '',\n        },\n        keys: [],\n      });\n      continue;\n    }\n\n    outputs.push({\n      type: OutputTypeScript,\n      amount: r.amount,\n      keys: gs[i].keys,\n      mask: gs[i].mask,\n      script: encodeScript(r.threshold),\n    });\n  }\n\n  return {\n    version: TxVersionHashSignature,\n    asset,\n    extra,\n    inputs,\n    outputs,\n    references,\n  };\n};\n\nexport const signSafeTransaction = (tx: SafeTransaction, views: string[], privateKey: string, index = 0) => {\n  const raw = encodeSafeTransaction(tx);\n  const msg = blake3Hash(Buffer.from(raw, 'hex'));\n\n  const spenty = sha512Hash(Buffer.from(privateKey.slice(0, 64), 'hex'));\n  const y = ed.setBytesWithClamping(spenty.subarray(0, 32));\n\n  const signaturesMap = [];\n  for (let i = 0; i < tx.inputs.length; i++) {\n    const viewBuffer = Buffer.from(views[i], 'hex');\n    const x = ed.setCanonicalBytes(viewBuffer);\n    const t = ed.scalar.add(x, y);\n    const key = Buffer.from(ed.scalar.toBytes(t));\n    const sig = ed.sign(msg, key);\n    const sigs: Record<number, string> = {};\n    sigs[index] = sig.toString('hex');\n    signaturesMap.push(sigs);\n  }\n\n  return encodeSafeTransaction(tx, signaturesMap);\n};\n","export const sleep = (n = 500) =>\n  new Promise<void>(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, n);\n  });\n","import WebSocket from 'ws';\nimport { gzip, ungzip } from 'pako';\nimport { MessageView, BlazeMessage, BlazeOptions } from '../types';\n\nexport const decodeMessage = (data: Uint8Array, options: BlazeOptions): MessageView => {\n  const t = ungzip(data, { to: 'string' });\n  const msgObj = JSON.parse(t);\n\n  if (options.parse && msgObj.data && msgObj.data.data) {\n    msgObj.data.data = Buffer.from(msgObj.data.data, 'base64').toString();\n\n    try {\n      msgObj.data.data = JSON.parse(msgObj.data.data);\n    } catch (e) {\n      // ignore error\n    }\n  }\n\n  return msgObj.data;\n};\n\nexport const sendRaw = (ws: WebSocket, message: BlazeMessage): Promise<boolean> =>\n  new Promise(resolve => {\n    const buffer = Buffer.from(JSON.stringify(message), 'utf-8');\n    const zipped = gzip(buffer);\n    if (ws.readyState === WebSocket.OPEN) {\n      const timer = setTimeout(() => {\n        resolve(false);\n      }, 5000);\n      const cb = () => {\n        clearTimeout(timer);\n        resolve(true);\n      };\n      ws.send(zipped, cb);\n      return;\n    }\n    resolve(false);\n  });\n","import WebSocket from 'ws';\nimport { v4 as uuid } from 'uuid';\nimport Keystore from './types/keystore';\nimport { BlazeHandler, BlazeOptions } from './types';\nimport { signAccessToken, decodeMessage, sendRaw } from './utils';\n\nexport function websocket(\n  keystore: Keystore | undefined,\n  url: string,\n  handler: BlazeHandler,\n  option: BlazeOptions = {\n    parse: false,\n    syncAck: false,\n  },\n): WebSocket {\n  const jwtToken = signAccessToken('GET', '/', '', uuid(), keystore) || '';\n  const headers = {\n    Authorization: `Bearer ${jwtToken}`,\n  };\n  const ws = new WebSocket(url, 'Mixin-Blaze-1', {\n    headers,\n    handshakeTimeout: 3000,\n  });\n\n  ws.onmessage = async event => {\n    const msg = decodeMessage(event.data as Uint8Array, option);\n    if (!msg) return;\n\n    if (msg.source === 'ACKNOWLEDGE_MESSAGE_RECEIPT' && handler.onAckReceipt) await handler.onAckReceipt(msg);\n    else if (msg.category === 'SYSTEM_CONVERSATION' && handler.onConversation) await handler.onConversation(msg);\n    else if (msg.category === 'SYSTEM_ACCOUNT_SNAPSHOT' && handler.onTransfer) await handler.onTransfer(msg);\n    else await handler.onMessage(msg);\n\n    if (option.syncAck) {\n      const message = {\n        id: uuid(),\n        action: 'ACKNOWLEDGE_MESSAGE_RECEIPT',\n        params: { message_id: msg.message_id, status: 'READ' },\n      };\n      await sendRaw(ws, message);\n    }\n  };\n\n  return ws;\n}\n","import WebSocket from 'ws';\nimport { v4 as uuid } from 'uuid';\nimport Keystore from './types/keystore';\nimport { BlazeOptions, BlazeHandler } from './types';\nimport { websocket } from './ws';\nimport { sendRaw } from './utils';\n\nconst wsHostURL = ['wss://mixin-blaze.zeromesh.net', 'wss://blaze.mixin.one/'];\n\nexport const BlazeKeystoreClient = (keystore: Keystore | undefined, wsOptions: BlazeOptions | undefined) => {\n  let url = wsHostURL[0];\n  let ws: WebSocket | undefined;\n  let pingTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  const terminate = () => {\n    clearTimeout(Number(pingTimeout));\n    if (!ws) return;\n    ws.terminate();\n    ws = undefined;\n  };\n\n  const heartbeat = () => {\n    clearTimeout(Number(pingTimeout));\n    pingTimeout = setTimeout(terminate, 1000 * 30);\n  };\n\n  const loopBlaze = (h: BlazeHandler) => {\n    if (ws) return;\n    ws = websocket(keystore, url, h, wsOptions);\n    heartbeat();\n\n    ws.on('ping', heartbeat);\n\n    ws.onopen = () => {\n      heartbeat();\n      if (ws) sendRaw(ws, { id: uuid(), action: 'LIST_PENDING_MESSAGES' });\n    };\n\n    ws.onclose = () => {\n      terminate();\n      loopBlaze(h);\n    };\n\n    ws.onerror = e => {\n      if (e.message !== 'Opening handshake has timed out') return;\n      url = url === wsHostURL[0] ? wsHostURL[1] : wsHostURL[0];\n      terminate();\n    };\n  };\n\n  return {\n    loop: (h: BlazeHandler) => {\n      if (ws) throw new Error('Blaze is already running');\n      if (!h.onMessage) throw new Error('OnMessage not set');\n      loopBlaze(h);\n    },\n    stopLoop: () => {\n      terminate();\n    },\n    getWebSocket: () => ws,\n  };\n};\n\nexport const BlazeClient = (keystore: Keystore, wsOptions?: BlazeOptions) => ({ blaze: BlazeKeystoreClient(keystore, wsOptions) });\n\nexport default BlazeClient;\n","import { AxiosInstance } from 'axios';\nimport { CircleResponse, CircleRequest, CircleConversationResponse } from './types/circle';\nimport { buildClient } from './utils/client';\n\n/**\n * Circle is used to classify conversations\n * User can have no more than 64 circles\n * Docs: https://developers.mixin.one/docs/api/circles/list\n */\nexport const CircleKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the details of a certain circle */\n  fetch: (circleID: string): Promise<CircleResponse> => axiosInstance.get<unknown, CircleResponse>(`/circles/${circleID}`),\n\n  /** Get all circles of a user */\n  fetchList: (): Promise<CircleResponse[]> => axiosInstance.get<unknown, CircleResponse[]>('/circles'),\n\n  /** Get all the conversations in a circle of a user */\n  conversations: (circleID: string, params: CircleRequest): Promise<CircleConversationResponse[]> =>\n    axiosInstance.get<unknown, CircleConversationResponse[]>(`/circles/${circleID}/conversations`, { params }),\n\n  /** Create a circle */\n  create: (name: string): Promise<CircleResponse> => axiosInstance.post<unknown, CircleResponse>('/circles', { name }),\n\n  /** Modify the circle name */\n  update: (circleID: string, name: string): Promise<CircleResponse> => axiosInstance.post<unknown, CircleResponse>(`/circles/${circleID}`, { name }),\n\n  /** Delete a circle */\n  delete: (circleID: string): Promise<any> => axiosInstance.post<unknown, any>(`/circles/${circleID}/delete`),\n\n  /** Add the user to  a circle */\n  addUser: (userID: string, circleID: string): Promise<CircleResponse[]> => axiosInstance.post<unknown, CircleResponse[]>(`/users/${userID}/circles`, { circleID, action: 'ADD' }),\n\n  /** Remove the user from a circle */\n  removeUser: (userID: string, circleID: string): Promise<CircleResponse[]> =>\n    axiosInstance.post<unknown, CircleResponse[]>(`/users/${userID}/circles`, { circleID, action: 'REMOVE' }),\n\n  /** Add the group from a certain circle */\n  addConversation: (conversationID: string, circleID: string): Promise<CircleResponse[]> =>\n    axiosInstance.post<unknown, CircleResponse[]>(`/conversations/${conversationID}/circles`, { circleID, action: 'ADD' }),\n\n  /** Remove the group from a certain circle */\n  removeConversation: (conversation_id: string, circleID: string): Promise<CircleResponse[]> =>\n    axiosInstance.post<unknown, CircleResponse[]>(`/conversations/${conversation_id}/circles`, { circleID, action: 'REMOVE' }),\n});\n\nexport const CircleClient = buildClient(CircleKeystoreClient);\n\nexport default CircleClient;\n","import { AxiosInstance } from 'axios';\nimport { CodeResponse } from './types/code';\nimport { buildClient } from './utils/client';\n\n/**\n * Some information in Mixin is non-public, through codes/:id you can share it.\n * It also facilitates privacy protection\n */\nexport const CodeKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  fetch: (codeID: string): Promise<CodeResponse> => axiosInstance.get<unknown, CodeResponse>(`/codes/${codeID}`),\n});\n\nexport const CodeClient = buildClient(CodeKeystoreClient);\n\nexport default CodeClient;\n","import type { AxiosInstance } from 'axios';\nimport type Keystore from './types/keystore';\nimport type { MultisigInitAction } from './types/multisig';\nimport type {\n  CollectibleRequestAction,\n  CollectibleResponse,\n  CollectionResponse,\n  CollectibleOutputsRequest,\n  CollectibleOutputsResponse,\n  CollectibleTransactionResponse,\n} from './types/collectible';\nimport { hashMembers, signEd25519PIN, buildClient } from './utils';\n\nexport const MintMinimumCost = '0.001';\n\nexport const GroupMembers = [\n  '4b188942-9fb0-4b99-b4be-e741a06d1ebf',\n  'dd655520-c919-4349-822f-af92fabdbdf4',\n  '047061e6-496d-4c35-b06b-b0424a8a400d',\n  'acf65344-c778-41ee-bacb-eb546bacfb9f',\n  'a51006d0-146b-4b32-a2ce-7defbf0d7735',\n  'cf4abd9c-2cfa-4b5a-b1bd-e2b61a83fabd',\n  '50115496-7247-4e2c-857b-ec8680756bee',\n];\n\nexport const GroupThreshold = 5;\n\n/**\n * Users can use those APIs to manage their NFTs\n * Note:\n * * Before transferring a collectible, user should create a request first.\n * * only unsigned request can be canceled.\n * * only uncompleted sign transaction can be unlocked.\n * Docs: https://developers.mixin.one/docs/api/collectibles/request\n */\nexport const CollectibleKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const manageRequest = (pin: string, requestID: string, action: CollectibleRequestAction): Promise<CollectibleTransactionResponse> => {\n    const encrypted = signEd25519PIN(pin, keystore);\n    return axiosInstance.post<unknown, CollectibleTransactionResponse>(`/collectibles/requests/${requestID}/${action}`, { pin: encrypted });\n  };\n\n  const transfer = (action: MultisigInitAction, raw: string): Promise<CollectibleTransactionResponse> =>\n    axiosInstance.post<unknown, CollectibleTransactionResponse>('/collectibles/requests', { action, raw });\n\n  return {\n    /** Get the information of the collectible */\n    fetch: (tokenID: string): Promise<CollectibleResponse> => axiosInstance.get<unknown, CollectibleResponse>(`/collectibles/tokens/${tokenID}`),\n\n    /** Get the information of the collectible collection */\n    fetchCollection: (collectionID: string): Promise<CollectionResponse> => axiosInstance.get<unknown, CollectionResponse>(`/collectibles/collections/${collectionID}`),\n\n    /** Get collectibles outputs */\n    outputs: (params: CollectibleOutputsRequest): Promise<CollectibleOutputsResponse[]> => {\n      const hashedParams = {\n        ...params,\n        members: hashMembers(params.members),\n      };\n      return axiosInstance.get<unknown, CollectibleOutputsResponse[]>('/collectibles/outputs', { params: hashedParams });\n    },\n\n    /** @deprecated Use transfer() instead */\n    request: transfer,\n\n    /** Create a collectibles transfer request */\n    transfer,\n\n    /** Initiate or participate in signing */\n    sign: (pin: string, requestID: string) => manageRequest(pin, requestID, 'sign'),\n\n    /** Cancel my signature */\n    cancel: (pin: string, requestID: string) => manageRequest(pin, requestID, 'cancel'),\n\n    /** Cancel collectibles */\n    unlock: (pin: string, requestID: string) => manageRequest(pin, requestID, 'unlock'),\n  };\n};\n\nexport const CollectibleClient = buildClient(CollectibleKeystoreClient);\n\nexport default CollectibleClient;\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { ConversationRequest, ConversationResponse, ConversationAction, ParticipantRequest } from './types/conversation';\nimport { uniqueConversationID } from './utils/uniq';\nimport { buildClient } from './utils/client';\n\n/**\n * Create and manage a conversation\n * Notes:\n * * only owner and admin can add or remove participants, and rotate conversation code\n * * only owner can change the role of participants\n * * only owner and admin can setup disappear\n * * for group conversation, creator will be the owner and can't be changed.\n * Docs: https://developers.mixin.one/docs/api/conversations/read\n */\nexport const ConversationKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const createConversation = (params: ConversationRequest): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>('/conversations', params);\n\n  const managerConversation = (conversationID: string, action: ConversationAction, participant: ParticipantRequest[]): Promise<ConversationResponse> =>\n    axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/participants/${action}`, participant);\n\n  const createContactConversation = (userID: string): Promise<ConversationResponse> => {\n    if (!keystore) throw new Error('No Keystore Provided');\n    return createConversation({\n      category: 'CONTACT',\n      conversation_id: uniqueConversationID(keystore.app_id, userID),\n      participants: [{ user_id: userID }],\n    });\n  };\n\n  const muteConversation = (conversationID: string, duration: number): Promise<ConversationResponse> =>\n    axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/mute`, { duration });\n\n  return {\n    /** Get specific conversation information by conversationID */\n    fetch: (conversationID: string): Promise<ConversationResponse> => axiosInstance.get<unknown, ConversationResponse>(`/conversations/${conversationID}`),\n\n    /**\n     * Ensure the conversation is created\n     * when creating a new group or having a conversation with a user\n     * for the first time.\n     */\n    create: createConversation,\n\n    /** Create a conversation with a user for the first time */\n    createContact: createContactConversation,\n\n    /** Create a new group for the first time */\n    createGroup: (conversationID: string, name: string, participant: ParticipantRequest[]) =>\n      createConversation({\n        category: 'GROUP',\n        conversation_id: conversationID,\n        name,\n        participants: participant,\n      }),\n\n    /** Join a group by codeID */\n    joinGroup: (codeID: string): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${codeID}/join`),\n\n    /** Exit a group */\n    exitGroup: (conversationID: string): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/exit`),\n\n    /** Add/remove other participants or add/remove admin in a group */\n    updateParticipants: managerConversation,\n\n    /** Add users, if you are the owner or admin of this group conversation */\n    addParticipants: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'ADD',\n        userIDs.map(userID => ({ user_id: userID })),\n      ),\n\n    /** Remove users, if you are the owner or admin of this group conversation */\n    removeParticipants: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'REMOVE',\n        userIDs.map(userID => ({ user_id: userID })),\n      ),\n\n    /** Set admin privileges for a user, group owners Only */\n    setAdmin: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'ROLE',\n        userIDs.map(userID => ({ user_id: userID, role: 'ADMIN' })),\n      ),\n\n    /** Remove admin privileges for a user, group owners Only */\n    revokeAdmin: (conversationID: string, userIDs: string[]) =>\n      managerConversation(\n        conversationID,\n        'ROLE',\n        userIDs.map(userID => ({ user_id: userID, role: '' })),\n      ),\n\n    /** Reset invitation link and codeId */\n    resetGroupCode: (conversationID: string): Promise<ConversationResponse> => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/rotate`),\n\n    /** Update a group's title and announcement by conversationID */\n    updateGroupInfo: (conversationID: string, params: Pick<ConversationRequest, 'name' | 'announcement'>): Promise<ConversationResponse> =>\n      axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}`, params),\n\n    /** Mute contact for <duration> seconds */\n    mute: (conversationID: string, duration: number) => muteConversation(conversationID, duration),\n\n    /** Unmute contact */\n    unmute: (conversationID: string) => muteConversation(conversationID, 0),\n\n    /** Set the disappearing message expiration duration for group */\n    disappearDuration: (conversationID: string, duration: number) => axiosInstance.post<unknown, ConversationResponse>(`/conversations/${conversationID}/disappear`, { duration }),\n  };\n};\n\nexport const ConversationClient = buildClient(ConversationKeystoreClient);\n\nexport default ConversationClient;\n","import { AxiosInstance } from 'axios';\nimport { DepositRequest, ProxyRequest } from './types/external';\nimport { CheckAddressRequest, CheckAddressResponse, ExchangeRateResponse, ExternalTransactionResponse } from './types/network';\nimport { buildClient } from './utils/client';\n\nexport const ExternalKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /**\n   * Get the pending deposits\n   * Which confirmations is less then threshold\n   */\n  deposits: (params: DepositRequest): Promise<ExternalTransactionResponse[]> => axiosInstance.get<unknown, ExternalTransactionResponse[]>('/external/transactions', { params }),\n\n  /**\n   * Check if an address belongs to Mixin\n   */\n  checkAddress: (params: CheckAddressRequest): Promise<CheckAddressResponse> => axiosInstance.get<unknown, CheckAddressResponse>(`/external/addresses/check`, { params }),\n\n  /**\n   * GET the list of all fiat exchange rates based on US Dollar\n   */\n  exchangeRates: (): Promise<ExchangeRateResponse[]> => axiosInstance.get<unknown, ExchangeRateResponse[]>('/external/fiats'),\n\n  /**\n   * Submit a raw transaction to a random mainnet node\n   *   {\n   *     method: 'sendrawtransaction',\n   *     params: array of transaction hash\n   *   }\n   * */\n  proxy: (params: ProxyRequest): Promise<any> => axiosInstance.post<unknown, any>('/external/proxy', params),\n});\n\nexport const ExternalClient = buildClient(ExternalKeystoreClient);\n\nexport default ExternalClient;\n","import { AxiosInstance } from 'axios';\nimport { v4 as uuid } from 'uuid';\nimport Keystore from './types/keystore';\nimport {\n  AcknowledgementRequest,\n  AcknowledgementResponse,\n  MessageCategory,\n  MessageRequest,\n  StickerMessageRequest,\n  ImageMessageRequest,\n  AudioMessageRequest,\n  VideoMessageRequest,\n  ContactMessageRequest,\n  AppCardMessageRequest,\n  FileMessageRequest,\n  LiveMessageRequest,\n  LocationMessageRequest,\n  AppButtonMessageRequest,\n  TransferMessageRequest,\n  RecallMessageRequest,\n} from './types/message';\nimport { uniqueConversationID, base64RawURLEncode, buildClient } from './utils';\n\n/**\n * Methods to send messages\n * Note:\n * * To receive a list of messages from Mixin message service, you need to setup a websocket connection.\n *   After receiving the message via WebSocket, you need to acknowledge the message to Mixin message service,\n *   otherwise it will keep pushing the message.\n */\nexport const MessageKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const send = (message: MessageRequest) => axiosInstance.post<unknown, any>('/messages', [message]);\n\n  const sendMsg = async (recipientID: string, category: MessageCategory, data: any): Promise<MessageRequest> => {\n    if (!keystore) throw new Error('No Keystore Provided');\n    if (typeof data === 'object') data = JSON.stringify(data);\n\n    const messageRequest = {\n      category,\n      recipient_id: recipientID,\n      conversation_id: uniqueConversationID(keystore.app_id, recipientID),\n      message_id: uuid(),\n      data: base64RawURLEncode(Buffer.from(data)),\n    };\n    await send(messageRequest);\n    return messageRequest;\n  };\n\n  return {\n    /** Send the status of single message in bulk to Mixin Server */\n    sendAcknowledgement: (message: AcknowledgementRequest): Promise<AcknowledgementResponse[]> =>\n      axiosInstance.post<unknown, AcknowledgementResponse[]>('/acknowledgements', [message]),\n\n    /** Send the status of messages in bulk to Mixin Server */\n    sendAcknowledges: (messages: AcknowledgementRequest[]): Promise<AcknowledgementResponse[]> =>\n      axiosInstance.post<unknown, AcknowledgementResponse[]>('/acknowledgements', messages),\n\n    /** Send one message */\n    sendOne: send,\n\n    /**\n     * Send messages in bulk\n     * A maximum of 100 messages can be sent in batch each time, and the message body cannot exceed 128Kb\n     */\n    sendBatch: (messages: MessageRequest[]) => axiosInstance.post<unknown, any>('/messages', messages),\n\n    /** send one kind of message */\n    sendMsg,\n\n    sendText: (userID: string, text: string): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_TEXT', text),\n\n    sendSticker: (userID: string, sticker: StickerMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_STICKER', sticker),\n\n    sendImage: (userID: string, image: ImageMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_IMAGE', image),\n\n    sendAudio: (userID: string, audio: AudioMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_AUDIO', audio),\n\n    sendVideo: (userID: string, video: VideoMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_VIDEO', video),\n\n    sendContact: (userID: string, contact: ContactMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_CONTACT', contact),\n\n    sendAppCard: (userID: string, appCard: AppCardMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'APP_CARD', appCard),\n\n    sendFile: (userID: string, file: FileMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_DATA', file),\n\n    sendLive: (userID: string, live: LiveMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_LIVE', live),\n\n    sendLocation: (userID: string, location: LocationMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_LOCATION', location),\n\n    sendPost: (userID: string, text: string): Promise<MessageRequest> => sendMsg(userID, 'PLAIN_POST', text),\n\n    sendAppButton: (userID: string, appButton: AppButtonMessageRequest[]): Promise<MessageRequest> => sendMsg(userID, 'APP_BUTTON_GROUP', appButton),\n\n    sendTransfer: (userID: string, transfer: TransferMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'SYSTEM_ACCOUNT_SNAPSHOT', transfer),\n\n    sendRecall: (userID: string, message: RecallMessageRequest): Promise<MessageRequest> => sendMsg(userID, 'MESSAGE_RECALL', message),\n  };\n};\n\nexport const MessageClient = buildClient(MessageKeystoreClient);\n\nexport default MessageClient;\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { MultisigAction, MultisigInitAction, MultisigRequest, MultisigUtxoResponse, MultisigRequestResponse, SafeMultisigsResponse, TransactionRequest } from './types';\nimport { signEd25519PIN } from './utils/pin';\nimport { hashMembers } from './utils/uniq';\nimport { buildClient } from './utils/client';\n\n/**\n * Users can use those APIs to manage their multisig outputs\n * Note:\n * * Before transferring tokens, user should create a request first.\n * * only unsigned request can be canceled.\n * * only uncompleted sign transaction can be unlocked.\n * Docs: https://developers.mixin.one/docs/api/multisigs/request\n */\nexport const MultisigKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  const initMultisig = (pin: string, requestID: string, action: MultisigAction): Promise<MultisigRequestResponse> => {\n    const encrypted = signEd25519PIN(pin, keystore);\n    return axiosInstance.post<unknown, MultisigRequestResponse>(`/multisigs/requests/${requestID}/${action}`, { pin: encrypted });\n  };\n\n  return {\n    /** Get signature outputs, if an account participates in it */\n    outputs: (params: MultisigRequest): Promise<MultisigUtxoResponse[]> => {\n      const { members, threshold } = params;\n      if (members.length === 0 || threshold < 1 || threshold > members.length) return Promise.reject(new Error('Invalid threshold or members'));\n\n      const hashedParams = {\n        ...params,\n        members: hashMembers(members),\n      };\n      return axiosInstance.get<unknown, MultisigUtxoResponse[]>(`/multisigs/outputs`, { params: hashedParams });\n    },\n\n    /** Generate a multi-signature request to obtain request_id */\n    create: (action: MultisigInitAction, raw: string): Promise<MultisigRequestResponse> =>\n      axiosInstance.post<unknown, MultisigRequestResponse>(`/multisigs/requests`, { action, raw }),\n\n    /** Initiate or participate in signing */\n    sign: (pin: string, requestID: string): Promise<MultisigRequestResponse> => initMultisig(pin, requestID, 'sign'),\n\n    /** Cancel my signature before the multisig finish */\n    unlock: (pin: string, requestID: string): Promise<MultisigRequestResponse> => initMultisig(pin, requestID, 'unlock'),\n\n    /** Cancel my multisig request */\n    cancel: (pin: string, requestID: string): Promise<MultisigRequestResponse> => initMultisig(pin, requestID, 'cancel'),\n\n    createSafeMultisigs: (params: TransactionRequest[]): Promise<SafeMultisigsResponse[]> => axiosInstance.post<unknown, SafeMultisigsResponse[]>('/safe/multisigs', params),\n\n    fetchSafeMultisigs: (id: string): Promise<SafeMultisigsResponse> => axiosInstance.get<unknown, SafeMultisigsResponse>(`/safe/multisigs/${id}`),\n\n    signSafeMultisigs: (id: string, raw: string): Promise<SafeMultisigsResponse> => axiosInstance.post<unknown, SafeMultisigsResponse>(`/safe/multisigs/${id}/sign`, { raw }),\n\n    unlockSafeMultisigs: (id: string): Promise<SafeMultisigsResponse> => axiosInstance.post<unknown, SafeMultisigsResponse>(`/safe/multisigs/${id}/unlock`),\n  };\n};\n\nexport const MultisigClient = buildClient(MultisigKeystoreClient);\n\nexport default MultisigClient;\n","import { AxiosInstance } from 'axios';\nimport { AssetResponse } from './types/asset';\nimport { NetworkSnapshotRequest, NetworkInfoResponse, NetworkChainResponse, NetworkAssetResponse, NetworkPriceResponse, NetworkSnapshotResponse } from './types/network';\nimport { buildClient } from './utils/client';\n\n/**\n * Public methods that need no permission\n * Docs: https://developers.mixin.one/docs/api/transfer/snapshots\n */\nexport const NetworkBaseClient = (axiosInstance: AxiosInstance) => ({\n  /** Get network info */\n  info: (): Promise<NetworkInfoResponse> => axiosInstance.get<unknown, NetworkInfoResponse>('/network'),\n\n  /** Get the list of all public chains supported by Mixin */\n  chains: (): Promise<NetworkChainResponse[]> => axiosInstance.get<unknown, NetworkChainResponse[]>('/network/chains'),\n\n  /** Get information of a chain */\n  fetchChain: (chainID: string): Promise<NetworkChainResponse> => axiosInstance.get<unknown, NetworkChainResponse>(`/network/chains/${chainID}`),\n\n  /** Get public information of an asset */\n  fetchAsset: (assetID: string): Promise<NetworkAssetResponse> => axiosInstance.get<unknown, NetworkAssetResponse>(`/network/assets/${assetID}`),\n\n  /**\n   * Get the list of the top 100 assets on the entire network\n   * kind parameter is used to specify the top assets, for NORMAL value will not swap lp tokens\n   */\n  topAssets: (kind = 'ALL'): Promise<AssetResponse[]> => {\n    const params = { kind };\n    return axiosInstance.get<unknown, AssetResponse[]>('/network/assets/top', { params });\n  },\n\n  /**\n   * Search for popular assets by symbol or name\n   * This API only returns assets with icons or prices.\n   */\n  searchAssets: (keyword: string, kind = 'ALL'): Promise<AssetResponse[]> => {\n    const params = { kind };\n    return axiosInstance.get<unknown, AssetResponse[]>(`/network/assets/search/${keyword}`, { params });\n  },\n\n  /**\n   * Get the historical price of a given asset\n   * If no ticker found, price_usd and price_usd will return 0\n   */\n  historicalPrice: (assetID: string, offset?: string): Promise<NetworkPriceResponse> => {\n    const params = {\n      asset: assetID,\n      offset,\n    };\n    return axiosInstance.get<unknown, NetworkPriceResponse>(`/network/ticker`, { params });\n  },\n\n  /** Get public information of specific snapshot by snapshot_id */\n  snapshot: (snapshotID: string): Promise<NetworkSnapshotResponse> => axiosInstance.get<unknown, NetworkSnapshotResponse>(`/network/snapshots/${snapshotID}`),\n\n  /** Get public information of snapshot records, which including transfers, deposits, withdrawals, etc */\n  snapshots: (inputParams: NetworkSnapshotRequest): Promise<NetworkSnapshotResponse[]> => {\n    const params = {\n      ...inputParams,\n      order: inputParams.order || 'DESC',\n    };\n    return axiosInstance.get<unknown, NetworkSnapshotResponse[]>(`/network/snapshots`, { params });\n  },\n});\n\nexport const NetworkClient = buildClient(NetworkBaseClient);\n\nexport default NetworkClient;\n","import { AxiosInstance } from 'axios';\nimport { AccessTokenRequest, AccessTokenResponse, AuthorizationResponse, AuthorizeRequest } from './types/oauth';\nimport { buildClient } from './utils/client';\n\n/**\n * Method to get user access code\n * To access some information of Mixin Messenger users, the developer needs to apply for authorization from the user\n * After that, the page will automatically jump to the application's OAuth URL, accompanied by the authorization code\n * Detail: https://developers.mixin.one/docs/api/oauth/oauth\n */\nexport const OAuthBaseClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the access code based on authorization code */\n  getToken: (data: AccessTokenRequest) => axiosInstance.post<unknown, AccessTokenResponse>('/oauth/token', data),\n\n  authorize: (data: AuthorizeRequest) => axiosInstance.post<unknown, AuthorizationResponse>('/oauth/authorize', data),\n\n  authorizations: (appId?: string) => axiosInstance.get<unknown, AuthorizationResponse[]>('/authorizations', { params: { app: appId } }),\n\n  revokeAuthorize: (clientId: string) => axiosInstance.post<unknown, void>('/oauth/cancel', { client_id: clientId }),\n});\n\nexport const OAuthClient = buildClient(OAuthBaseClient);\n\nexport default OAuthClient;\n","import { AxiosInstance } from 'axios';\nimport { buildClient } from './utils/client';\nimport { PaymentRequestResponse, RawTransactionRequest, TransferRequest } from './types';\n\nexport const PaymentBaseClient = (axiosInstance: AxiosInstance) => {\n  const payment = (params: TransferRequest | RawTransactionRequest) => axiosInstance.post<unknown, PaymentRequestResponse>('/payments', params);\n  return {\n    /** @deprecated Use payment() instead */\n    request: payment,\n\n    // Generate code id for transaction/transfer or verify payments by trace id\n    payment,\n  };\n};\n\nexport const PaymentClient = buildClient(PaymentBaseClient);\n\nexport default PaymentClient;\n","import { AxiosInstance } from 'axios';\nimport Keystore from './types/keystore';\nimport { AuthenticationUserResponse } from './types/user';\nimport { buildClient } from './utils/client';\nimport { signTipBody, getNanoTime, getTipPinUpdateMsg, getVerifyPinTipBody, signEd25519PIN } from './utils/pin';\n\n/**\n * Methods to verify or update pin with keystore\n * Note:\n * * If you forget your PIN, there is no way to retrieve or restore it\n * Docs: https://developers.mixin.one/docs/api/pin/pin-update\n */\nexport const PinKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {\n  function updatePin(firstPin: string, secondPin = ''): Promise<AuthenticationUserResponse> {\n    const oldEncrypted = firstPin ? signEd25519PIN(firstPin, keystore) : '';\n    const newEncrypted = signEd25519PIN(secondPin, keystore);\n    return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/update', { old_pin_base64: oldEncrypted, pin_base64: newEncrypted });\n  }\n\n  function updateTipPin(firstPin: string, secondPin: string, counter: number): Promise<AuthenticationUserResponse> {\n    const pubTipBuf = Buffer.from(secondPin, 'hex');\n    if (pubTipBuf.byteLength !== 32) throw new Error('invalid public key');\n    const pubTipHex = getTipPinUpdateMsg(pubTipBuf, counter).toString('hex');\n\n    const oldEncrypted = firstPin ? signEd25519PIN(firstPin, keystore) : '';\n    const newEncrypted = signEd25519PIN(pubTipHex, keystore);\n    return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/update', { old_pin_base64: oldEncrypted, pin_base64: newEncrypted });\n  }\n\n  return {\n    /** Verify a user's PIN, the iterator of the pin will increment also */\n    verify: (pin: string) => {\n      const encrypted = signEd25519PIN(pin, keystore);\n      return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/verify', { pin: encrypted });\n    },\n\n    verifyTipPin: (pin: string) => {\n      const timestamp = getNanoTime();\n      const msg = getVerifyPinTipBody(timestamp);\n      const signedTipPin = signTipBody(pin, msg);\n      return axiosInstance.post<unknown, AuthenticationUserResponse>('/pin/verify', {\n        pin_base64: signEd25519PIN(signedTipPin, keystore),\n        timestamp,\n      });\n    },\n\n    /** Change the PIN of the user, or setup a new PIN if it is not set yet */\n    update: updatePin,\n\n    updateTipPin,\n  };\n};\n\nexport const PinClient = buildClient(PinKeystoreClient);\n\nexport default PinClient;\n","import { AxiosInstance } from 'axios';\nimport {\n  Keystore,\n  AuthenticationUserResponse,\n  SafeAsset,\n  SafeDepositEntriesRequest,\n  SafeDepositEntryResponse,\n  SafePendingDepositRequest,\n  SafePendingDepositResponse,\n  SafeSnapshot,\n  SafeSnapshotsRequest,\n  SafeWithdrawalFee,\n} from './types';\nimport { buildClient, signEd25519PIN, signSafeRegistration } from './utils';\n\nexport const SafeKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => ({\n  /** If you want to register safe user, you need to upgrade TIP PIN first. */\n  register: (user_id: string, tipPin: string, priv: Buffer): Promise<AuthenticationUserResponse> => {\n    const data = signSafeRegistration(user_id, tipPin, priv);\n    data.pin_base64 = signEd25519PIN(data.pin_base64, keystore);\n    return axiosInstance.post<unknown, AuthenticationUserResponse>('/safe/users', data);\n  },\n\n  checkRegisteration: () => axiosInstance.get<unknown, AuthenticationUserResponse>(`/safe/me`),\n\n  assets: (): Promise<SafeAsset[]> => axiosInstance.get<unknown, SafeAsset[]>('/safe/assets'),\n\n  fetchAsset: (id: string): Promise<SafeAsset> => axiosInstance.get<unknown, SafeAsset>(`/safe/assets/${id}`),\n\n  fetchAssets: (assetIds: string[]): Promise<SafeAsset[]> => axiosInstance.post<unknown, SafeAsset[]>(`/safe/assets/fetch`, assetIds),\n\n  fetchFee: (asset: string, destination: string) => axiosInstance.get<unknown, SafeWithdrawalFee[]>(`/safe/assets/${asset}/fees`, { params: { destination } }),\n\n  depositEntries: (data: SafeDepositEntriesRequest) => axiosInstance.post<unknown, SafeDepositEntryResponse[]>(`/safe/deposit/entries`, data),\n\n  createDeposit: (chain_id: string) => axiosInstance.post<unknown, SafeDepositEntryResponse[]>('/safe/deposit/entries', { chain_id }),\n\n  pendingDeposits: (params: SafePendingDepositRequest): Promise<SafePendingDepositResponse[]> =>\n    axiosInstance.get<unknown, SafePendingDepositResponse[]>(`/safe/deposits`, { params }),\n\n  /**\n   * Get snapshots for single user\n   * Or Get snapshots for all network users with app uuid passed\n   */\n  fetchSafeSnapshots: (data: SafeSnapshotsRequest): Promise<SafeSnapshot[]> =>\n    axiosInstance.get<unknown, SafeSnapshot[]>(`/safe/snapshots`, {\n      params: data,\n    }),\n\n  fetchSafeSnapshot: (id: string): Promise<SafeSnapshot> => axiosInstance.get<unknown, SafeSnapshot>(`/safe/snapshots/${id}`),\n});\nexport const SafeClient = buildClient(SafeKeystoreClient);\n\nexport default SafeClient;\n","import { AxiosInstance } from 'axios';\nimport { Keystore } from './types/keystore';\nimport { SnapshotRequest, SnapshotResponse } from './types/snapshot';\nimport { TransferRequest } from './types/transfer';\nimport { GhostInputRequest, RawTransactionRequest, GhostKeysResponse } from './types/transaction';\nimport { signEd25519PIN } from './utils/pin';\nimport { buildClient } from './utils/client';\n\n/**\n * Methods to transfer asset, withdraw and obtain transfer information\n * Note:\n * * Once /transfers API is successfully called, it means data has been confirmed by all nodes, and it is irreversible\n * Docs: https://developers.mixin.one/docs/api/transfer/transfer\n */\nexport const TransferKeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => ({\n  /** Get transfer information by traceID */\n  fetch: (traceID: string): Promise<SnapshotResponse> => axiosInstance.get<unknown, SnapshotResponse>(`/transfers/trace/${traceID}`),\n\n  /** Get specific snapshot of current user */\n  snapshot: (snapshotID: string): Promise<SnapshotResponse> => axiosInstance.get<unknown, SnapshotResponse>(`/snapshots/${snapshotID}`),\n\n  /** Get the snapshots of current user */\n  snapshots: (params: SnapshotRequest): Promise<SnapshotResponse[]> => axiosInstance.get<unknown, SnapshotResponse[]>(`/snapshots`, { params }),\n\n  /**\n   * Transfer to specific user\n   * If you encounter 500 error, do it over again\n   * If you see the error 20119 password is wrong, do not try again. It is recommended to call the PIN Verification API to confirm\n   */\n  toUser: (pin: string, params: TransferRequest): Promise<SnapshotResponse> => {\n    const request: TransferRequest = {\n      ...params,\n      pin: signEd25519PIN(pin, keystore),\n    };\n    return axiosInstance.post<unknown, SnapshotResponse>('/transfers', request);\n  },\n\n  /** Send raw transactions to the mainnet or multisig address */\n  toAddress: (pin: string, params: RawTransactionRequest): Promise<SnapshotResponse> => {\n    const request: RawTransactionRequest = {\n      ...params,\n      pin: signEd25519PIN(pin, keystore),\n    };\n    return axiosInstance.post<unknown, SnapshotResponse>('/transactions', request);\n  },\n\n  /** Get one-time user keys for mainnet */\n  outputs: (input: GhostInputRequest[]): Promise<GhostKeysResponse[]> => axiosInstance.post<unknown, GhostKeysResponse[]>(`/outputs`, input),\n});\n\nexport const TransferClient = buildClient(TransferKeystoreClient);\n\nexport default TransferClient;\n","import { AxiosInstance } from 'axios';\nimport { AuthenticationUserResponse, UserResponse, PreferenceRequest, RelationshipRequest, RelationshipAddRequest, LogRequest, LogResponse } from './types/user';\nimport { buildClient } from './utils/client';\nimport { AtLeastOne } from '../types';\n\n/** Methods to obtain or edit users' profile and relationships */\nexport const UserKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  /** Get the current user's personal information */\n  profile: () => axiosInstance.get<unknown, AuthenticationUserResponse>(`/me`),\n\n  /** Get the contact list of the users, containing users and bots */\n  friends: () => axiosInstance.get<unknown, UserResponse[]>(`/friends`),\n\n  /** Get users' block list */\n  blockings: () => axiosInstance.get<unknown, UserResponse[]>(`/blocking_users`),\n\n  /** Rotate user's code */\n  rotateCode: () => axiosInstance.get<unknown, AuthenticationUserResponse>('/me/code'),\n\n  /** Search users by keyword */\n  search: (identityNumberOrPhone: string) => axiosInstance.get<unknown, UserResponse>(`/search/${identityNumberOrPhone}`),\n\n  /** Get user information by userID */\n  fetch: (id: string) => axiosInstance.get<unknown, UserResponse>(`/users/${id}`),\n\n  /**\n   * Get users' information by userIDs in bulk\n   * This API will only return the list of existing users\n   */\n  fetchList: (userIDs: string[]) => axiosInstance.post<unknown, UserResponse[]>(`/users/fetch`, userIDs),\n\n  /** Create a network user, can be created by bot only with no permission */\n  createBareUser: (fullName: string, sessionSecret: string) => axiosInstance.post<unknown, UserResponse>('/users', { full_name: fullName, session_secret: sessionSecret }),\n\n  /** Modify current user's personal name and avatar */\n  update: (fullName: string, avatarBase64: string) => axiosInstance.post<unknown, UserResponse>(`/me`, { full_name: fullName, avatar_base64: avatarBase64 }),\n\n  /** update user's preferences */\n  updatePreferences: (params: AtLeastOne<PreferenceRequest>) => axiosInstance.post<unknown, AuthenticationUserResponse>(`/me/preferences`, params),\n\n  /** Manage the relationship between two users, one can 'ADD' | 'REMOVE' | 'BLOCK' | 'UNBLOCK' a user */\n  updateRelationships: (relationship: RelationshipRequest | RelationshipAddRequest) => axiosInstance.post<unknown, UserResponse>(`/relationships`, relationship),\n\n  /** Get pin logs of user */\n  logs: (params: LogRequest) => axiosInstance.get<unknown, LogResponse[]>(`/logs`, { params }),\n});\n\nexport const UserClient = buildClient(UserKeystoreClient);\n\nexport default UserClient;\n","import { AxiosInstance } from 'axios';\nimport {\n  GhostKey,\n  GhostKeyRequest,\n  OutputFetchRequest,\n  OutputsRequest,\n  SafeOutputsRequest,\n  SafeBalanceRequest,\n  SafeUtxoOutput,\n  TransactionRequest,\n  SequencerTransactionRequest,\n  UtxoOutput,\n} from './types';\nimport { buildClient, getTotalBalanceFromOutputs, hashMembers } from './utils';\n\nexport const UtxoKeystoreClient = (axiosInstance: AxiosInstance) => ({\n  outputs: (params: OutputsRequest): Promise<UtxoOutput[]> =>\n    axiosInstance.get<unknown, UtxoOutput[]>(`/outputs`, {\n      params: {\n        ...params,\n        members: hashMembers(params.members),\n      },\n    }),\n\n  /**\n   * Utxos of current user will be returned, if members and threshold are not provided.\n   */\n  safeOutputs: (params: SafeOutputsRequest): Promise<SafeUtxoOutput[]> =>\n    axiosInstance.get<unknown, SafeUtxoOutput[]>(`/safe/outputs`, {\n      params: {\n        ...params,\n        members: params.members ? hashMembers(params.members) : undefined,\n      },\n    }),\n\n  safeAssetBalance: async (params: SafeBalanceRequest) => {\n    const outputs = await axiosInstance.get<unknown, SafeUtxoOutput[]>(`/safe/outputs`, {\n      params: {\n        ...params,\n        members: params.members ? hashMembers(params.members) : undefined,\n        state: 'unspent',\n      },\n    });\n    return getTotalBalanceFromOutputs(outputs).toString();\n  },\n\n  fetchSafeOutputs: (params: OutputFetchRequest): Promise<UtxoOutput[]> => axiosInstance.post<unknown, UtxoOutput[]>('/safe/outputs/fetch', params),\n\n  fetchTransaction: (transactionId: string): Promise<SequencerTransactionRequest> => axiosInstance.get<unknown, SequencerTransactionRequest>(`/safe/transactions/${transactionId}`),\n\n  verifyTransaction: (params: TransactionRequest[]): Promise<SequencerTransactionRequest[]> =>\n    axiosInstance.post<unknown, SequencerTransactionRequest[]>('/safe/transaction/requests', params),\n\n  sendTransactions: (params: TransactionRequest[]): Promise<SequencerTransactionRequest[]> =>\n    axiosInstance.post<unknown, SequencerTransactionRequest[]>('/safe/transactions', params),\n\n  /**\n   * Get one-time information to transfer assets to single user or multisigs group, not required for Mixin Kernel Address\n   * index in GhostKeyRequest MUST be the same with the index of corresponding output\n   * receivers will be sorted in the function\n   */\n  ghostKey: (params: GhostKeyRequest[]): Promise<GhostKey[]> => {\n    params = params.map(p => ({\n      ...p,\n      receivers: p.receivers.sort(),\n    }));\n    return axiosInstance.post<unknown, GhostKey[]>('/safe/keys', params);\n  },\n});\n\nexport const UtxoClient = buildClient(UtxoKeystoreClient);\n\nexport default UtxoClient;\n","import merge from 'lodash.merge';\nimport type { AxiosInstance } from 'axios';\nimport type Keystore from './types/keystore';\nimport type { HTTPConfig, RequestClient } from './types';\nimport { createAxiosClient, createRequestClient } from './utils';\nimport { AddressKeystoreClient } from './address';\nimport { AppKeystoreClient } from './app';\nimport { AssetKeystoreClient } from './asset';\nimport { AttachmentKeystoreClient } from './attachment';\nimport { CircleKeystoreClient } from './circle';\nimport { CodeKeystoreClient } from './code';\nimport { CollectibleKeystoreClient } from './collectible';\nimport { ConversationKeystoreClient } from './conversation';\nimport { ExternalKeystoreClient } from './external';\nimport { MessageKeystoreClient } from './message';\nimport { MultisigKeystoreClient } from './multisig';\nimport { NetworkBaseClient } from './network';\nimport { OAuthBaseClient } from './oauth';\nimport { PaymentBaseClient } from './payment';\nimport { PinKeystoreClient } from './pin';\nimport { TransferKeystoreClient } from './transfer';\nimport { UserKeystoreClient } from './user';\nimport { BlazeKeystoreClient } from './blaze';\nimport { UtxoKeystoreClient } from './utxo';\nimport { SafeKeystoreClient } from './safe';\n\nconst KeystoreClient = (axiosInstance: AxiosInstance, keystore: Keystore | undefined, config: HTTPConfig) => ({\n  address: AddressKeystoreClient(axiosInstance, keystore),\n  app: AppKeystoreClient(axiosInstance),\n  asset: AssetKeystoreClient(axiosInstance),\n  blaze: BlazeKeystoreClient(keystore, config.blazeOptions),\n  attachment: AttachmentKeystoreClient(axiosInstance),\n  circle: CircleKeystoreClient(axiosInstance),\n  code: CodeKeystoreClient(axiosInstance),\n  collection: CollectibleKeystoreClient(axiosInstance, keystore),\n  conversation: ConversationKeystoreClient(axiosInstance, keystore),\n  external: ExternalKeystoreClient(axiosInstance),\n  message: MessageKeystoreClient(axiosInstance, keystore),\n  multisig: MultisigKeystoreClient(axiosInstance, keystore),\n  network: NetworkBaseClient(axiosInstance),\n  oauth: OAuthBaseClient(axiosInstance),\n  payment: PaymentBaseClient(axiosInstance),\n  pin: PinKeystoreClient(axiosInstance, keystore),\n  safe: SafeKeystoreClient(axiosInstance, keystore),\n  transfer: TransferKeystoreClient(axiosInstance, keystore),\n  user: UserKeystoreClient(axiosInstance),\n  utxo: UtxoKeystoreClient(axiosInstance),\n});\n\nexport type KeystoreClientReturnType = ReturnType<typeof KeystoreClient>;\n\nexport function MixinApi(config: HTTPConfig = {}): KeystoreClientReturnType & RequestClient {\n  const { keystore, requestConfig } = config;\n\n  const axiosInstance = createAxiosClient(keystore, requestConfig);\n  const requestClient = createRequestClient(axiosInstance);\n\n  const keystoreClient = KeystoreClient(axiosInstance, keystore, config);\n\n  return merge(keystoreClient, requestClient);\n}\n","import { Context, WebviewAsset } from './type';\n\nexport const WebViewApi = () => {\n  const getMixinContext = () => {\n    let ctx: Context = {};\n    if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.MixinContext) {\n      const contextString = prompt('MixinContext.getContext()'); // eslint-disable-line no-alert\n      if (contextString) {\n        ctx = JSON.parse(contextString);\n        ctx.platform = ctx.platform || 'iOS';\n      }\n    } else if (window.MixinContext && typeof window.MixinContext.getContext === 'function') {\n      ctx = JSON.parse(window.MixinContext.getContext());\n      ctx.platform = ctx.platform || 'Android';\n    }\n\n    return ctx;\n  };\n\n  return {\n    getMixinContext,\n\n    reloadTheme: () => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.reloadTheme) window.webkit.messageHandlers.reloadTheme.postMessage('');\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.reloadTheme === 'function') window.MixinContext.reloadTheme();\n          break;\n        default:\n          break;\n      }\n    },\n\n    playlist: (audios: string[]) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.playlist) window.webkit.messageHandlers.playlist.postMessage(audios);\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.playlist === 'function') window.MixinContext.playlist(audios);\n          break;\n        default:\n          break;\n      }\n    },\n\n    close: () => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.close) window.webkit.messageHandlers.close.postMessage('');\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.close === 'function') window.MixinContext.close();\n          break;\n        default:\n          break;\n      }\n    },\n\n    getAssets: async (assets: string[], cb: (assets: WebviewAsset[]) => void) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getAssets) {\n            window.assetsCallbackFunction = cb;\n            await window.webkit.messageHandlers.getAssets.postMessage([assets, 'assetsCallbackFunction']);\n          }\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.getAssets === 'function') {\n            window.assetsCallbackFunction = cb;\n            await window.MixinContext.getAssets(assets, 'assetsCallbackFunction');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n\n    getTipAddress: async (chainId: string, cb: (address: string) => void) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.getTipAddress) {\n            window.tipAddressCallbackFunction = cb;\n            await window.webkit.messageHandlers.getTipAddress.postMessage([chainId, 'tipAddressCallbackFunction']);\n          }\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.getTipAddress === 'function') {\n            window.tipAddressCallbackFunction = cb;\n            await window.MixinContext.getTipAddress(chainId, 'tipAddressCallbackFunction');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n\n    tipSign: async (chainId: string, msg: string, cb: (signature: string) => void) => {\n      switch (getMixinContext().platform) {\n        case 'iOS':\n          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.tipSign) {\n            window.tipSignCallbackFunction = cb;\n            await window.webkit.messageHandlers.tipSign.postMessage([chainId, msg, 'tipSignCallbackFunction']);\n          }\n          break;\n        case 'Android':\n        case 'Desktop':\n          if (window.MixinContext && typeof window.MixinContext.tipSign === 'function') {\n            window.tipSignCallbackFunction = cb;\n            await window.MixinContext.tipSign(chainId, msg, 'tipSignCallbackFunction');\n          }\n          break;\n        default:\n          break;\n      }\n    },\n  };\n};\n","export const MixinAssetID = '43d61dcd-e413-450d-80b8-101d5e903357';\nexport const MixinCashier = '674d6776-d600-4346-af46-58e77d8df185';\n"],"names":["base64RawURLEncode","raw","buf","Buffer","from","Uint8Array","length","toString","replaceAll","base64RawURLDecode","data","zeros","getMultiplier","n","BigNumber","substring","formatUnits","amount","unit","m","dividedBy","parseUnits","times","MaximumEncodingInt","AggregatedSignaturePrefix","magic","empty","integerToBytes","x","bytes","i","unshift","Math","pow","bigNumberToBytes","mod","toNumber","dividedToIntegerBy","isZero","putUvarInt","Encoder","_proto","prototype","hex","write","concat","writeBytes","len","byteLength","writeInt","writeSlice","l","Error","alloc","writeUInt16BE","writeUint16","writeUint32","writeUInt32BE","writeUint64","writeBigUInt64BE","writeInteger","b","writeUUID","id","uuid","parse","encodeInput","input","hash","index","genesis","d","deposit","chain","asset","tx","transaction","Number","toFixed","mint","group","batch","encodeOutput","output","o","type","keys","forEach","k","_this","mask","script","s","w","withdrawal","addr","address","tag","encodeAggregatedSignature","js","signature","signers","max","_this2","masks","encodeSignature","sm","ss","Object","entries","map","_ref","v","sig","sort","a","_this3","hashMembers","ids","key","join","newHash","uniqueConversationID","userID","recipientID","_sort","minId","maxId","md5","forge","md","create","update","digest","uuidStringify","sha3_256","sha256Hash","sha256","sha512Hash","sha512","blake3Hash","blake3","getUuid","scMinusOne","base","ed25519","ExtendedPoint","fromHex","fn","Field","CURVE","undefined","isReduced","at","setBytesWithClamping","wideBytes","copy","bytesToNumberLE","subarray","setUniformBytes","setCanonicalBytes","scalarBaseMult","res","multiply","toRawBytes","scalarBaseMultToPoint","publicFromPrivate","priv","sign","msg","digest1","messageDigest","z","r","pub","hramDigest","y","numberToBytesLE","add","mul","newPoint","keyMultPubPriv","q","hashScalar","tmp","src","edwards25519","scalar","x25519","edwardsToMontgomery","edwardsToMontgomeryPriv","getNanoTime","now","nano","sharedEd25519Key","keystore","ed","server_public_key","pin_token_base64","pri","session_private_key","getSharedSecret","getTipPinUpdateMsg","counter","enc","BigInt","signEd25519PIN","pin","blockSize","_pin","iterator","Uint64","toBuffer","time","Date","buffer","util","createBuffer","paddingLen","paddings","push","putBytes","iv","random","getBytesSync","sharedKey","cipher","createCipher","start","finish","pinBuff","getBytes","encryptedBytes","getCreateAddressTipBody","asset_id","publicKey","name","getRemoveAddressTipBody","address_id","getVerifyPinTipBody","timestamp","padStart","signTipBody","privateKey","signData","pki","message","ResponseError","_Error","_inheritsLoose","code","description","status","extra","requestId","originalError","call","_wrapNativeSuper","getED25519KeyPair","seed","keypair","generateKeyPair","signToken","payload","private_key","header","serialize","alg","typ","payloadStr","result","encoding","signAuthenticationToken","methodRaw","uri","params","requestID","session_id","validate","method","toLocaleUpperCase","unsafe","iat","floor","exp","uid","app_id","sid","jti","toHex","scp","signOauthAccessToken","scope","iss","aid","authorization_id","signAccessToken","hostURL","axios","defaults","headers","post","put","patch","http","config","timeout","retries","retry","ins","_extends","baseURL","interceptors","request","use","url","getUri","slice","_config$baseURL","jwtToken","Authorization","response","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_res$data","error","wrap","_callee$","_context","prev","next","abrupt","stop","_x","apply","arguments","_ref2","_callee2","e","_callee2$","_context2","responseCallback","Promise","reject","_x2","axiosRetry","shouldResetTimeout","retryDelay","retryCondition","Boolean","isRetryAllowed","isIdempotentRequestError","onRetry","_count","err","requestConfig","_err$config","_err$config2","mixinRequest","createAxiosClient","createRequestClient","axiosInstance","buildClient","KeystoreClient","_config","requestClient","keystoreClient","assign","AddressKeystoreClient","fetch","addressID","get","fetchList","assetID","destination","_params$tag","label","signedTipPin","encrypted","_delete","AddressClient","AppKeystoreClient","appID","properties","favorites","updateSecret","updateSafeSession","registerSafe","favorite","unfavorite","AppClient","AssetKeystoreClient","snapshots","AssetClient","AttachmentKeystoreClient","createAttachment","uploadAttachmentTo","uploadURL","file","maxContentLength","attachmentID","upload","_upload","_yield$createAttachme","view_url","upload_url","attachment_id","sent","AttachmentClient","MainAddressPrefix","MixAddressPrefix","MixAddressVersion","getPublicFromMainnetAddress","startsWith","bs58","decode","checksum","equals","_unused","getMainnetAddressFromPublic","pubKey","encode","parseMixAddress","version","threshold","total","memberData","members","stringify","_unused2","buildMixAddress","ma","prefix","bytesToInterger","byte","Decoder","end","read","offset","readByte","value","readUint8","readBytes","readInt","readUInt16BE","readUint32","readUInt32BE","readUInt64","readBigUInt64BE","readUUID","readInteger","decodeInput","lenGenesis","depositPrefix","mintPrefix","decodeOutput","t","lenKey","lenScript","decodeSignature","sigs","TxVersion","getTotalBalanceFromOutputs","outputs","reduce","cur","plus","encodeScript","encodeTx","inputs","buildMultiSigsTransaction","filter","Prefix","Version","DefaultChain","DefaultClass","DefaultNftAssetId","buildTokenId","collection_id","token","tokenStr","buildCollectibleMemo","content","token_id","encoder","UUIDParse","decodeNfoMemo","hexMemo","memo","nm","decoder","hint","collection","parseInt","buildNfoTransferRequest","client","utxo","receivers","transfer","transaction_hash","output_index","_x3","_x4","_x5","TIPSequencerRegister","TIPBodyForSequencerRegister","user_id","tipBody","TxVersionHashSignature","OutputTypeScript","OutputTypeWithdrawalSubmit","buildMixinOneSafePaymentUri","mainnetAddress","mixAddress","baseUrl","p","trace","_params$trace","v4","return_to","returnTo","encodeURIComponent","query","qs","signSafeRegistration","tipPin","public_key","publicKeyFromPrivateKey","pin_base64","deriveGhostPublicKey","A","B","p1","p2","p4","getMainnetAddressGhostKey","recipient","hexSeed","publics","every","toBytes","addressPubic","spendKey","viewKey","buildSafeTransactionRecipient","getUnspentOutputsForRecipients","rs","totalOutput","totalInput","state","minus","isNegative","utxos","change","encodeSafeTransaction","references","decodeSafeTransaction","dec","lenInput","lenOutput","lenRefs","lenExtra","lenSigs","signatureMap","buildSafeTransaction","gs","_r$tag","signSafeTransaction","views","spenty","signaturesMap","viewBuffer","sleep","resolve","setTimeout","decodeMessage","options","ungzip","to","msgObj","JSON","sendRaw","ws","zipped","gzip","readyState","WebSocket","OPEN","timer","cb","clearTimeout","send","websocket","handler","option","syncAck","handshakeTimeout","onmessage","event","source","onAckReceipt","category","onConversation","onTransfer","onMessage","action","message_id","wsHostURL","BlazeKeystoreClient","wsOptions","pingTimeout","terminate","heartbeat","loopBlaze","h","on","onopen","onclose","onerror","loop","stopLoop","getWebSocket","BlazeClient","blaze","CircleKeystoreClient","circleID","conversations","addUser","removeUser","addConversation","conversationID","removeConversation","conversation_id","CircleClient","CodeKeystoreClient","codeID","CodeClient","MintMinimumCost","GroupMembers","GroupThreshold","CollectibleKeystoreClient","manageRequest","tokenID","fetchCollection","collectionID","hashedParams","cancel","unlock","CollectibleClient","ConversationKeystoreClient","createConversation","managerConversation","participant","createContactConversation","participants","muteConversation","duration","createContact","createGroup","joinGroup","exitGroup","updateParticipants","addParticipants","userIDs","removeParticipants","setAdmin","role","revokeAdmin","resetGroupCode","updateGroupInfo","mute","unmute","disappearDuration","ConversationClient","ExternalKeystoreClient","deposits","checkAddress","exchangeRates","proxy","ExternalClient","MessageKeystoreClient","sendMsg","messageRequest","recipient_id","sendAcknowledgement","sendAcknowledges","messages","sendOne","sendBatch","sendText","text","sendSticker","sticker","sendImage","image","sendAudio","audio","sendVideo","video","sendContact","contact","sendAppCard","appCard","sendFile","sendLive","live","sendLocation","location","sendPost","sendAppButton","appButton","sendTransfer","sendRecall","MessageClient","MultisigKeystoreClient","initMultisig","createSafeMultisigs","fetchSafeMultisigs","signSafeMultisigs","unlockSafeMultisigs","MultisigClient","NetworkBaseClient","info","chains","fetchChain","chainID","fetchAsset","topAssets","kind","searchAssets","keyword","historicalPrice","snapshot","snapshotID","inputParams","order","NetworkClient","OAuthBaseClient","getToken","authorize","authorizations","appId","app","revokeAuthorize","clientId","client_id","OAuthClient","PaymentBaseClient","payment","PaymentClient","PinKeystoreClient","updatePin","firstPin","secondPin","oldEncrypted","newEncrypted","old_pin_base64","updateTipPin","pubTipBuf","pubTipHex","verify","verifyTipPin","PinClient","SafeKeystoreClient","register","checkRegisteration","assets","fetchAssets","assetIds","fetchFee","depositEntries","createDeposit","chain_id","pendingDeposits","fetchSafeSnapshots","fetchSafeSnapshot","SafeClient","TransferKeystoreClient","traceID","toUser","toAddress","TransferClient","UserKeystoreClient","profile","friends","blockings","rotateCode","search","identityNumberOrPhone","createBareUser","fullName","sessionSecret","full_name","session_secret","avatarBase64","avatar_base64","updatePreferences","updateRelationships","relationship","logs","UserClient","UtxoKeystoreClient","safeOutputs","safeAssetBalance","_safeAssetBalance","fetchSafeOutputs","fetchTransaction","transactionId","verifyTransaction","sendTransactions","ghostKey","UtxoClient","blazeOptions","attachment","circle","conversation","external","multisig","network","oauth","safe","user","MixinApi","merge","WebViewApi","getMixinContext","ctx","window","webkit","messageHandlers","MixinContext","contextString","prompt","platform","getContext","reloadTheme","postMessage","playlist","audios","close","getAssets","_getAssets","t0","assetsCallbackFunction","getTipAddress","_getTipAddress","chainId","tipAddressCallbackFunction","tipSign","_tipSign","_callee3","_callee3$","_context3","tipSignCallbackFunction","_x6","_x7","MixinAssetID","MixinCashier"],"mappings":"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"}