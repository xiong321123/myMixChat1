/// <reference types="node" />
import { edwardsToMontgomeryPriv } from '@noble/curves/ed25519';
export declare const edwards25519: {
    scalar: Readonly<import("@noble/curves/abstract/modular").IField<bigint> & Required<Pick<import("@noble/curves/abstract/modular").IField<bigint>, "isOdd">>>;
    x25519: import("@noble/curves/abstract/montgomery").CurveFn;
    edwardsToMontgomery: typeof import("@noble/curves/ed25519").edwardsToMontgomeryPub;
    edwardsToMontgomeryPriv: typeof edwardsToMontgomeryPriv;
    setBytesWithClamping: (x: Buffer) => bigint;
    setCanonicalBytes: (x: Buffer) => bigint;
    setUniformBytes: (x: Buffer) => bigint;
    isReduced: (x: Buffer) => boolean;
    publicFromPrivate: (priv: Buffer) => Buffer;
    scalarBaseMult: (x: bigint) => Buffer;
    scalarBaseMultToPoint: (x: bigint) => import("@noble/curves/abstract/edwards").ExtPointType;
    sign: (msg: Buffer, key: Buffer) => Buffer;
    newPoint: (x: Buffer) => import("@noble/curves/abstract/edwards").ExtPointType;
    keyMultPubPriv: (pub: Buffer, priv: Buffer) => Buffer;
    hashScalar: (k: Buffer, index: number) => bigint;
};
