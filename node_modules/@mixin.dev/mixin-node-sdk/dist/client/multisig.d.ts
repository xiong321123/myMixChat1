import { AxiosInstance } from 'axios';
import Keystore from './types/keystore';
import { MultisigInitAction, MultisigRequest, MultisigUtxoResponse, MultisigRequestResponse, SafeMultisigsResponse, TransactionRequest } from './types';
/**
 * Users can use those APIs to manage their multisig outputs
 * Note:
 * * Before transferring tokens, user should create a request first.
 * * only unsigned request can be canceled.
 * * only uncompleted sign transaction can be unlocked.
 * Docs: https://developers.mixin.one/docs/api/multisigs/request
 */
export declare const MultisigKeystoreClient: (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {
    /** Get signature outputs, if an account participates in it */
    outputs: (params: MultisigRequest) => Promise<MultisigUtxoResponse[]>;
    /** Generate a multi-signature request to obtain request_id */
    create: (action: MultisigInitAction, raw: string) => Promise<MultisigRequestResponse>;
    /** Initiate or participate in signing */
    sign: (pin: string, requestID: string) => Promise<MultisigRequestResponse>;
    /** Cancel my signature before the multisig finish */
    unlock: (pin: string, requestID: string) => Promise<MultisigRequestResponse>;
    /** Cancel my multisig request */
    cancel: (pin: string, requestID: string) => Promise<MultisigRequestResponse>;
    createSafeMultisigs: (params: TransactionRequest[]) => Promise<SafeMultisigsResponse[]>;
    fetchSafeMultisigs: (id: string) => Promise<SafeMultisigsResponse>;
    signSafeMultisigs: (id: string, raw: string) => Promise<SafeMultisigsResponse>;
    unlockSafeMultisigs: (id: string) => Promise<SafeMultisigsResponse>;
};
export declare const MultisigClient: import("./types").BaseClient<{
    /** Get signature outputs, if an account participates in it */
    outputs: (params: MultisigRequest) => Promise<MultisigUtxoResponse[]>;
    /** Generate a multi-signature request to obtain request_id */
    create: (action: MultisigInitAction, raw: string) => Promise<MultisigRequestResponse>;
    /** Initiate or participate in signing */
    sign: (pin: string, requestID: string) => Promise<MultisigRequestResponse>;
    /** Cancel my signature before the multisig finish */
    unlock: (pin: string, requestID: string) => Promise<MultisigRequestResponse>;
    /** Cancel my multisig request */
    cancel: (pin: string, requestID: string) => Promise<MultisigRequestResponse>;
    createSafeMultisigs: (params: TransactionRequest[]) => Promise<SafeMultisigsResponse[]>;
    fetchSafeMultisigs: (id: string) => Promise<SafeMultisigsResponse>;
    signSafeMultisigs: (id: string, raw: string) => Promise<SafeMultisigsResponse>;
    unlockSafeMultisigs: (id: string) => Promise<SafeMultisigsResponse>;
}>;
export default MultisigClient;
