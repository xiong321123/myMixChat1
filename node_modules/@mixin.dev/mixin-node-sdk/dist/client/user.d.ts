import { AxiosInstance } from 'axios';
import { AuthenticationUserResponse, UserResponse, PreferenceRequest, RelationshipRequest, RelationshipAddRequest, LogRequest, LogResponse } from './types/user';
import { AtLeastOne } from '../types';
/** Methods to obtain or edit users' profile and relationships */
export declare const UserKeystoreClient: (axiosInstance: AxiosInstance) => {
    /** Get the current user's personal information */
    profile: () => Promise<AuthenticationUserResponse>;
    /** Get the contact list of the users, containing users and bots */
    friends: () => Promise<UserResponse[]>;
    /** Get users' block list */
    blockings: () => Promise<UserResponse[]>;
    /** Rotate user's code */
    rotateCode: () => Promise<AuthenticationUserResponse>;
    /** Search users by keyword */
    search: (identityNumberOrPhone: string) => Promise<UserResponse>;
    /** Get user information by userID */
    fetch: (id: string) => Promise<UserResponse>;
    /**
     * Get users' information by userIDs in bulk
     * This API will only return the list of existing users
     */
    fetchList: (userIDs: string[]) => Promise<UserResponse[]>;
    /** Create a network user, can be created by bot only with no permission */
    createBareUser: (fullName: string, sessionSecret: string) => Promise<UserResponse>;
    /** Modify current user's personal name and avatar */
    update: (fullName: string, avatarBase64: string) => Promise<UserResponse>;
    /** update user's preferences */
    updatePreferences: (params: AtLeastOne<PreferenceRequest>) => Promise<AuthenticationUserResponse>;
    /** Manage the relationship between two users, one can 'ADD' | 'REMOVE' | 'BLOCK' | 'UNBLOCK' a user */
    updateRelationships: (relationship: RelationshipRequest | RelationshipAddRequest) => Promise<UserResponse>;
    /** Get pin logs of user */
    logs: (params: LogRequest) => Promise<LogResponse[]>;
};
export declare const UserClient: import("./types").BaseClient<{
    /** Get the current user's personal information */
    profile: () => Promise<AuthenticationUserResponse>;
    /** Get the contact list of the users, containing users and bots */
    friends: () => Promise<UserResponse[]>;
    /** Get users' block list */
    blockings: () => Promise<UserResponse[]>;
    /** Rotate user's code */
    rotateCode: () => Promise<AuthenticationUserResponse>;
    /** Search users by keyword */
    search: (identityNumberOrPhone: string) => Promise<UserResponse>;
    /** Get user information by userID */
    fetch: (id: string) => Promise<UserResponse>;
    /**
     * Get users' information by userIDs in bulk
     * This API will only return the list of existing users
     */
    fetchList: (userIDs: string[]) => Promise<UserResponse[]>;
    /** Create a network user, can be created by bot only with no permission */
    createBareUser: (fullName: string, sessionSecret: string) => Promise<UserResponse>;
    /** Modify current user's personal name and avatar */
    update: (fullName: string, avatarBase64: string) => Promise<UserResponse>;
    /** update user's preferences */
    updatePreferences: (params: AtLeastOne<PreferenceRequest>) => Promise<AuthenticationUserResponse>;
    /** Manage the relationship between two users, one can 'ADD' | 'REMOVE' | 'BLOCK' | 'UNBLOCK' a user */
    updateRelationships: (relationship: RelationshipRequest | RelationshipAddRequest) => Promise<UserResponse>;
    /** Get pin logs of user */
    logs: (params: LogRequest) => Promise<LogResponse[]>;
}>;
export default UserClient;
