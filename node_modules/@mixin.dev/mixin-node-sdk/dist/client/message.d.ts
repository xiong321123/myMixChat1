import { AxiosInstance } from 'axios';
import Keystore from './types/keystore';
import { AcknowledgementRequest, AcknowledgementResponse, MessageCategory, MessageRequest, StickerMessageRequest, ImageMessageRequest, AudioMessageRequest, VideoMessageRequest, ContactMessageRequest, AppCardMessageRequest, FileMessageRequest, LiveMessageRequest, LocationMessageRequest, AppButtonMessageRequest, TransferMessageRequest, RecallMessageRequest } from './types/message';
/**
 * Methods to send messages
 * Note:
 * * To receive a list of messages from Mixin message service, you need to setup a websocket connection.
 *   After receiving the message via WebSocket, you need to acknowledge the message to Mixin message service,
 *   otherwise it will keep pushing the message.
 */
export declare const MessageKeystoreClient: (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {
    /** Send the status of single message in bulk to Mixin Server */
    sendAcknowledgement: (message: AcknowledgementRequest) => Promise<AcknowledgementResponse[]>;
    /** Send the status of messages in bulk to Mixin Server */
    sendAcknowledges: (messages: AcknowledgementRequest[]) => Promise<AcknowledgementResponse[]>;
    /** Send one message */
    sendOne: (message: MessageRequest) => Promise<any>;
    /**
     * Send messages in bulk
     * A maximum of 100 messages can be sent in batch each time, and the message body cannot exceed 128Kb
     */
    sendBatch: (messages: MessageRequest[]) => Promise<any>;
    /** send one kind of message */
    sendMsg: (recipientID: string, category: MessageCategory, data: any) => Promise<MessageRequest>;
    sendText: (userID: string, text: string) => Promise<MessageRequest>;
    sendSticker: (userID: string, sticker: StickerMessageRequest) => Promise<MessageRequest>;
    sendImage: (userID: string, image: ImageMessageRequest) => Promise<MessageRequest>;
    sendAudio: (userID: string, audio: AudioMessageRequest) => Promise<MessageRequest>;
    sendVideo: (userID: string, video: VideoMessageRequest) => Promise<MessageRequest>;
    sendContact: (userID: string, contact: ContactMessageRequest) => Promise<MessageRequest>;
    sendAppCard: (userID: string, appCard: AppCardMessageRequest) => Promise<MessageRequest>;
    sendFile: (userID: string, file: FileMessageRequest) => Promise<MessageRequest>;
    sendLive: (userID: string, live: LiveMessageRequest) => Promise<MessageRequest>;
    sendLocation: (userID: string, location: LocationMessageRequest) => Promise<MessageRequest>;
    sendPost: (userID: string, text: string) => Promise<MessageRequest>;
    sendAppButton: (userID: string, appButton: AppButtonMessageRequest[]) => Promise<MessageRequest>;
    sendTransfer: (userID: string, transfer: TransferMessageRequest) => Promise<MessageRequest>;
    sendRecall: (userID: string, message: RecallMessageRequest) => Promise<MessageRequest>;
};
export declare const MessageClient: import("./types").BaseClient<{
    /** Send the status of single message in bulk to Mixin Server */
    sendAcknowledgement: (message: AcknowledgementRequest) => Promise<AcknowledgementResponse[]>;
    /** Send the status of messages in bulk to Mixin Server */
    sendAcknowledges: (messages: AcknowledgementRequest[]) => Promise<AcknowledgementResponse[]>;
    /** Send one message */
    sendOne: (message: MessageRequest) => Promise<any>;
    /**
     * Send messages in bulk
     * A maximum of 100 messages can be sent in batch each time, and the message body cannot exceed 128Kb
     */
    sendBatch: (messages: MessageRequest[]) => Promise<any>;
    /** send one kind of message */
    sendMsg: (recipientID: string, category: MessageCategory, data: any) => Promise<MessageRequest>;
    sendText: (userID: string, text: string) => Promise<MessageRequest>;
    sendSticker: (userID: string, sticker: StickerMessageRequest) => Promise<MessageRequest>;
    sendImage: (userID: string, image: ImageMessageRequest) => Promise<MessageRequest>;
    sendAudio: (userID: string, audio: AudioMessageRequest) => Promise<MessageRequest>;
    sendVideo: (userID: string, video: VideoMessageRequest) => Promise<MessageRequest>;
    sendContact: (userID: string, contact: ContactMessageRequest) => Promise<MessageRequest>;
    sendAppCard: (userID: string, appCard: AppCardMessageRequest) => Promise<MessageRequest>;
    sendFile: (userID: string, file: FileMessageRequest) => Promise<MessageRequest>;
    sendLive: (userID: string, live: LiveMessageRequest) => Promise<MessageRequest>;
    sendLocation: (userID: string, location: LocationMessageRequest) => Promise<MessageRequest>;
    sendPost: (userID: string, text: string) => Promise<MessageRequest>;
    sendAppButton: (userID: string, appButton: AppButtonMessageRequest[]) => Promise<MessageRequest>;
    sendTransfer: (userID: string, transfer: TransferMessageRequest) => Promise<MessageRequest>;
    sendRecall: (userID: string, message: RecallMessageRequest) => Promise<MessageRequest>;
}>;
export default MessageClient;
