/// <reference types="node" />
import { AxiosInstance } from 'axios';
import { Keystore, AuthenticationUserResponse, SafeAsset, SafeDepositEntriesRequest, SafeDepositEntryResponse, SafePendingDepositRequest, SafePendingDepositResponse, SafeSnapshot, SafeSnapshotsRequest, SafeWithdrawalFee } from './types';
export declare const SafeKeystoreClient: (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {
    /** If you want to register safe user, you need to upgrade TIP PIN first. */
    register: (user_id: string, tipPin: string, priv: Buffer) => Promise<AuthenticationUserResponse>;
    checkRegisteration: () => Promise<AuthenticationUserResponse>;
    assets: () => Promise<SafeAsset[]>;
    fetchAsset: (id: string) => Promise<SafeAsset>;
    fetchAssets: (assetIds: string[]) => Promise<SafeAsset[]>;
    fetchFee: (asset: string, destination: string) => Promise<SafeWithdrawalFee[]>;
    depositEntries: (data: SafeDepositEntriesRequest) => Promise<SafeDepositEntryResponse[]>;
    createDeposit: (chain_id: string) => Promise<SafeDepositEntryResponse[]>;
    pendingDeposits: (params: SafePendingDepositRequest) => Promise<SafePendingDepositResponse[]>;
    /**
     * Get snapshots for single user
     * Or Get snapshots for all network users with app uuid passed
     */
    fetchSafeSnapshots: (data: SafeSnapshotsRequest) => Promise<SafeSnapshot[]>;
    fetchSafeSnapshot: (id: string) => Promise<SafeSnapshot>;
};
export declare const SafeClient: import("./types").BaseClient<{
    /** If you want to register safe user, you need to upgrade TIP PIN first. */
    register: (user_id: string, tipPin: string, priv: Buffer) => Promise<AuthenticationUserResponse>;
    checkRegisteration: () => Promise<AuthenticationUserResponse>;
    assets: () => Promise<SafeAsset[]>;
    fetchAsset: (id: string) => Promise<SafeAsset>;
    fetchAssets: (assetIds: string[]) => Promise<SafeAsset[]>;
    fetchFee: (asset: string, destination: string) => Promise<SafeWithdrawalFee[]>;
    depositEntries: (data: SafeDepositEntriesRequest) => Promise<SafeDepositEntryResponse[]>;
    createDeposit: (chain_id: string) => Promise<SafeDepositEntryResponse[]>;
    pendingDeposits: (params: SafePendingDepositRequest) => Promise<SafePendingDepositResponse[]>;
    /**
     * Get snapshots for single user
     * Or Get snapshots for all network users with app uuid passed
     */
    fetchSafeSnapshots: (data: SafeSnapshotsRequest) => Promise<SafeSnapshot[]>;
    fetchSafeSnapshot: (id: string) => Promise<SafeSnapshot>;
}>;
export default SafeClient;
