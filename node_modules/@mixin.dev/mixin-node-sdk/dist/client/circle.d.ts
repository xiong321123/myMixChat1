import { AxiosInstance } from 'axios';
import { CircleResponse, CircleRequest, CircleConversationResponse } from './types/circle';
/**
 * Circle is used to classify conversations
 * User can have no more than 64 circles
 * Docs: https://developers.mixin.one/docs/api/circles/list
 */
export declare const CircleKeystoreClient: (axiosInstance: AxiosInstance) => {
    /** Get the details of a certain circle */
    fetch: (circleID: string) => Promise<CircleResponse>;
    /** Get all circles of a user */
    fetchList: () => Promise<CircleResponse[]>;
    /** Get all the conversations in a circle of a user */
    conversations: (circleID: string, params: CircleRequest) => Promise<CircleConversationResponse[]>;
    /** Create a circle */
    create: (name: string) => Promise<CircleResponse>;
    /** Modify the circle name */
    update: (circleID: string, name: string) => Promise<CircleResponse>;
    /** Delete a circle */
    delete: (circleID: string) => Promise<any>;
    /** Add the user to  a circle */
    addUser: (userID: string, circleID: string) => Promise<CircleResponse[]>;
    /** Remove the user from a circle */
    removeUser: (userID: string, circleID: string) => Promise<CircleResponse[]>;
    /** Add the group from a certain circle */
    addConversation: (conversationID: string, circleID: string) => Promise<CircleResponse[]>;
    /** Remove the group from a certain circle */
    removeConversation: (conversation_id: string, circleID: string) => Promise<CircleResponse[]>;
};
export declare const CircleClient: import("./types").BaseClient<{
    /** Get the details of a certain circle */
    fetch: (circleID: string) => Promise<CircleResponse>;
    /** Get all circles of a user */
    fetchList: () => Promise<CircleResponse[]>;
    /** Get all the conversations in a circle of a user */
    conversations: (circleID: string, params: CircleRequest) => Promise<CircleConversationResponse[]>;
    /** Create a circle */
    create: (name: string) => Promise<CircleResponse>;
    /** Modify the circle name */
    update: (circleID: string, name: string) => Promise<CircleResponse>;
    /** Delete a circle */
    delete: (circleID: string) => Promise<any>;
    /** Add the user to  a circle */
    addUser: (userID: string, circleID: string) => Promise<CircleResponse[]>;
    /** Remove the user from a circle */
    removeUser: (userID: string, circleID: string) => Promise<CircleResponse[]>;
    /** Add the group from a certain circle */
    addConversation: (conversationID: string, circleID: string) => Promise<CircleResponse[]>;
    /** Remove the group from a certain circle */
    removeConversation: (conversation_id: string, circleID: string) => Promise<CircleResponse[]>;
}>;
export default CircleClient;
