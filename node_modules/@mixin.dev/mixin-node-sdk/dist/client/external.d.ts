import { AxiosInstance } from 'axios';
import { DepositRequest, ProxyRequest } from './types/external';
import { CheckAddressRequest, CheckAddressResponse, ExchangeRateResponse, ExternalTransactionResponse } from './types/network';
export declare const ExternalKeystoreClient: (axiosInstance: AxiosInstance) => {
    /**
     * Get the pending deposits
     * Which confirmations is less then threshold
     */
    deposits: (params: DepositRequest) => Promise<ExternalTransactionResponse[]>;
    /**
     * Check if an address belongs to Mixin
     */
    checkAddress: (params: CheckAddressRequest) => Promise<CheckAddressResponse>;
    /**
     * GET the list of all fiat exchange rates based on US Dollar
     */
    exchangeRates: () => Promise<ExchangeRateResponse[]>;
    /**
     * Submit a raw transaction to a random mainnet node
     *   {
     *     method: 'sendrawtransaction',
     *     params: array of transaction hash
     *   }
     * */
    proxy: (params: ProxyRequest) => Promise<any>;
};
export declare const ExternalClient: import("./types").BaseClient<{
    /**
     * Get the pending deposits
     * Which confirmations is less then threshold
     */
    deposits: (params: DepositRequest) => Promise<ExternalTransactionResponse[]>;
    /**
     * Check if an address belongs to Mixin
     */
    checkAddress: (params: CheckAddressRequest) => Promise<CheckAddressResponse>;
    /**
     * GET the list of all fiat exchange rates based on US Dollar
     */
    exchangeRates: () => Promise<ExchangeRateResponse[]>;
    /**
     * Submit a raw transaction to a random mainnet node
     *   {
     *     method: 'sendrawtransaction',
     *     params: array of transaction hash
     *   }
     * */
    proxy: (params: ProxyRequest) => Promise<any>;
}>;
export default ExternalClient;
