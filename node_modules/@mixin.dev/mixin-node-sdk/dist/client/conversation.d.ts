import { AxiosInstance } from 'axios';
import Keystore from './types/keystore';
import { ConversationRequest, ConversationResponse, ConversationAction, ParticipantRequest } from './types/conversation';
/**
 * Create and manage a conversation
 * Notes:
 * * only owner and admin can add or remove participants, and rotate conversation code
 * * only owner can change the role of participants
 * * only owner and admin can setup disappear
 * * for group conversation, creator will be the owner and can't be changed.
 * Docs: https://developers.mixin.one/docs/api/conversations/read
 */
export declare const ConversationKeystoreClient: (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {
    /** Get specific conversation information by conversationID */
    fetch: (conversationID: string) => Promise<ConversationResponse>;
    /**
     * Ensure the conversation is created
     * when creating a new group or having a conversation with a user
     * for the first time.
     */
    create: (params: ConversationRequest) => Promise<ConversationResponse>;
    /** Create a conversation with a user for the first time */
    createContact: (userID: string) => Promise<ConversationResponse>;
    /** Create a new group for the first time */
    createGroup: (conversationID: string, name: string, participant: ParticipantRequest[]) => Promise<ConversationResponse>;
    /** Join a group by codeID */
    joinGroup: (codeID: string) => Promise<ConversationResponse>;
    /** Exit a group */
    exitGroup: (conversationID: string) => Promise<ConversationResponse>;
    /** Add/remove other participants or add/remove admin in a group */
    updateParticipants: (conversationID: string, action: ConversationAction, participant: ParticipantRequest[]) => Promise<ConversationResponse>;
    /** Add users, if you are the owner or admin of this group conversation */
    addParticipants: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Remove users, if you are the owner or admin of this group conversation */
    removeParticipants: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Set admin privileges for a user, group owners Only */
    setAdmin: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Remove admin privileges for a user, group owners Only */
    revokeAdmin: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Reset invitation link and codeId */
    resetGroupCode: (conversationID: string) => Promise<ConversationResponse>;
    /** Update a group's title and announcement by conversationID */
    updateGroupInfo: (conversationID: string, params: Pick<ConversationRequest, 'name' | 'announcement'>) => Promise<ConversationResponse>;
    /** Mute contact for <duration> seconds */
    mute: (conversationID: string, duration: number) => Promise<ConversationResponse>;
    /** Unmute contact */
    unmute: (conversationID: string) => Promise<ConversationResponse>;
    /** Set the disappearing message expiration duration for group */
    disappearDuration: (conversationID: string, duration: number) => Promise<ConversationResponse>;
};
export declare const ConversationClient: import("./types").BaseClient<{
    /** Get specific conversation information by conversationID */
    fetch: (conversationID: string) => Promise<ConversationResponse>;
    /**
     * Ensure the conversation is created
     * when creating a new group or having a conversation with a user
     * for the first time.
     */
    create: (params: ConversationRequest) => Promise<ConversationResponse>;
    /** Create a conversation with a user for the first time */
    createContact: (userID: string) => Promise<ConversationResponse>;
    /** Create a new group for the first time */
    createGroup: (conversationID: string, name: string, participant: ParticipantRequest[]) => Promise<ConversationResponse>;
    /** Join a group by codeID */
    joinGroup: (codeID: string) => Promise<ConversationResponse>;
    /** Exit a group */
    exitGroup: (conversationID: string) => Promise<ConversationResponse>;
    /** Add/remove other participants or add/remove admin in a group */
    updateParticipants: (conversationID: string, action: ConversationAction, participant: ParticipantRequest[]) => Promise<ConversationResponse>;
    /** Add users, if you are the owner or admin of this group conversation */
    addParticipants: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Remove users, if you are the owner or admin of this group conversation */
    removeParticipants: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Set admin privileges for a user, group owners Only */
    setAdmin: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Remove admin privileges for a user, group owners Only */
    revokeAdmin: (conversationID: string, userIDs: string[]) => Promise<ConversationResponse>;
    /** Reset invitation link and codeId */
    resetGroupCode: (conversationID: string) => Promise<ConversationResponse>;
    /** Update a group's title and announcement by conversationID */
    updateGroupInfo: (conversationID: string, params: Pick<ConversationRequest, 'name' | 'announcement'>) => Promise<ConversationResponse>;
    /** Mute contact for <duration> seconds */
    mute: (conversationID: string, duration: number) => Promise<ConversationResponse>;
    /** Unmute contact */
    unmute: (conversationID: string) => Promise<ConversationResponse>;
    /** Set the disappearing message expiration duration for group */
    disappearDuration: (conversationID: string, duration: number) => Promise<ConversationResponse>;
}>;
export default ConversationClient;
