import type { AxiosInstance } from 'axios';
import type Keystore from './types/keystore';
import type { MultisigInitAction } from './types/multisig';
import type { CollectibleResponse, CollectionResponse, CollectibleOutputsRequest, CollectibleOutputsResponse, CollectibleTransactionResponse } from './types/collectible';
export declare const MintMinimumCost = "0.001";
export declare const GroupMembers: string[];
export declare const GroupThreshold = 5;
/**
 * Users can use those APIs to manage their NFTs
 * Note:
 * * Before transferring a collectible, user should create a request first.
 * * only unsigned request can be canceled.
 * * only uncompleted sign transaction can be unlocked.
 * Docs: https://developers.mixin.one/docs/api/collectibles/request
 */
export declare const CollectibleKeystoreClient: (axiosInstance: AxiosInstance, keystore: Keystore | undefined) => {
    /** Get the information of the collectible */
    fetch: (tokenID: string) => Promise<CollectibleResponse>;
    /** Get the information of the collectible collection */
    fetchCollection: (collectionID: string) => Promise<CollectionResponse>;
    /** Get collectibles outputs */
    outputs: (params: CollectibleOutputsRequest) => Promise<CollectibleOutputsResponse[]>;
    /** @deprecated Use transfer() instead */
    request: (action: MultisigInitAction, raw: string) => Promise<CollectibleTransactionResponse>;
    /** Create a collectibles transfer request */
    transfer: (action: MultisigInitAction, raw: string) => Promise<CollectibleTransactionResponse>;
    /** Initiate or participate in signing */
    sign: (pin: string, requestID: string) => Promise<CollectibleTransactionResponse>;
    /** Cancel my signature */
    cancel: (pin: string, requestID: string) => Promise<CollectibleTransactionResponse>;
    /** Cancel collectibles */
    unlock: (pin: string, requestID: string) => Promise<CollectibleTransactionResponse>;
};
export declare const CollectibleClient: import("./types").BaseClient<{
    /** Get the information of the collectible */
    fetch: (tokenID: string) => Promise<CollectibleResponse>;
    /** Get the information of the collectible collection */
    fetchCollection: (collectionID: string) => Promise<CollectionResponse>;
    /** Get collectibles outputs */
    outputs: (params: CollectibleOutputsRequest) => Promise<CollectibleOutputsResponse[]>;
    /** @deprecated Use transfer() instead */
    request: (action: MultisigInitAction, raw: string) => Promise<CollectibleTransactionResponse>;
    /** Create a collectibles transfer request */
    transfer: (action: MultisigInitAction, raw: string) => Promise<CollectibleTransactionResponse>;
    /** Initiate or participate in signing */
    sign: (pin: string, requestID: string) => Promise<CollectibleTransactionResponse>;
    /** Cancel my signature */
    cancel: (pin: string, requestID: string) => Promise<CollectibleTransactionResponse>;
    /** Cancel collectibles */
    unlock: (pin: string, requestID: string) => Promise<CollectibleTransactionResponse>;
}>;
export default CollectibleClient;
