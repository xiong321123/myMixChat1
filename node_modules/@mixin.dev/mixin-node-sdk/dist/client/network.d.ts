import { AxiosInstance } from 'axios';
import { AssetResponse } from './types/asset';
import { NetworkSnapshotRequest, NetworkInfoResponse, NetworkChainResponse, NetworkAssetResponse, NetworkPriceResponse, NetworkSnapshotResponse } from './types/network';
/**
 * Public methods that need no permission
 * Docs: https://developers.mixin.one/docs/api/transfer/snapshots
 */
export declare const NetworkBaseClient: (axiosInstance: AxiosInstance) => {
    /** Get network info */
    info: () => Promise<NetworkInfoResponse>;
    /** Get the list of all public chains supported by Mixin */
    chains: () => Promise<NetworkChainResponse[]>;
    /** Get information of a chain */
    fetchChain: (chainID: string) => Promise<NetworkChainResponse>;
    /** Get public information of an asset */
    fetchAsset: (assetID: string) => Promise<NetworkAssetResponse>;
    /**
     * Get the list of the top 100 assets on the entire network
     * kind parameter is used to specify the top assets, for NORMAL value will not swap lp tokens
     */
    topAssets: (kind?: string) => Promise<AssetResponse[]>;
    /**
     * Search for popular assets by symbol or name
     * This API only returns assets with icons or prices.
     */
    searchAssets: (keyword: string, kind?: string) => Promise<AssetResponse[]>;
    /**
     * Get the historical price of a given asset
     * If no ticker found, price_usd and price_usd will return 0
     */
    historicalPrice: (assetID: string, offset?: string | undefined) => Promise<NetworkPriceResponse>;
    /** Get public information of specific snapshot by snapshot_id */
    snapshot: (snapshotID: string) => Promise<NetworkSnapshotResponse>;
    /** Get public information of snapshot records, which including transfers, deposits, withdrawals, etc */
    snapshots: (inputParams: NetworkSnapshotRequest) => Promise<NetworkSnapshotResponse[]>;
};
export declare const NetworkClient: import("./types").BaseClient<{
    /** Get network info */
    info: () => Promise<NetworkInfoResponse>;
    /** Get the list of all public chains supported by Mixin */
    chains: () => Promise<NetworkChainResponse[]>;
    /** Get information of a chain */
    fetchChain: (chainID: string) => Promise<NetworkChainResponse>;
    /** Get public information of an asset */
    fetchAsset: (assetID: string) => Promise<NetworkAssetResponse>;
    /**
     * Get the list of the top 100 assets on the entire network
     * kind parameter is used to specify the top assets, for NORMAL value will not swap lp tokens
     */
    topAssets: (kind?: string) => Promise<AssetResponse[]>;
    /**
     * Search for popular assets by symbol or name
     * This API only returns assets with icons or prices.
     */
    searchAssets: (keyword: string, kind?: string) => Promise<AssetResponse[]>;
    /**
     * Get the historical price of a given asset
     * If no ticker found, price_usd and price_usd will return 0
     */
    historicalPrice: (assetID: string, offset?: string | undefined) => Promise<NetworkPriceResponse>;
    /** Get public information of specific snapshot by snapshot_id */
    snapshot: (snapshotID: string) => Promise<NetworkSnapshotResponse>;
    /** Get public information of snapshot records, which including transfers, deposits, withdrawals, etc */
    snapshots: (inputParams: NetworkSnapshotRequest) => Promise<NetworkSnapshotResponse[]>;
}>;
export default NetworkClient;
